// –õ–æ–≥—ñ–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ DeepSeek AI —á–µ—Ä–µ–∑ Groq API

let conversationHistory = [];

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ AI
async function sendMessage() {
    const input = document.getElementById('userInput');
    const message = input.value.trim();
    
    if (!message) return;

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É
    input.value = '';
    input.style.height = 'auto';

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    addMessage(message, 'user');
    conversationHistory.push({ role: 'user', content: message });

    // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    const sendBtn = document.getElementById('sendBtn');
    sendBtn.disabled = true;
    sendBtn.innerHTML = '<div class="loading-dots"><div class="loading-dot"></div><div class="loading-dot"></div><div class="loading-dot"></div></div>';

    try {
        const apiKey = localStorage.getItem('groq_api_key');
        
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'llama-3.3-70b-versatile',
                messages: conversationHistory,
                temperature: 0.7,
                max_tokens: 4000
            })
        });

        const data = await response.json();

        if (!response.ok) {
            handleApiError(response.status, data);
            return;
        }

        const aiMessage = data.choices[0].message.content;
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        conversationHistory.push({ role: 'assistant', content: aiMessage });
        
        // –í—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –∫–æ–¥—É
        const textOnly = removeCodeBlocks(aiMessage);
        addMessage(textOnly, 'assistant');
        
        // –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É
        extractAndDisplayCode(aiMessage);

    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        addMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: ' + error.message, 'assistant');
    } finally {
        // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        sendBtn.disabled = false;
        sendBtn.textContent = '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏';
    }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ API
function handleApiError(status, data) {
    let errorMessage = '';
    
    switch (status) {
        case 401:
            errorMessage = '–ù–µ–≤—ñ—Ä–Ω–∏–π API –∫–ª—é—á! –ü–µ—Ä–µ–≤—ñ—Ä –∫–ª—é—á –Ω–∞ console.groq.com';
            setTimeout(() => {
                if (confirm('–•–æ—á–µ—à –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–∏–π API –∫–ª—é—á?')) {
                    localStorage.removeItem('groq_api_key');
                    location.reload();
                }
            }, 500);
            break;
        case 429:
            errorMessage = '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ü–æ—á–µ–∫–∞–π —Ö–≤–∏–ª–∏–Ω—É —ñ —Å–ø—Ä–æ–±—É–π –∑–Ω–æ–≤—É.';
            break;
        case 500:
            errorMessage = '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ API. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.';
            break;
        default:
            errorMessage = data.error?.message || `–ü–æ–º–∏–ª–∫–∞ API: ${status}`;
    }
    
    addMessage('‚ùå –ü–æ–º–∏–ª–∫–∞: ' + errorMessage, 'assistant');
}

// –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –≤ UI)
function clearConversation() {
    conversationHistory = [];
    document.getElementById('messages').innerHTML = '';
    codeFiles = {};
    document.getElementById('fileTabs').innerHTML = '';
    document.getElementById('codeContent').innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">üìù</div>
            <h3>–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤</h3>
            <p>–ö–æ–¥ –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI</p>
        </div>
    `;
}
