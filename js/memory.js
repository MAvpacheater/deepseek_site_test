// üß† Agent Memory System - –í–ò–ü–†–ê–í–õ–ï–ù–û –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–æ–≥–∞–¥—ñ–≤

class MemoryManager {
    constructor() {
        this.memoryCategories = ['–∑–∞–≥–∞–ª—å–Ω–µ', '–≤–∞–∂–ª–∏–≤–µ', '–∑–∞–≤–¥–∞–Ω–Ω—è', '–Ω–∞–≤—á–∞–Ω–Ω—è', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ'];
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        this.loadMemories();
        console.log('‚úÖ Memory Manager initialized');
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ü–û–ì–ê–î–Ü–í
    // ========================================

    async loadMemories() {
        try {
            if (window.storageManager) {
                const memories = await storageManager.getMemories();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ appState
                if (window.appState) {
                    appState.agent.memory = memories;
                }
            }

            this.updateMemoryStats();
            this.displayMemories();

        } catch (error) {
            console.error('Failed to load memories:', error);
        }
    }

    // ========================================
    // –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    // ========================================

    updateMemoryStats() {
        const memories = window.appState ? appState.getMemories() : [];

        const totalSpan = document.getElementById('totalMemories');
        const importantSpan = document.getElementById('importantMemories');
        const memoryCountSpan = document.getElementById('memoryCount');

        if (totalSpan) {
            totalSpan.textContent = memories.length;
        }

        if (importantSpan) {
            const important = memories.filter(m => m.important).length;
            importantSpan.textContent = important;
        }

        if (memoryCountSpan) {
            memoryCountSpan.textContent = memories.length;
        }
    }

    // ========================================
    // –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –°–ü–û–ì–ê–î–Ü–í - –í–ò–ü–†–ê–í–õ–ï–ù–û!
    // ========================================

    displayMemories() {
        const list = document.getElementById('memoriesList');
        if (!list) {
            console.warn('memoriesList element not found');
            return;
        }

        const memories = window.appState ? appState.getMemories() : [];

        console.log('üìä Displaying memories:', memories.length);

        if (memories.length === 0) {
            list.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üß†</div>
                    <h3>–ü–∞–º'—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è</h3>
                    <p>–î–æ–¥–∞–π –ø–µ—Ä—à–∏–π —Å–ø–æ–≥–∞–¥ –∞–±–æ –∞–≥–µ–Ω—Ç –∑–∞–ø–∞–º'—è—Ç–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
        const sorted = [...memories].sort((a, b) => {
            const dateA = a.timestamp || a.created || a.id || 0;
            const dateB = b.timestamp || b.created || b.id || 0;
            return dateB - dateA;
        });

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ HTML –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø–æ–≥–∞–¥—É
        const memoriesHTML = sorted.map(memory => this.createMemoryCard(memory)).join('');
        
        list.innerHTML = memoriesHTML;

        console.log('‚úÖ Memories displayed successfully');
    }

    createMemoryCard(memory) {
        const icon = memory.important ? '‚≠ê' : this.getMemoryIcon(memory.category);
        const date = this.formatDate(memory.timestamp || memory.created || memory.id);
        const category = memory.category || '–∑–∞–≥–∞–ª—å–Ω–µ';
        const tags = memory.tags || [];

        // –ë–µ–∑–ø–µ—á–Ω–∏–π escapeHTML
        const escapeHTML = (text) => {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        };

        return `
            <div class="memory-card ${memory.important ? 'important' : ''}" data-id="${memory.id}">
                <div class="memory-header">
                    <div class="memory-icon">${icon}</div>
                    <div class="memory-info">
                        <div class="memory-title">${escapeHTML(memory.title)}</div>
                        <div class="memory-meta">
                            <span class="memory-category">${category}</span>
                            <span class="memory-date">${date}</span>
                        </div>
                    </div>
                    <button class="memory-menu-btn" onclick="memoryManager.toggleMemoryMenu(${memory.id})">‚ãÆ</button>
                </div>
                
                <div class="memory-content">${escapeHTML(memory.content)}</div>
                
                ${tags.length > 0 ? `
                    <div class="memory-tags">
                        ${tags.map(tag => `<span class="memory-tag">${escapeHTML(tag)}</span>`).join('')}
                    </div>
                ` : ''}
                
                <div class="memory-actions" id="memory-menu-${memory.id}" style="display: none;">
                    <button onclick="memoryManager.editMemory(${memory.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    <button onclick="memoryManager.toggleImportant(${memory.id})">
                        ${memory.important ? '‚òÜ –ó–Ω—è—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å' : '‚≠ê –í–∞–∂–ª–∏–≤–æ'}
                    </button>
                    <button onclick="memoryManager.deleteMemory(${memory.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
                </div>
            </div>
        `;
    }

    // ========================================
    // CRUD –û–ü–ï–†–ê–¶–Ü–á
    // ========================================

    addMemory() {
        const modal = document.getElementById('memoryModal');
        if (modal) {
            modal.classList.add('active');
            
            // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
            const titleInput = document.getElementById('memoryTitle');
            const contentInput = document.getElementById('memoryContent');
            const importantInput = document.getElementById('memoryImportant');

            if (titleInput) titleInput.value = '';
            if (contentInput) contentInput.value = '';
            if (importantInput) importantInput.checked = false;
        }
    }

    async saveMemory() {
        const title = document.getElementById('memoryTitle')?.value.trim();
        const content = document.getElementById('memoryContent')?.value.trim();
        const important = document.getElementById('memoryImportant')?.checked || false;

        if (!title || !content) {
            if (window.showToast) {
                showToast('‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω–∏ –≤—Å—ñ –ø–æ–ª—è!', 'warning');
            }
            return;
        }

        // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        const category = this.detectCategory(title, content);
        
        // –í–∏—Ç—è–≥—Ç–∏ —Ç–µ–≥–∏
        const tags = this.extractTags(content);

        const memory = {
            id: Date.now(),
            title: title,
            content: content,
            category: category,
            important: important,
            tags: tags,
            timestamp: Date.now(),
            created: new Date().toISOString(),
            accessed: 0,
            auto: false
        };

        try {
            // –î–æ–¥–∞—Ç–∏ –≤ appState
            if (window.appState) {
                appState.addMemory(memory);
            }

            // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ storageManager
            if (window.storageManager) {
                await storageManager.saveMemory(memory);
            }

            this.updateMemoryStats();
            this.displayMemories();
            this.closeModal('memoryModal');

            if (window.showToast) {
                showToast('‚úÖ –°–ø–æ–≥–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to save memory:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–æ–≥–∞–¥—É', 'error');
            }
        }
    }

    editMemory(memoryId) {
        const memories = window.appState ? appState.getMemories() : [];
        const memory = memories.find(m => m.id === memoryId);
        if (!memory) return;

        document.getElementById('memoryTitle').value = memory.title;
        document.getElementById('memoryContent').value = memory.content;
        document.getElementById('memoryImportant').checked = memory.important;

        // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π —Å–ø–æ–≥–∞–¥ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        if (window.appState) {
            const index = appState.agent.memory.findIndex(m => m.id === memoryId);
            if (index !== -1) {
                appState.agent.memory.splice(index, 1);
            }
        }

        const modal = document.getElementById('memoryModal');
        if (modal) modal.classList.add('active');
    }

    async toggleImportant(memoryId) {
        const memories = window.appState ? appState.getMemories() : [];
        const memory = memories.find(m => m.id === memoryId);
        
        if (memory) {
            memory.important = !memory.important;

            // –û–Ω–æ–≤–∏—Ç–∏ –≤ storageManager
            if (window.storageManager) {
                await storageManager.update(storageManager.stores.memories, memory);
            }

            this.updateMemoryStats();
            this.displayMemories();
        }
    }

    async deleteMemory(memoryId) {
        if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Å–ø–æ–≥–∞–¥?')) return;

        try {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ appState
            if (window.appState) {
                const index = appState.agent.memory.findIndex(m => m.id === memoryId);
                if (index !== -1) {
                    appState.agent.memory.splice(index, 1);
                }
            }

            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ storageManager
            if (window.storageManager) {
                await storageManager.delete(storageManager.stores.memories, memoryId);
            }

            this.updateMemoryStats();
            this.displayMemories();

            if (window.showToast) {
                showToast('‚úÖ –°–ø–æ–≥–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
            }

        } catch (error) {
            console.error('Failed to delete memory:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
            }
        }
    }

    async clearMemories() {
        if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≥–∞–¥–∏? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!')) return;

        try {
            // –û—á–∏—Å—Ç–∏—Ç–∏ –≤ appState
            if (window.appState) {
                appState.agent.memory = [];
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ –≤ storageManager
            if (window.storageManager) {
                await storageManager.clear(storageManager.stores.memories);
            }

            this.updateMemoryStats();
            this.displayMemories();

            if (window.showToast) {
                showToast('üóëÔ∏è –ü–∞–º\'—è—Ç—å –æ—á–∏—â–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to clear memories:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è', 'error');
            }
        }
    }

    // ========================================
    // –ü–û–®–£–ö
    // ========================================

    searchMemories() {
        const query = document.getElementById('memorySearch')?.value.toLowerCase();
        
        if (!query || query === '') {
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Å–ø–æ–≥–∞–¥–∏
            this.displayMemories();
            return;
        }

        const cards = document.querySelectorAll('.memory-card');
        let visibleCount = 0;
        
        cards.forEach(card => {
            const text = card.textContent.toLowerCase();
            if (text.includes(query)) {
                card.style.display = 'block';
                visibleCount++;
            } else {
                card.style.display = 'none';
            }
        });

        console.log(`üîç Search: "${query}" - found ${visibleCount} memories`);
    }

    // ========================================
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–ü–ê–ú'–Ø–¢–û–í–£–í–ê–ù–ù–Ø
    // ========================================

    async autoRemember(type, data) {
        const autoMemoryEnabled = localStorage.getItem('agentMemory') !== 'false';
        if (!autoMemoryEnabled) return;

        let title, content, important = false;

        switch (type) {
            case 'project_saved':
                title = `–ü—Ä–æ–µ–∫—Ç: ${data.title}`;
                content = `–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç "${data.title}". ${data.mode === 'deepseek' ? '–ö–æ–¥' : '–†–æ–∑–º–æ–≤–∞'} –∑ ${data.messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.`;
                break;

            case 'plan_completed':
                title = `–í–∏–∫–æ–Ω–∞–Ω–æ: ${data.title}`;
                content = `–ü–ª–∞–Ω "${data.title}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${this.formatDate(new Date())}`;
                important = true;
                break;

            case 'code_generated':
                title = '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∫–æ–¥';
                content = `–°—Ç–≤–æ—Ä–µ–Ω–æ ${data.filesCount} —Ñ–∞–π–ª—ñ–≤: ${data.files.join(', ')}`;
                break;

            case 'user_preference':
                title = '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';
                content = data.preference;
                important = true;
                break;

            case 'error_occurred':
                title = '–ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏';
                content = `${data.message} –≤ ${data.context}`;
                break;
        }

        if (title && content) {
            const memory = {
                id: Date.now(),
                title: title,
                content: content,
                category: type.includes('plan') ? '–∑–∞–≤–¥–∞–Ω–Ω—è' : '–∑–∞–≥–∞–ª—å–Ω–µ',
                important: important,
                tags: [type],
                timestamp: Date.now(),
                created: new Date().toISOString(),
                accessed: 0,
                auto: true
            };

            try {
                // –î–æ–¥–∞—Ç–∏ –≤ appState
                if (window.appState) {
                    appState.addMemory(memory);
                }

                // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ storageManager
                if (window.storageManager) {
                    await storageManager.saveMemory(memory);
                }

                // –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                this.updateMemoryStats();
                this.displayMemories();

                console.log('ü§ñ Auto-remembered:', title);

            } catch (error) {
                console.error('Auto-remember failed:', error);
            }
        }
    }

    // ========================================
    // –ï–ö–°–ü–û–†–¢
    // ========================================

    exportMemories() {
        const memories = window.appState ? appState.getMemories() : [];

        if (memories.length === 0) {
            if (window.showToast) {
                showToast('‚ö†Ô∏è –ù–µ–º–∞—î —Å–ø–æ–≥–∞–¥—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!', 'warning');
            }
            return;
        }

        let markdown = '# üß† –ü–∞–º\'—è—Ç—å AI –ê–≥–µ–Ω—Ç–∞\n\n';
        markdown += `–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('uk-UA')}\n\n`;
        markdown += `–í—Å—å–æ–≥–æ —Å–ø–æ–≥–∞–¥—ñ–≤: ${memories.length}\n\n`;
        markdown += '---\n\n';

        memories.forEach(memory => {
            markdown += `## ${memory.important ? '‚≠ê ' : ''}${memory.title}\n\n`;
            markdown += `**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** ${memory.category}  \n`;
            markdown += `**–î–∞—Ç–∞:** ${this.formatDate(memory.timestamp || memory.created)}  \n`;

            if (memory.tags && memory.tags.length > 0) {
                markdown += `**–¢–µ–≥–∏:** ${memory.tags.join(', ')}  \n`;
            }

            markdown += `\n${memory.content}\n\n`;
            markdown += '---\n\n';
        });

        const blob = new Blob([markdown], { type: 'text/markdown' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `agent-memory-${Date.now()}.md`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        if (window.showToast) {
            showToast('‚úÖ –ü–∞–º\'—è—Ç—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!', 'success');
        }
    }

    // ========================================
    // –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
    // ========================================

    detectCategory(title, content) {
        const text = (title + ' ' + content).toLowerCase();

        if (text.includes('–≤–∞–∂–ª–∏–≤') || text.includes('–∫—Ä–∏—Ç–∏—á–Ω') || text.includes('—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ')) {
            return '–≤–∞–∂–ª–∏–≤–µ';
        }
        if (text.includes('–∑–∞–≤–¥–∞–Ω') || text.includes('–∑—Ä–æ–±–∏') || text.includes('—Ç—Ä–µ–±–∞')) {
            return '–∑–∞–≤–¥–∞–Ω–Ω—è';
        }
        if (text.includes('–Ω–∞–≤—á–∏') || text.includes('–≤–∏–≤—á–∏') || text.includes('–∑–∞–ø–∞–º\'—è—Ç–∞')) {
            return '–Ω–∞–≤—á–∞–Ω–Ω—è';
        }
        if (text.includes('–æ—Å–æ–±–∏—Å—Ç') || text.includes('–ø—Ä–∏–≤–∞—Ç') || text.includes('–º—ñ–π')) {
            return '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ';
        }

        return '–∑–∞–≥–∞–ª—å–Ω–µ';
    }

    extractTags(text) {
        // –®—É–∫–∞—Ç–∏ —Å–ª–æ–≤–∞ –ø—ñ—Å–ª—è #
        const hashTags = text.match(/#[\w–∞-—è—ñ—ó—î]+/gi) || [];
        const tags = hashTags.map(tag => tag.substring(1).toLowerCase());

        // –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        const keywords = ['–ø—Ä–æ–µ–∫—Ç', '—ñ–¥–µ—è', '–±–∞–≥', '—Ñ—ñ—á–∞', 'todo'];
        keywords.forEach(word => {
            if (text.toLowerCase().includes(word) && !tags.includes(word)) {
                tags.push(word);
            }
        });

        return [...new Set(tags)]; // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–µ–≥–∏
    }

    getMemoryIcon(category) {
        const icons = {
            '–∑–∞–≥–∞–ª—å–Ω–µ': 'üí≠',
            '–≤–∞–∂–ª–∏–≤–µ': '‚≠ê',
            '–∑–∞–≤–¥–∞–Ω–Ω—è': 'üìã',
            '–Ω–∞–≤—á–∞–Ω–Ω—è': 'üìö',
            '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ': 'üë§'
        };
        return icons[category] || 'üí≠';
    }

    formatDate(date) {
        if (!date) return '–Ω–µ–≤—ñ–¥–æ–º–æ';

        const d = new Date(date);
        const now = new Date();
        const diff = now - d;

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return '—â–æ–π–Ω–æ';
        if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
        if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;

        return d.toLocaleDateString('uk-UA');
    }

    toggleMemoryMenu(memoryId) {
        const menu = document.getElementById(`memory-menu-${memoryId}`);
        if (menu) {
            const isVisible = menu.style.display !== 'none';

            // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –º–µ–Ω—é
            document.querySelectorAll('.memory-actions').forEach(m => {
                m.style.display = 'none';
            });

            menu.style.display = isVisible ? 'none' : 'flex';
        }
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    // ========================================
    // –¢–ï–°–¢–û–í–Ü –î–ê–ù–Ü (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
    // ========================================

    addTestMemories() {
        const testMemories = [
            {
                title: '–ü–µ—Ä—à–∏–π –ø—Ä–æ–µ–∫—Ç',
                content: '–°—Ç–≤–æ—Ä–µ–Ω–æ AI –¥–æ–¥–∞—Ç–æ–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Gemini —Ç–∞ DeepSeek',
                important: true
            },
            {
                title: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏',
                content: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª—é–±–∏—Ç—å —Ç–µ–º–Ω—É —Ç–µ–º—É #–¥–∏–∑–∞–π–Ω',
                important: false
            },
            {
                title: '–í–∞–∂–ª–∏–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
                content: '–¢—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö #todo #—Ñ—ñ—á–∞',
                important: true
            }
        ];

        testMemories.forEach(test => {
            const memory = {
                id: Date.now() + Math.random(),
                title: test.title,
                content: test.content,
                category: this.detectCategory(test.title, test.content),
                important: test.important,
                tags: this.extractTags(test.content),
                timestamp: Date.now() - Math.random() * 86400000,
                created: new Date().toISOString(),
                accessed: 0,
                auto: false
            };

            if (window.appState) {
                appState.addMemory(memory);
            }
        });

        this.updateMemoryStats();
        this.displayMemories();

        if (window.showToast) {
            showToast('‚úÖ –î–æ–¥–∞–Ω–æ 3 —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≥–∞–¥–∏!', 'success');
        }
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

let memoryManager = null;

document.addEventListener('DOMContentLoaded', () => {
    memoryManager = new MemoryManager();

    // –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.addMemory = () => memoryManager.addMemory();
    window.saveMemory = () => memoryManager.saveMemory();
    window.editMemory = (id) => memoryManager.editMemory(id);
    window.toggleImportant = (id) => memoryManager.toggleImportant(id);
    window.deleteMemory = (id) => memoryManager.deleteMemory(id);
    window.clearMemories = () => memoryManager.clearMemories();
    window.searchMemories = () => memoryManager.searchMemories();
    window.exportMemories = () => memoryManager.exportMemories();
    window.displayMemories = () => memoryManager.displayMemories();
    window.toggleMemoryMenu = (id) => memoryManager.toggleMemoryMenu(id);
    window.autoRemember = (type, data) => memoryManager.autoRemember(type, data);
    
    // –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó)
    window.addTestMemories = () => memoryManager.addTestMemories();

    console.log('‚úÖ Memory module loaded (FIXED display)');
    console.log('üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π addTestMemories() –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≥–∞–¥—ñ–≤');
});

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É
window.MemoryManager = MemoryManager;
window.memoryManager = memoryManager;
