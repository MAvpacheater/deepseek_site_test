// üß† Agent Memory System - LIST VIEW (2025 version) - –í–ò–ü–†–ê–í–õ–ï–ù–û

class MemoryManager {
    constructor() {
        this.memoryCategories = ['–∑–∞–≥–∞–ª—å–Ω–µ', '–≤–∞–∂–ª–∏–≤–µ', '–∑–∞–≤–¥–∞–Ω–Ω—è', '–Ω–∞–≤—á–∞–Ω–Ω—è', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ'];
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        document.addEventListener("DOMContentLoaded", async () => {
            await this.loadMemories();
            console.log('‚úÖ Memory Manager initialized');
        });
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –°–ü–û–ì–ê–î–Ü–í
    // ========================================

    async loadMemories() {
        try {
            let memories = [];

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–∑ storageManager
            if (window.storageManager && typeof storageManager.getMemories === "function") {
                memories = await storageManager.getMemories();
                console.log('üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ IndexedDB:', memories.length);
            }

            // Fallback –¥–æ localStorage
            if (memories.length === 0) {
                const localMemories = localStorage.getItem('agent_memories');
                if (localMemories) {
                    try {
                        memories = JSON.parse(localMemories);
                        console.log('üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ localStorage:', memories.length);
                    } catch (e) {
                        console.error('Failed to parse localStorage memories:', e);
                    }
                }
            }

            // –Ø–∫—â–æ appState —ñ—Å–Ω—É—î ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ
            if (window.appState) {
                if (!appState.agent) appState.agent = {};
                appState.agent.memory = memories;
            }

            this.updateMemoryStats();
            this.displayMemories();

        } catch (error) {
            console.error('‚ùå Failed to load memories:', error);
        }
    }

    // ========================================
    // –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    // ========================================

    updateMemoryStats() {
        const memories = window.appState?.getMemories?.() || [];

        const totalSpan = document.getElementById('totalMemories');
        const importantSpan = document.getElementById('importantMemories');
        const memoryCountSpan = document.getElementById('memoryCount');

        if (totalSpan) totalSpan.textContent = memories.length;
        if (importantSpan) {
            const important = memories.filter(m => m.important).length;
            importantSpan.textContent = important;
        }
        if (memoryCountSpan) memoryCountSpan.textContent = memories.length;
    }

    // ========================================
    // –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –°–ü–û–ì–ê–î–Ü–í - –°–ü–ò–°–û–ö
    // ========================================

    displayMemories() {
        const list = document.getElementById('memoriesList') || document.querySelector('.memories-list');
        if (!list) {
            console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–æ–≥–∞–¥—ñ–≤ (#memoriesList –∞–±–æ .memories-list)');
            return;
        }

        const memories = window.appState?.getMemories?.() || [];

        console.log(`üìä –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${memories.length} —Å–ø–æ–≥–∞–¥—ñ–≤`);

        if (memories.length === 0) {
            list.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üß†</div>
                    <h3>–ü–∞–º'—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è</h3>
                    <p>–î–æ–¥–∞–π –ø–µ—Ä—à–∏–π —Å–ø–æ–≥–∞–¥ –∞–±–æ –∞–≥–µ–Ω—Ç –∑–∞–ø–∞–º'—è—Ç–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é
        const sorted = [...memories].sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫
        list.innerHTML = `
            <div class="memory-list-container">
                ${sorted.map(memory => this.createMemoryListItem(memory)).join('')}
            </div>
        `;
        
        console.log('‚úÖ –°–ø–æ–≥–∞–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ —Å–ø–∏—Å–∫–æ–º');
    }

    // ========================================
    // –°–¢–í–û–†–ï–ù–ù–Ø –ï–õ–ï–ú–ï–ù–¢–ê –°–ü–ò–°–ö–£
    // ========================================

    createMemoryListItem(memory) {
        const icon = memory.important ? '‚≠ê' : this.getMemoryIcon(memory.category);
        const date = this.formatDate(memory.timestamp || memory.created || memory.id);
        const category = memory.category || '–∑–∞–≥–∞–ª—å–Ω–µ';
        const tags = memory.tags || [];

        const escapeHTML = (text) => {
            const div = document.createElement('div');
            div.textContent = text || '';
            return div.innerHTML;
        };

        return `
            <div class="memory-list-item ${memory.important ? 'important' : ''}" data-id="${memory.id}">
                <div class="memory-list-left">
                    <div class="memory-list-icon">${icon}</div>
                </div>
                
                <div class="memory-list-content">
                    <div class="memory-list-header">
                        <h3 class="memory-list-title">${escapeHTML(memory.title)}</h3>
                        <div class="memory-list-meta">
                            <span class="memory-category">${category}</span>
                            <span class="memory-date">${date}</span>
                        </div>
                    </div>
                    
                    <p class="memory-list-text">${escapeHTML(memory.content)}</p>
                    
                    ${tags.length > 0 ? `
                        <div class="memory-tags">
                            ${tags.map(tag => `<span class="memory-tag">${escapeHTML(tag)}</span>`).join('')}
                        </div>
                    ` : ''}
                </div>
                
                <div class="memory-list-actions">
                    <button class="memory-action-btn" onclick="memoryManager.editMemory(${memory.id})" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">‚úèÔ∏è</button>
                    <button class="memory-action-btn" onclick="memoryManager.toggleImportant(${memory.id})" title="${memory.important ? '–ó–Ω—è—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å' : '–í–∞–∂–ª–∏–≤–æ'}">
                        ${memory.important ? '‚òÜ' : '‚≠ê'}
                    </button>
                    <button class="memory-action-btn delete" onclick="memoryManager.deleteMemory(${memory.id})" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }

    // ========================================
    // CRUD –û–ü–ï–†–ê–¶–Ü–á
    // ========================================

    addMemory() {
        const modal = document.getElementById('memoryModal');
        if (modal) modal.classList.add('active');

        ['memoryTitle', 'memoryContent'].forEach(id => {
            const el = document.getElementById(id);
            if (el) el.value = '';
        });
        const importantInput = document.getElementById('memoryImportant');
        if (importantInput) importantInput.checked = false;
    }

    async saveMemory() {
        const title = document.getElementById('memoryTitle')?.value.trim();
        const content = document.getElementById('memoryContent')?.value.trim();
        const important = document.getElementById('memoryImportant')?.checked || false;

        if (!title || !content) {
            window.showToast?.('‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω–∏ –≤—Å—ñ –ø–æ–ª—è!', 'warning');
            return;
        }

        const category = this.detectCategory(title, content);
        const tags = this.extractTags(content);

        const memory = {
            id: Date.now(),
            title,
            content,
            category,
            important,
            tags,
            timestamp: Date.now(),
            created: new Date().toISOString(),
            auto: false
        };

        try {
            // –î–æ–¥–∞—Ç–∏ –≤ appState
            window.appState?.addMemory?.(memory);
            
            // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ IndexedDB
            await window.storageManager?.saveMemory?.(memory);
            
            // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ localStorage —è–∫ backup
            await this.saveToLocalStorage();

            this.updateMemoryStats();
            this.displayMemories();
            this.closeModal('memoryModal');
            window.showToast?.('‚úÖ –°–ø–æ–≥–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
            
            console.log('üíæ –°–ø–æ–≥–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', memory.title);
        } catch (e) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', e);
            window.showToast?.('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 'error');
        }
    }

    async editMemory(id) {
        const memories = window.appState?.getMemories?.() || [];
        const memory = memories.find(m => m.id === id);
        if (!memory) return;

        const modal = document.getElementById('memoryModal');
        if (modal) modal.classList.add('active');

        document.getElementById('memoryTitle').value = memory.title;
        document.getElementById('memoryContent').value = memory.content;
        document.getElementById('memoryImportant').checked = memory.important;

        // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π —Å–ø–æ–≥–∞–¥
        const arr = window.appState?.agent?.memory || [];
        const i = arr.findIndex(m => m.id === id);
        if (i !== -1) arr.splice(i, 1);
        await window.storageManager?.delete?.(window.storageManager.stores.memories, id);
    }

    async toggleImportant(id) {
        const memories = window.appState?.getMemories?.() || [];
        const memory = memories.find(m => m.id === id);
        if (!memory) return;

        memory.important = !memory.important;
        await window.storageManager?.update?.(window.storageManager.stores.memories, memory);
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ localStorage
        await this.saveToLocalStorage();

        this.updateMemoryStats();
        this.displayMemories();
    }

    // ========================================
    // –í–ò–î–ê–õ–ï–ù–ù–Ø - –í–ò–ü–†–ê–í–õ–ï–ù–û! confirm ‚Üí delete
    // ========================================

    async deleteMemory(id) {
        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞–π—Ç–∏ —Å–ø–æ–≥–∞–¥
        const memories = window.appState?.getMemories?.() || [];
        const memory = memories.find(m => m.id === id);
        
        if (!memory) {
            console.warn('‚ùå Memory not found:', id);
            return;
        }

        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ modalManager –∞–±–æ fallback –¥–æ confirm
        let confirmed = false;
        
        if (window.modalManager) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫—Ä–∞—Å–∏–≤–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            confirmed = await modalManager.confirm(
                `–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≥–∞–¥ "${memory.title}"?\n\n–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!`,
                {
                    title: '‚ö†Ô∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                    icon: 'üóëÔ∏è',
                    confirmText: '–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
                    danger: true
                }
            );
        } else {
            // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ confirm
            confirmed = confirm(`‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≥–∞–¥ "${memory.title}"?\n\n–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!`);
        }

        if (!confirmed) {
            console.log('‚ÑπÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
            return; // ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ - –ù–ï –≤–∏–¥–∞–ª—è—î–º–æ!
        }

        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –¢—ñ–ª—å–∫–∏ –ü–Ü–°–õ–Ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è - –≤–∏–¥–∞–ª—è—î–º–æ
        try {
            const arr = window.appState?.agent?.memory || [];
            const i = arr.findIndex(m => m.id === id);
            if (i !== -1) arr.splice(i, 1);

            await window.storageManager?.delete?.(window.storageManager.stores.memories, id);
            
            // –û–Ω–æ–≤–∏—Ç–∏ localStorage
            await this.saveToLocalStorage();
            
            this.updateMemoryStats();
            this.displayMemories();

            window.showToast?.('‚úÖ –°–ø–æ–≥–∞–¥ –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
            console.log('‚úÖ –°–ø–æ–≥–∞–¥ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ:', memory.title);
        } catch (e) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', e);
            window.showToast?.('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
        }
    }

    // ========================================
    // –ü–û–®–£–ö
    // ========================================

    searchMemories() {
        const query = document.getElementById('memorySearch')?.value.toLowerCase() || '';
        const items = document.querySelectorAll('.memory-list-item');
        items.forEach(item => {
            const text = item.textContent.toLowerCase();
            item.style.display = text.includes(query) ? 'flex' : 'none';
        });
    }

    // ========================================
    // –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í LOCALSTORAGE (BACKUP)
    // ========================================

    async saveToLocalStorage() {
        try {
            const memories = window.appState?.getMemories?.() || [];
            localStorage.setItem('agent_memories', JSON.stringify(memories));
            console.log('üíæ Backup –≤ localStorage:', memories.length);
        } catch (e) {
            console.error('Failed to save to localStorage:', e);
        }
    }

    // ========================================
    // –ï–ö–°–ü–û–†–¢/–Ü–ú–ü–û–†–¢
    // ========================================

    async exportMemories() {
        const memories = window.appState?.getMemories?.() || [];
        
        if (memories.length === 0) {
            window.showToast?.('‚ö†Ô∏è –ù–µ–º–∞—î —Å–ø–æ–≥–∞–¥—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É', 'warning');
            return;
        }

        const data = {
            version: '1.0',
            exportDate: new Date().toISOString(),
            count: memories.length,
            memories: memories
        };

        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `memories-backup-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        window.showToast?.('‚úÖ –°–ø–æ–≥–∞–¥–∏ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!', 'success');
    }

    async clearMemories() {
        if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü —Å–ø–æ–≥–∞–¥–∏? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!')) return;

        try {
            // –û—á–∏—Å—Ç–∏—Ç–∏ appState
            if (window.appState && window.appState.agent) {
                window.appState.agent.memory = [];
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ IndexedDB
            if (window.storageManager) {
                await window.storageManager.clear(window.storageManager.stores.memories);
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ localStorage
            localStorage.removeItem('agent_memories');

            this.updateMemoryStats();
            this.displayMemories();

            window.showToast?.('üóëÔ∏è –í—Å—ñ —Å–ø–æ–≥–∞–¥–∏ –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
        } catch (e) {
            console.error('Failed to clear memories:', e);
            window.showToast?.('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è', 'error');
        }
    }

    // ========================================
    // –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
    // ========================================

    detectCategory(title, content) {
        const text = (title + ' ' + content).toLowerCase();
        if (text.includes('–≤–∞–∂–ª–∏–≤') || text.includes('—Ç–µ—Ä–º—ñ–Ω')) return '–≤–∞–∂–ª–∏–≤–µ';
        if (text.includes('–∑–∞–≤–¥–∞–Ω') || text.includes('—Ç—Ä–µ–±–∞')) return '–∑–∞–≤–¥–∞–Ω–Ω—è';
        if (text.includes('–Ω–∞–≤—á–∏') || text.includes('–≤–∏–≤—á–∏')) return '–Ω–∞–≤—á–∞–Ω–Ω—è';
        if (text.includes('–º—ñ–π') || text.includes('–æ—Å–æ–±–∏—Å—Ç')) return '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ';
        return '–∑–∞–≥–∞–ª—å–Ω–µ';
    }

    extractTags(text) {
        const tags = (text.match(/#[\w–∞-—è—ñ—ó—î]+/gi) || []).map(t => t.substring(1).toLowerCase());
        return [...new Set(tags)];
    }

    getMemoryIcon(cat) {
        const icons = {
            '–∑–∞–≥–∞–ª—å–Ω–µ': 'üí≠',
            '–≤–∞–∂–ª–∏–≤–µ': '‚≠ê',
            '–∑–∞–≤–¥–∞–Ω–Ω—è': 'üìã',
            '–Ω–∞–≤—á–∞–Ω–Ω—è': 'üìö',
            '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ': 'üë§'
        };
        return icons[cat] || 'üí≠';
    }

    formatDate(date) {
        if (!date) return '–Ω–µ–≤—ñ–¥–æ–º–æ';
        const d = new Date(date);
        return d.toLocaleDateString('uk-UA', { day: '2-digit', month: '2-digit', year: 'numeric' });
    }

    toggleMemoryMenu(id) {
        document.querySelectorAll('.memory-actions').forEach(m => m.style.display = 'none');
        const menu = document.getElementById(`memory-menu-${id}`);
        if (menu) menu.style.display = 'flex';
    }

    closeModal(id) {
        const modal = document.getElementById(id);
        if (modal) modal.classList.remove('active');
    }

    // ========================================
    // –¢–ï–°–¢–û–í–Ü –°–ü–û–ì–ê–î–ò
    // ========================================

    addTestMemories() {
        const test = [
            { title: '–ü–µ—Ä—à–∏–π –ø—Ä–æ–µ–∫—Ç', content: 'AI –¥–æ–¥–∞—Ç–æ–∫ –∑ Gemini —ñ DeepSeek', important: true },
            { title: '–¢–µ–º–Ω–∞ —Ç–µ–º–∞', content: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ª—é–±–∏—Ç—å —Ç–µ–º–Ω—É —Ç–µ–º—É #–¥–∏–∑–∞–π–Ω', important: false },
            { title: '–ï–∫—Å–ø–æ—Ä—Ç', content: '–î–æ–¥–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é –µ–∫—Å–ø–æ—Ä—Ç—É #todo', important: true }
        ];

        test.forEach(t => {
            const memory = {
                id: Date.now() + Math.random(),
                title: t.title,
                content: t.content,
                category: this.detectCategory(t.title, t.content),
                important: t.important,
                tags: this.extractTags(t.content),
                timestamp: Date.now(),
                created: new Date().toISOString()
            };
            window.appState?.addMemory?.(memory);
        });

        // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        this.saveToLocalStorage();

        this.updateMemoryStats();
        this.displayMemories();
        window.showToast?.('‚úÖ –î–æ–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≥–∞–¥–∏!', 'success');
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

window.addEventListener('DOMContentLoaded', () => {
    window.memoryManager = new MemoryManager();

    // –ì–ª–æ–±–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏
    window.addMemory = () => memoryManager.addMemory();
    window.saveMemory = () => memoryManager.saveMemory();
    window.searchMemories = () => memoryManager.searchMemories();
    window.clearMemories = () => memoryManager.clearMemories();
    window.exportMemories = () => memoryManager.exportMemories();
    window.addTestMemories = () => memoryManager.addTestMemories();

    console.log('‚úÖ Memory module loaded (FIXED: confirm ‚Üí delete)');
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    if (window.memoryManager) {
        memoryManager.saveToLocalStorage();
    }
}, 30000);
