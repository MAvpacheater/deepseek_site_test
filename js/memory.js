// üß† Agent Memory System - –°–∏—Å—Ç–µ–º–∞ –ø–∞–º'—è—Ç—ñ –∞–≥–µ–Ω—Ç–∞

let memories = [];
let memoryCategories = ['–∑–∞–≥–∞–ª—å–Ω–µ', '–≤–∞–∂–ª–∏–≤–µ', '–∑–∞–≤–¥–∞–Ω–Ω—è', '–Ω–∞–≤—á–∞–Ω–Ω—è', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ'];

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
function loadMemories() {
    const saved = localStorage.getItem('agent_memory');
    if (saved) {
        memories = JSON.parse(saved);
    }
    updateMemoryStats();
    displayMemories();
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
function saveMemories() {
    localStorage.setItem('agent_memory', JSON.stringify(memories));
    updateMemoryStats();
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateMemoryStats() {
    const totalSpan = document.getElementById('totalMemories');
    const importantSpan = document.getElementById('importantMemories');
    const memoryCountSpan = document.getElementById('memoryCount');
    
    if (totalSpan) {
        totalSpan.textContent = memories.length;
    }
    
    if (importantSpan) {
        importantSpan.textContent = memories.filter(m => m.important).length;
    }
    
    if (memoryCountSpan) {
        memoryCountSpan.textContent = memories.length;
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–æ–≥–∞–¥–∏
function displayMemories() {
    const list = document.getElementById('memoriesList');
    if (!list) return;
    
    if (memories.length === 0) {
        list.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üß†</div>
                <h3>–ü–∞–º'—è—Ç—å –ø–æ—Ä–æ–∂–Ω—è</h3>
                <p>–ê–≥–µ–Ω—Ç –∑–∞–ø–∞–º'—è—Ç–∞—î –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</p>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
    const sorted = [...memories].sort((a, b) => 
        new Date(b.created) - new Date(a.created)
    );
    
    list.innerHTML = sorted.map(memory => `
        <div class="memory-card ${memory.important ? 'important' : ''}" data-id="${memory.id}">
            <div class="memory-header">
                <div class="memory-icon">
                    ${memory.important ? '‚≠ê' : getMemoryIcon(memory.category)}
                </div>
                <div class="memory-info">
                    <div class="memory-title">${escapeHtml(memory.title)}</div>
                    <div class="memory-meta">
                        <span class="memory-category">${memory.category}</span>
                        <span class="memory-date">${formatDate(memory.created)}</span>
                    </div>
                </div>
                <button class="memory-menu-btn" onclick="toggleMemoryMenu(${memory.id})">‚ãÆ</button>
            </div>
            
            <div class="memory-content">${escapeHtml(memory.content)}</div>
            
            ${memory.tags && memory.tags.length > 0 ? `
                <div class="memory-tags">
                    ${memory.tags.map(tag => `<span class="memory-tag">${escapeHtml(tag)}</span>`).join('')}
                </div>
            ` : ''}
            
            <div class="memory-actions" id="memory-menu-${memory.id}" style="display: none;">
                <button onclick="editMemory(${memory.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                <button onclick="toggleImportant(${memory.id})">
                    ${memory.important ? '‚òÜ –ó–Ω—è—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å' : '‚≠ê –í–∞–∂–ª–∏–≤–æ'}
                </button>
                <button onclick="deleteMemory(${memory.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
            </div>
        </div>
    `).join('');
}

// –î–æ–¥–∞—Ç–∏ —Å–ø–æ–≥–∞–¥
function addMemory() {
    const modal = document.getElementById('memoryModal');
    modal.classList.add('active');
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
    document.getElementById('memoryTitle').value = '';
    document.getElementById('memoryContent').value = '';
    document.getElementById('memoryImportant').checked = false;
}

// –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø–æ–≥–∞–¥
function saveMemory() {
    const title = document.getElementById('memoryTitle').value.trim();
    const content = document.getElementById('memoryContent').value.trim();
    const important = document.getElementById('memoryImportant').checked;
    
    if (!title || !content) {
        alert('‚ö†Ô∏è –ó–∞–ø–æ–≤–Ω–∏ –≤—Å—ñ –ø–æ–ª—è!');
        return;
    }
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    const category = detectCategory(title, content);
    
    // –í–∏—Ç—è–≥—Ç–∏ —Ç–µ–≥–∏
    const tags = extractTags(content);
    
    const memory = {
        id: Date.now(),
        title: title,
        content: content,
        category: category,
        important: important,
        tags: tags,
        created: new Date().toISOString(),
        accessed: 0
    };
    
    memories.unshift(memory);
    saveMemories();
    displayMemories();
    closeModal('memoryModal');
    
    alert('‚úÖ –°–ø–æ–≥–∞–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
function detectCategory(title, content) {
    const text = (title + ' ' + content).toLowerCase();
    
    if (text.includes('–≤–∞–∂–ª–∏–≤') || text.includes('–∫—Ä–∏—Ç–∏—á–Ω') || text.includes('—Ç–µ—Ä–º—ñ–Ω–æ–≤–æ')) {
        return '–≤–∞–∂–ª–∏–≤–µ';
    }
    if (text.includes('–∑–∞–≤–¥–∞–Ω') || text.includes('–∑—Ä–æ–±–∏') || text.includes('—Ç—Ä–µ–±–∞')) {
        return '–∑–∞–≤–¥–∞–Ω–Ω—è';
    }
    if (text.includes('–Ω–∞–≤—á–∏') || text.includes('–≤–∏–≤—á–∏') || text.includes('–∑–∞–ø–∞–º\'—è—Ç–∞')) {
        return '–Ω–∞–≤—á–∞–Ω–Ω—è';
    }
    if (text.includes('–æ—Å–æ–±–∏—Å—Ç') || text.includes('–ø—Ä–∏–≤–∞—Ç') || text.includes('–º—ñ–π')) {
        return '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ';
    }
    
    return '–∑–∞–≥–∞–ª—å–Ω–µ';
}

// –í–∏—Ç—è–≥—Ç–∏ —Ç–µ–≥–∏ –∑ —Ç–µ–∫—Å—Ç—É
function extractTags(text) {
    // –®—É–∫–∞—Ç–∏ —Å–ª–æ–≤–∞ –ø—ñ—Å–ª—è #
    const hashTags = text.match(/#[\w–∞-—è—ñ—ó—î]+/gi) || [];
    const tags = hashTags.map(tag => tag.substring(1).toLowerCase());
    
    // –î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    const keywords = ['–ø—Ä–æ–µ–∫—Ç', '—ñ–¥–µ—è', '–±–∞–≥', '—Ñ—ñ—á–∞', 'todo'];
    keywords.forEach(word => {
        if (text.toLowerCase().includes(word) && !tags.includes(word)) {
            tags.push(word);
        }
    });
    
    return [...new Set(tags)]; // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ç–µ–≥–∏
}

// –ü–æ—à—É–∫ –≤ –ø–∞–º'—è—Ç—ñ
function searchMemories() {
    const query = document.getElementById('memorySearch').value.toLowerCase();
    
    const cards = document.querySelectorAll('.memory-card');
    
    cards.forEach(card => {
        const text = card.textContent.toLowerCase();
        card.style.display = text.includes(query) ? 'block' : 'none';
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –º–µ–Ω—é —Å–ø–æ–≥–∞–¥—É
function toggleMemoryMenu(memoryId) {
    const menu = document.getElementById(`memory-menu-${memoryId}`);
    if (menu) {
        const isVisible = menu.style.display !== 'none';
        
        // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –º–µ–Ω—é
        document.querySelectorAll('.memory-actions').forEach(m => {
            m.style.display = 'none';
        });
        
        menu.style.display = isVisible ? 'none' : 'flex';
    }
}

// –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–æ–≥–∞–¥
function editMemory(memoryId) {
    const memory = memories.find(m => m.id === memoryId);
    if (!memory) return;
    
    document.getElementById('memoryTitle').value = memory.title;
    document.getElementById('memoryContent').value = memory.content;
    document.getElementById('memoryImportant').checked = memory.important;
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π —Å–ø–æ–≥–∞–¥ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    memories = memories.filter(m => m.id !== memoryId);
    
    const modal = document.getElementById('memoryModal');
    modal.classList.add('active');
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å
function toggleImportant(memoryId) {
    const memory = memories.find(m => m.id === memoryId);
    if (memory) {
        memory.important = !memory.important;
        saveMemories();
        displayMemories();
    }
}

// –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≥–∞–¥
function deleteMemory(memoryId) {
    if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Å–ø–æ–≥–∞–¥?')) return;
    
    memories = memories.filter(m => m.id !== memoryId);
    saveMemories();
    displayMemories();
}

// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—é –ø–∞–º'—è—Ç—å
function clearMemories() {
    if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ø–æ–≥–∞–¥–∏? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!')) return;
    
    memories = [];
    localStorage.removeItem('agent_memory');
    updateMemoryStats();
    displayMemories();
    
    alert('üóëÔ∏è –ü–∞–º\'—è—Ç—å –æ—á–∏—â–µ–Ω–æ!');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
function autoRemember(type, data) {
    const autoMemoryEnabled = localStorage.getItem('agentMemory') !== 'false';
    if (!autoMemoryEnabled) return;
    
    let title, content, important = false;
    
    switch (type) {
        case 'project_saved':
            title = `–ü—Ä–æ–µ–∫—Ç: ${data.title}`;
            content = `–ó–±–µ—Ä–µ–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç "${data.title}". ${data.mode === 'deepseek' ? '–ö–æ–¥' : '–†–æ–∑–º–æ–≤–∞'} –∑ ${data.messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.`;
            break;
            
        case 'plan_completed':
            title = `–í–∏–∫–æ–Ω–∞–Ω–æ: ${data.title}`;
            content = `–ü–ª–∞–Ω "${data.title}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${formatDate(new Date())}`;
            important = true;
            break;
            
        case 'code_generated':
            title = '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∫–æ–¥';
            content = `–°—Ç–≤–æ—Ä–µ–Ω–æ ${data.filesCount} —Ñ–∞–π–ª—ñ–≤: ${data.files.join(', ')}`;
            break;
            
        case 'user_preference':
            title = '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞';
            content = data.preference;
            important = true;
            break;
    }
    
    if (title && content) {
        const memory = {
            id: Date.now(),
            title: title,
            content: content,
            category: type.includes('plan') ? '–∑–∞–≤–¥–∞–Ω–Ω—è' : '–∑–∞–≥–∞–ª—å–Ω–µ',
            important: important,
            tags: [type],
            created: new Date().toISOString(),
            accessed: 0,
            auto: true
        };
        
        memories.unshift(memory);
        
        // –û–±–º–µ–∂–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≥–∞–¥–∏ (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ 50)
        const autoMemories = memories.filter(m => m.auto);
        if (autoMemories.length > 50) {
            const toRemove = autoMemories[autoMemories.length - 1];
            memories = memories.filter(m => m.id !== toRemove.id);
        }
        
        saveMemories();
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –ø–∞–º'—è—Ç—ñ
function exportMemories() {
    if (memories.length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î —Å–ø–æ–≥–∞–¥—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!');
        return;
    }
    
    let markdown = '# üß† –ü–∞–º\'—è—Ç—å AI –ê–≥–µ–Ω—Ç–∞\n\n';
    markdown += `–ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('uk-UA')}\n\n`;
    markdown += `–í—Å—å–æ–≥–æ —Å–ø–æ–≥–∞–¥—ñ–≤: ${memories.length}\n\n`;
    markdown += '---\n\n';
    
    memories.forEach(memory => {
        markdown += `## ${memory.important ? '‚≠ê ' : ''}${memory.title}\n\n`;
        markdown += `**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** ${memory.category}  \n`;
        markdown += `**–î–∞—Ç–∞:** ${formatDate(memory.created)}  \n`;
        
        if (memory.tags && memory.tags.length > 0) {
            markdown += `**–¢–µ–≥–∏:** ${memory.tags.join(', ')}  \n`;
        }
        
        markdown += `\n${memory.content}\n\n`;
        markdown += '---\n\n';
    });
    
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'agent-memory.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('‚úÖ –ü–∞–º\'—è—Ç—å –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é
function getMemoryIcon(category) {
    const icons = {
        '–∑–∞–≥–∞–ª—å–Ω–µ': 'üí≠',
        '–≤–∞–∂–ª–∏–≤–µ': '‚≠ê',
        '–∑–∞–≤–¥–∞–Ω–Ω—è': 'üìã',
        '–Ω–∞–≤—á–∞–Ω–Ω—è': 'üìö',
        '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ': 'üë§'
    };
    return icons[category] || 'üí≠';
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –¥–∞—Ç—É
function formatDate(date) {
    const d = new Date(date);
    const now = new Date();
    const diff = now - d;
    
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);
    
    if (minutes < 1) return '—â–æ–π–Ω–æ';
    if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
    if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
    if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;
    
    return d.toLocaleDateString('uk-UA');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.addEventListener('DOMContentLoaded', () => {
    loadMemories();
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–ø–∞–º'—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è
window.autoRemember = autoRemember;
