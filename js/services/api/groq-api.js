// üíª Groq API Service - –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Groq API (DeepSeek/Llama)

class GroqAPIService {
    constructor() {
        this.endpoint = 'https://api.groq.com/openai/v1/chat/completions';
        this.model = 'llama-3.3-70b-versatile';
        this.isProcessing = false;
        this.abortController = null;
        this.maxRetries = 3;
        this.retryDelay = 1000;
        this.maxContextLength = 24000; // chars (~6000 tokens)
        
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ rate limiting
        if (window.errorHandler) {
            errorHandler.setRateLimit('groq_api', {
                minInterval: 500,
                maxRequests: 30,
                window: 60000
            });
        }

        console.log('‚úÖ Groq API Service initialized');
    }

    // ========================================
    // –û–°–ù–û–í–ù–ò–ô –ó–ê–ü–ò–¢
    // ========================================

    /**
     * –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ Groq API
     * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     * @param {Array} history - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
     * @returns {Promise<string>} - –í—ñ–¥–ø–æ–≤—ñ–¥—å AI
     */
    async sendMessage(message, history = [], options = {}) {
        if (this.isProcessing && !options.force) {
            throw new Error('Already processing request');
        }

        const apiKey = this.getApiKey();
        if (!apiKey) {
            throw new Error('API key not found');
        }

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è
        if (window.sanitizer) {
            const validation = sanitizer.validateInput(message, {
                maxLength: 10000,
                required: true,
                allowHTML: false
            });

            if (!validation.valid) {
                throw new Error(validation.errors.join(', '));
            }
        }

        this.isProcessing = true;
        this.abortController = new AbortController();

        try {
            const response = await this.makeRequest(apiKey, message, history, options);
            return response;

        } catch (error) {
            // Retry logic
            if (this.shouldRetry(error) && (options.retryCount || 0) < this.maxRetries) {
                console.warn(`‚ö†Ô∏è Retrying Groq request (${(options.retryCount || 0) + 1}/${this.maxRetries})`);
                await this.delay(this.retryDelay * ((options.retryCount || 0) + 1));
                
                return this.sendMessage(message, history, {
                    ...options,
                    retryCount: (options.retryCount || 0) + 1
                });
            }

            throw error;

        } finally {
            this.isProcessing = false;
            this.abortController = null;
        }
    }

    /**
     * –ó—Ä–æ–±–∏—Ç–∏ HTTP –∑–∞–ø–∏—Ç
     */
    async makeRequest(apiKey, message, history, options) {
        const systemPrompt = options.systemPrompt || 
            (window.appState ? appState.getSetting('deepseekSystemPrompt') : null) ||
            '–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç. –ü–∏—à–∏ —á–∏—Å—Ç–∏–π –∫–æ–¥ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏.';

        // –ü–æ–±—É–¥—É–≤–∞—Ç–∏ messages
        let messages = [
            { role: 'system', content: systemPrompt },
            ...history,
            { role: 'user', content: message }
        ];

        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        messages = this.trimContext(messages);

        const requestBody = {
            model: options.model || this.model,
            messages: messages,
            temperature: options.temperature || 0.5,
            max_tokens: options.maxTokens || 8000,
            top_p: options.topP || 0.95,
            stream: false
        };

        let response;
        
        if (window.errorHandler) {
            response = await errorHandler.fetchWithRetry(this.endpoint, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody),
                signal: this.abortController.signal,
                timeout: options.timeout || 45000
            });
        } else {
            response = await fetch(this.endpoint, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody),
                signal: this.abortController.signal
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw this.createAPIError(response, errorData);
            }
        }

        const data = await response.json();

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        this.validateResponse(data);

        const aiMessage = data.choices[0].message.content;

        // –õ–æ–≥—É–≤–∞—Ç–∏ –≤ EventBus
        if (window.eventBus) {
            eventBus.emit(EventBusEvents.MESSAGE_RECEIVE, {
                service: 'groq',
                message: aiMessage,
                tokens: this.estimateTokens(message + aiMessage)
            });
        }

        return aiMessage;
    }

    // ========================================
    // CONTEXT MANAGEMENT
    // ========================================

    /**
     * –û–±—Ä—ñ–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π
     */
    trimContext(messages) {
        const totalLength = JSON.stringify(messages).length;

        if (totalLength <= this.maxContextLength) {
            return messages;
        }

        console.warn(`‚ö†Ô∏è Context too large: ${totalLength} chars, trimming...`);

        // –ó–±–µ—Ä–µ–≥—Ç–∏ system prompt —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const systemMessage = messages[0];
        const userMessage = messages[messages.length - 1];
        let historyMessages = messages.slice(1, -1);

        // –í–∏–¥–∞–ª—è—Ç–∏ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        while (JSON.stringify([systemMessage, ...historyMessages, userMessage]).length > this.maxContextLength) {
            if (historyMessages.length === 0) break;
            historyMessages.shift();
        }

        return [systemMessage, ...historyMessages, userMessage];
    }

    // ========================================
    // –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–ê –ü–û–ú–ò–õ–ö–ò
    // ========================================

    validateResponse(data) {
        if (!data.choices || !data.choices[0]) {
            throw new Error('Invalid API response: No choices');
        }

        if (!data.choices[0].message || !data.choices[0].message.content) {
            throw new Error('Invalid API response: No content');
        }

        const content = data.choices[0].message.content;
        if (!content || content.trim() === '') {
            throw new Error('Empty response from API');
        }
    }

    createAPIError(response, errorData) {
        const error = new Error(errorData.error?.message || `API Error: ${response.status}`);
        error.status = response.status;
        error.type = 'api_error';
        error.data = errorData;

        if (response.status === 401 || response.status === 403) {
            error.type = 'auth_error';
            error.message = 'Invalid API key';
        } else if (response.status === 429) {
            error.type = 'rate_limit';
            error.message = 'Rate limit exceeded';
        } else if (response.status >= 500) {
            error.type = 'server_error';
        }

        return error;
    }

    shouldRetry(error) {
        if (error.name === 'AbortError') return false;
        if (error.type === 'auth_error') return false;
        
        return error.type === 'server_error' || 
               error.type === 'network_error' ||
               error.type === 'timeout_error';
    }

    // ========================================
    // CODE GENERATION
    // ========================================

    /**
     * –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É
     */
    async generateCode(prompt, context = null, options = {}) {
        let fullPrompt = prompt;

        // –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç—É
        if (context) {
            fullPrompt = this.buildCodeContext(prompt, context);
        }

        return this.sendMessage(fullPrompt, [], {
            ...options,
            temperature: 0.5,
            maxTokens: 8000
        });
    }

    /**
     * –ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–¥—É
     */
    buildCodeContext(prompt, context) {
        let fullPrompt = prompt;

        if (context.files && Object.keys(context.files).length > 0) {
            fullPrompt += '\n\n--- –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–£ ---\n';
            fullPrompt += `–§–∞–π–ª—ñ–≤: ${Object.keys(context.files).length}\n\n`;
            
            fullPrompt += '–°—Ç—Ä—É–∫—Ç—É—Ä–∞:\n';
            Object.keys(context.files).slice(0, 20).forEach(filename => {
                const file = context.files[filename];
                const size = file.code ? `${(file.code.length / 1024).toFixed(1)}KB` : '0KB';
                fullPrompt += `‚Ä¢ ${filename} (${file.language || 'unknown'}, ${size})\n`;
            });

            // –î–æ–¥–∞—Ç–∏ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ —Ñ–∞–π–ª–∏
            if (context.relevantFiles && context.relevantFiles.length > 0) {
                fullPrompt += '\n--- –†–ï–õ–ï–í–ê–ù–¢–ù–Ü –§–ê–ô–õ–ò ---\n';
                
                context.relevantFiles.forEach(filename => {
                    const file = context.files[filename];
                    if (file && file.code) {
                        fullPrompt += `\n// FILE: ${filename}\n`;
                        fullPrompt += file.code.substring(0, 2000);
                        if (file.code.length > 2000) {
                            fullPrompt += '\n... (–æ–±—Ä—ñ–∑–∞–Ω–æ)';
                        }
                        fullPrompt += '\n';
                    }
                });
            }
        }

        return fullPrompt;
    }

    // ========================================
    // AI SUBTASKS GENERATION
    // ========================================

    /**
     * –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–ª–∞–Ω—É
     */
    async generateSubtasks(planTitle, planDescription) {
        const prompt = `–†–æ–∑–±–∏–π —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è (3-7 —à—Ç—É–∫):

–ó–∞–≤–¥–∞–Ω–Ω—è: ${planTitle}
–û–ø–∏—Å: ${planDescription}

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó:`;

        const response = await this.sendMessage(prompt, [], {
            temperature: 0.7,
            maxTokens: 500,
            systemPrompt: '–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—é–π —á—ñ—Ç–∫—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è.'
        });

        // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const subtasks = response
            .split('\n')
            .filter(line => line.trim())
            .map(line => line.replace(/^[-‚Ä¢*\d.]+\s*/, '').trim())
            .filter(line => line.length > 0)
            .map(title => ({
                id: Date.now() + Math.random(),
                title: title,
                completed: false
            }));

        return subtasks;
    }

    // ========================================
    // UTILITY –ú–ï–¢–û–î–ò
    // ========================================

    getApiKey() {
        if (typeof getGroqApiKey === 'function') {
            return getGroqApiKey();
        }

        if (window.appState) {
            return appState.getApiKey('groq');
        }

        return localStorage.getItem('groq_api_key');
    }

    estimateTokens(text) {
        if (!text || typeof text !== 'string') return 0;
        return Math.ceil(text.length / 4);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // ========================================
    // –°–ö–ê–°–£–í–ê–ù–ù–Ø
    // ========================================

    cancel() {
        if (this.abortController) {
            this.abortController.abort();
            this.isProcessing = false;
            console.log('üõë Groq request cancelled');
        }
    }

    // ========================================
    // –¢–ï–°–¢–£–í–ê–ù–ù–Ø
    // ========================================

    /**
     * –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API –∫–ª—é—á–∞
     */
    async testConnection(apiKey = null) {
        const key = apiKey || this.getApiKey();
        
        if (!key) {
            return {
                success: false,
                error: 'API key not found'
            };
        }

        try {
            const response = await this.sendMessage(
                '–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ—é.',
                [],
                {
                    maxTokens: 50,
                    timeout: 10000
                }
            );

            return {
                success: true,
                message: 'Connection successful',
                response: response
            };

        } catch (error) {
            return {
                success: false,
                error: error.message,
                type: error.type
            };
        }
    }

    // ========================================
    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ========================================

    getStats() {
        return {
            isProcessing: this.isProcessing,
            model: this.model,
            endpoint: this.endpoint,
            maxContextLength: this.maxContextLength
        };
    }

    // ========================================
    // –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    // ========================================

    setModel(model) {
        this.model = model;
        console.log(`‚úÖ Groq model changed to: ${model}`);
    }

    setSystemPrompt(prompt) {
        if (window.appState) {
            appState.setSetting('deepseekSystemPrompt', prompt);
        } else {
            localStorage.setItem('deepseek_system_prompt', prompt);
        }
    }

    /**
     * –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ
     */
    static get Models() {
        return {
            LLAMA_70B: 'llama-3.3-70b-versatile',
            LLAMA_8B: 'llama-3.1-8b-instant',
            MIXTRAL: 'mixtral-8x7b-32768',
            GEMMA_7B: 'gemma-7b-it'
        };
    }
}

// ========================================
// –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –ï–ö–ó–ï–ú–ü–õ–Ø–†
// ========================================

const groqAPI = new GroqAPIService();

// –ï–∫—Å–ø–æ—Ä—Ç
window.groqAPI = groqAPI;
window.GroqAPIService = GroqAPIService;

console.log('‚úÖ Groq API Service loaded');
