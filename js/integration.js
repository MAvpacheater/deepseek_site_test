// Integrations & Extensions

// üîå –ü–ª–∞–≥—ñ–Ω–∏ –¥–ª—è VS Code
function generateVSCodeExtension() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π —è–∫–∏–π—Å—å –∫–æ–¥!');
        return;
    }
    
    const extensionCode = `{
  "name": "ai-hub-project",
  "displayName": "AI Hub Generated Project",
  "description": "Project generated by AI Assistant Hub",
  "version": "1.0.0",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": ["Other"],
  "activationEvents": ["onStartupFinished"],
  "main": "./extension.js",
  "contributes": {
    "commands": [{
      "command": "extension.preview",
      "title": "Preview Project"
    }]
  }
}`;
    
    const blob = new Blob([extensionCode], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'package.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('‚úÖ VS Code –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
}

// üåê –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ (Chrome Extension)
function generateBrowserExtension() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π HTML –∫–æ–¥!');
        return;
    }
    
    const manifest = {
        "manifest_version": 3,
        "name": "AI Hub Extension",
        "version": "1.0",
        "description": "Generated by AI Assistant Hub",
        "action": {
            "default_popup": "index.html"
        },
        "permissions": ["storage"]
    };
    
    const manifestBlob = new Blob([JSON.stringify(manifest, null, 2)], { type: 'application/json' });
    const manifestUrl = URL.createObjectURL(manifestBlob);
    const a = document.createElement('a');
    a.href = manifestUrl;
    a.download = 'manifest.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(manifestUrl);
    
    alert('‚úÖ Chrome Extension manifest —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂ –≤—Å—ñ —Ñ–∞–π–ª–∏ —Ç–∞ –∑–∞–ø–∞–∫—É–π —É ZIP –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.');
}

// üì± PWA (Progressive Web App)
async function generatePWA() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π HTML/JS/CSS –∫–æ–¥!');
        return;
    }
    
    // Service Worker
    const serviceWorker = `
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open('ai-hub-v1').then((cache) => {
      return cache.addAll([
        '/',
        '/index.html',
        '/styles.css',
        '/script.js'
      ]);
    })
  );
});

self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});
`;
    
    // Manifest.json –¥–ª—è PWA
    const manifest = {
        "name": "AI Hub PWA",
        "short_name": "AI Hub",
        "description": "Progressive Web App generated by AI Assistant Hub",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#0a0a0f",
        "theme_color": "#667eea",
        "icons": [
            {
                "src": "/icon-192.png",
                "sizes": "192x192",
                "type": "image/png"
            },
            {
                "src": "/icon-512.png",
                "sizes": "512x512",
                "type": "image/png"
            }
        ]
    };
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ ZIP –∑ PWA —Ñ–∞–π–ª–∞–º–∏
    const zip = new JSZip();
    zip.file('service-worker.js', serviceWorker);
    zip.file('manifest.json', JSON.stringify(manifest, null, 2));
    
    // –î–æ–¥–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏
    Object.keys(codeFiles).forEach(filename => {
        zip.file(filename, codeFiles[filename].code);
    });
    
    const content = await zip.generateAsync({ type: 'blob' });
    const url = URL.createObjectURL(content);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'pwa-project.zip';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('‚úÖ PWA –ø—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂ ZIP —Ç–∞ —Ä–æ–∑–ø–∞–∫—É–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è.');
}

// üêô GitHub Integration
function exportToGitHub() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–¥—É –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!');
        return;
    }
    
    const repoName = prompt('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:', 'ai-hub-project');
    if (!repoName) return;
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ README.md
    let readme = `# ${repoName}\n\n`;
    readme += `ü§ñ –ü—Ä–æ–µ–∫—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ AI Assistant Hub\n\n`;
    readme += `## üìÅ –§–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É:\n\n`;
    
    Object.keys(codeFiles).forEach(filename => {
        readme += `- \`${filename}\` (${codeFiles[filename].language})\n`;
    });
    
    readme += `\n## üöÄ –Ø–∫ –∑–∞–ø—É—Å—Ç–∏—Ç–∏:\n\n`;
    readme += `1. –ö–ª–æ–Ω—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π\n`;
    readme += `2. –í—ñ–¥–∫—Ä–∏–π \`index.html\` —É –±—Ä–∞—É–∑–µ—Ä—ñ\n`;
    readme += `3. Enjoy! üéâ\n`;
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ README
    const blob = new Blob([readme], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'README.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert(`‚úÖ README.md —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä:\n1. –°—Ç–≤–æ—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π "${repoName}" –Ω–∞ GitHub\n2. –ó–∞–≤–∞–Ω—Ç–∞–∂ —É—Å—ñ —Ñ–∞–π–ª–∏\n3. git add . && git commit -m "Initial commit" && git push`);
}

// –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –¥–æ UI
function initializeIntegrations() {
    const codeActions = document.querySelector('.code-actions');
    if (!codeActions) return;
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –∫–Ω–æ–ø–∫–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π —è–∫—â–æ —î
    const existingIntegrations = document.getElementById('integration-buttons');
    if (existingIntegrations) {
        existingIntegrations.remove();
    }
    
    const integrationsDiv = document.createElement('div');
    integrationsDiv.id = 'integration-buttons';
    integrationsDiv.style.display = 'flex';
    integrationsDiv.style.gap = '8px';
    integrationsDiv.style.marginLeft = '10px';
    
    integrationsDiv.innerHTML = `
        <button onclick="generatePWA()" title="–°—Ç–≤–æ—Ä–∏—Ç–∏ PWA">üì± PWA</button>
        <button onclick="generateBrowserExtension()" title="–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞">üåê Extension</button>
        <button onclick="exportToGitHub()" title="–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ GitHub">üêô GitHub</button>
    `;
    
    codeActions.appendChild(integrationsDiv);
}
