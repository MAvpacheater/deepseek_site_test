// ‚öôÔ∏è Settings Module - Refactored to use AppState & StorageManager

class SettingsManager {
    constructor() {
        this.init();
    }

    init() {
        console.log('‚úÖ Settings Manager initialized');
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨
    // ========================================

    async loadSettings() {
        try {
            // API Keys (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ)
            const geminiInput = document.getElementById('geminiApiKey');
            const groqInput = document.getElementById('groqApiKey');
            
            if (geminiInput && typeof getGeminiApiKey === 'function') {
                geminiInput.value = getGeminiApiKey();
            }
            
            if (groqInput && typeof getGroqApiKey === 'function') {
                groqInput.value = getGroqApiKey();
            }

            // System Prompts
            const geminiPromptInput = document.getElementById('geminiSystemPrompt');
            const deepseekPromptInput = document.getElementById('deepseekSystemPrompt');

            if (geminiPromptInput && window.appState) {
                geminiPromptInput.value = appState.getSetting('geminiSystemPrompt');
            }

            if (deepseekPromptInput && window.appState) {
                deepseekPromptInput.value = appState.getSetting('deepseekSystemPrompt');
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            this.updateStats();

        } catch (error) {
            console.error('Failed to load settings:', error);
            if (window.errorHandler) {
                errorHandler.logError({
                    type: 'settings_error',
                    message: 'Failed to load settings',
                    error: error.message,
                    severity: 'medium'
                });
            }
        }
    }

    // ========================================
    // –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨
    // ========================================

    async saveSettings() {
        try {
            const geminiKey = document.getElementById('geminiApiKey')?.value.trim();
            const groqKey = document.getElementById('groqApiKey')?.value.trim();
            const geminiPrompt = document.getElementById('geminiSystemPrompt')?.value.trim();
            const deepseekPrompt = document.getElementById('deepseekSystemPrompt')?.value.trim();

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è API –∫–ª—é—á—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ security.js)
            if (geminiKey && typeof saveSettingsSecure === 'function') {
                // –§—É–Ω–∫—Ü—ñ—è –∑ security.js –∑—Ä–æ–±–∏—Ç—å –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ç–∞ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
                const validation = validateApiKey(geminiKey, 'gemini');
                if (!validation.valid) {
                    if (window.showToast) {
                        showToast(`‚ö†Ô∏è Gemini: ${validation.message}`, 'error');
                    }
                    return;
                }
            }

            if (groqKey && typeof validateApiKey === 'function') {
                const validation = validateApiKey(groqKey, 'groq');
                if (!validation.valid) {
                    if (window.showToast) {
                        showToast(`‚ö†Ô∏è Groq: ${validation.message}`, 'error');
                    }
                    return;
                }
            }

            // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–º–ø—Ç–∏ —á–µ—Ä–µ–∑ appState
            if (geminiPrompt && window.appState) {
                appState.setSetting('geminiSystemPrompt', geminiPrompt);
            }

            if (deepseekPrompt && window.appState) {
                appState.setSetting('deepseekSystemPrompt', deepseekPrompt);
            }

            // –í–∏–∫–ª–∏–∫–∞—Ç–∏ –±–µ–∑–ø–µ—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤
            if (typeof saveSettingsSecure === 'function') {
                saveSettingsSecure();
            }

            if (window.showToast) {
                showToast('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to save settings:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å', 'error');
            }
        }
    }

    // ========================================
    // –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ========================================

    updateStats() {
        if (!window.appState) return;

        const stats = appState.getStats();

        const elements = {
            statGemini: stats.geminiRequests,
            statDeepseek: stats.deepseekRequests,
            statImages: stats.imagesGenerated,
            statSaved: stats.savedProjects,
            statTokens: stats.totalTokens,
            statDays: this.calculateDaysUsed(stats.firstUse)
        };

        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = typeof value === 'number' ? 
                    value.toLocaleString() : value;
            }
        });
    }

    calculateDaysUsed(firstUse) {
        if (!firstUse) return 1;
        const days = Math.floor((Date.now() - firstUse) / (1000 * 60 * 60 * 24));
        return days + 1;
    }

    async resetStats() {
        if (!confirm('‚ö†Ô∏è –°–∫–∏–Ω—É—Ç–∏ –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) return;

        if (window.appState) {
            appState.resetStats();
        }

        this.updateStats();

        if (window.showToast) {
            showToast('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∏–Ω—É—Ç–æ!', 'success');
        }
    }

    // ========================================
    // –û–ß–ò–©–ï–ù–ù–Ø –î–ê–ù–ò–•
    // ========================================

    async clearAllData() {
        if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ (—ñ—Å—Ç–æ—Ä—ñ—é, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, —Ñ–∞–π–ª–∏)? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!')) {
            return;
        }

        try {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ appState –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è
            if (window.appState) {
                await appState.clearAll();
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–µ–∑ storageManager
            if (window.storageManager) {
                await storageManager.clearAllData();
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ localStorage
            localStorage.clear();

            // –û—á–∏—Å—Ç–∏—Ç–∏ UI
            this.clearAllUI();

            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            await this.loadSettings();

            if (window.showToast) {
                showToast('üóëÔ∏è –í—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Clear all data failed:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö', 'error');
            }
        }
    }

    clearAllUI() {
        // –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç–∏
        const geminiMessages = document.getElementById('geminiMessages');
        const deepseekMessages = document.getElementById('deepseekMessages');
        const imageGallery = document.getElementById('imageGallery');

        if (geminiMessages) geminiMessages.innerHTML = '';
        if (deepseekMessages) deepseekMessages.innerHTML = '';
        
        if (imageGallery) {
            imageGallery.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üé®</div>
                    <h3>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å</h3>
                    <p>–û–ø–∏—à–∏ —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏</p>
                </div>
            `;
        }

        // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª–∏ –∫–æ–¥—É
        const fileTabs = document.getElementById('fileTabs');
        const codeContent = document.getElementById('codeContent');

        if (fileTabs) fileTabs.innerHTML = '';
        if (codeContent) {
            codeContent.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìù</div>
                    <h3>–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤</h3>
                    <p>–û–ø–∏—à–∏ —â–æ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏</p>
                </div>
            `;
        }

        // –û–Ω–æ–≤–∏—Ç–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É
        if (typeof displayLibrary === 'function') {
            displayLibrary();
        }
    }

    // ========================================
    // –ï–ö–°–ü–û–†–¢ / –Ü–ú–ü–û–†–¢
    // ========================================

    async exportAllData() {
        if (window.storageManager) {
            await storageManager.exportAllData();
        } else if (window.appState) {
            await appState.exportState();
        } else {
            if (window.showToast) {
                showToast('‚ö†Ô∏è –ï–∫—Å–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'warning');
            }
        }
    }

    async importData() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        
        input.onchange = async (e) => {
            const file = e.target.files[0];
            if (!file) return;

            try {
                const text = await file.text();
                const data = JSON.parse(text);

                if (window.storageManager) {
                    await storageManager.importData(data);
                } else {
                    if (window.showToast) {
                        showToast('‚ö†Ô∏è –Ü–º–ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'warning');
                    }
                }

                // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ UI
                location.reload();

            } catch (error) {
                console.error('Import failed:', error);
                if (window.showToast) {
                    showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É —Ñ–∞–π–ª—É', 'error');
                }
            }
        };

        input.click();
    }

    async showStorageInfo() {
        if (!window.storageManager) {
            alert('‚ö†Ô∏è Storage Manager –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
            return;
        }

        try {
            const stats = await storageManager.getStorageStats();

            let info = 'üíæ –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–•–û–í–ò–©–ï\n\n';
            info += `üìä –ó–±–µ—Ä–µ–∂–µ–Ω–æ:\n`;
            info += `  ‚Ä¢ –†–æ–∑–º–æ–≤–∏: ${stats.conversations}\n`;
            info += `  ‚Ä¢ –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∏: ${stats.codeFiles}\n`;
            info += `  ‚Ä¢ –°–ø–æ–≥–∞–¥–∏: ${stats.memories}\n`;
            info += `  ‚Ä¢ –ü–ª–∞–Ω–∏: ${stats.plans}\n`;
            info += `  ‚Ä¢ Cache: ${stats.cache}\n\n`;

            if (stats.usage !== undefined) {
                const usageMB = (stats.usage / (1024 * 1024)).toFixed(2);
                const quotaMB = (stats.quota / (1024 * 1024)).toFixed(2);
                info += `üíø –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n`;
                info += `  ‚Ä¢ –ó–∞–π–Ω—è—Ç–æ: ${usageMB} MB\n`;
                info += `  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: ${quotaMB} MB\n`;
                info += `  ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${stats.usagePercent}%\n`;
            }

            alert(info);

        } catch (error) {
            console.error('Failed to get storage info:', error);
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó');
        }
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

let settingsManager = null;

document.addEventListener('DOMContentLoaded', async () => {
    settingsManager = new SettingsManager();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    await settingsManager.loadSettings();

    // –û–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        settingsManager.updateStats();
    }, 10000);

    // –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.saveSettings = () => settingsManager.saveSettings();
    window.loadSettings = () => settingsManager.loadSettings();
    window.clearAllData = () => settingsManager.clearAllData();
    window.resetStats = () => settingsManager.resetStats();
    window.exportAllData = () => settingsManager.exportAllData();
    window.importData = () => settingsManager.importData();
    window.showStorageInfo = () => settingsManager.showStorageInfo();

    console.log('‚úÖ Settings module loaded');
});

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É
window.SettingsManager = SettingsManager;
window.settingsManager = settingsManager;
