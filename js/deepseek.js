// üíª Enhanced DeepSeek Coder - Claude-like Navigation

// –°—Ç–∞–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
let uiState = {
    codeVisible: true,
    currentFile: null,
    currentVersion: 0,
    filesDropdownOpen: false
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ UI
function initializeEnhancedCodeUI() {
    const codeSection = document.querySelector('#deepseekMode .code-section');
    if (!codeSection) return;
    
    // –î–æ–¥–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–≥–æ—Ä—Ç–∞–Ω–Ω—è/—Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
    if (!document.getElementById('code-toggle-btn')) {
        const toggleBtn = document.createElement('button');
        toggleBtn.id = 'code-toggle-btn';
        toggleBtn.className = 'code-toggle-btn';
        toggleBtn.innerHTML = '‚óÄ';
        toggleBtn.title = '–ó–≥–æ—Ä–Ω—É—Ç–∏/–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –∫–æ–¥';
        toggleBtn.onclick = toggleCodePanel;
        codeSection.appendChild(toggleBtn);
    }
    
    // –û–Ω–æ–≤–∏—Ç–∏ header
    updateCodeHeader();
}

// –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –ø–∞–Ω–µ–ª—å –∫–æ–¥—É
function toggleCodePanel() {
    const codeSection = document.querySelector('.code-section');
    const toggleBtn = document.getElementById('code-toggle-btn');
    const chatSection = document.querySelector('#deepseekMode .chat-section');
    
    if (!codeSection || !toggleBtn) return;
    
    uiState.codeVisible = !uiState.codeVisible;
    
    if (uiState.codeVisible) {
        codeSection.classList.remove('hidden');
        chatSection.classList.remove('full-width');
        toggleBtn.innerHTML = '‚óÄ';
        toggleBtn.title = '–ó–≥–æ—Ä–Ω—É—Ç–∏ –∫–æ–¥';
    } else {
        codeSection.classList.add('hidden');
        chatSection.classList.add('full-width');
        toggleBtn.innerHTML = '‚ñ∂';
        toggleBtn.title = '–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ –∫–æ–¥';
    }
}

// –û–Ω–æ–≤–∏—Ç–∏ header –∫–æ–¥—É
function updateCodeHeader() {
    const codeHeader = document.querySelector('.code-header');
    if (!codeHeader) return;
    
    const filesCount = Object.keys(window.codeFiles || {}).length;
    
    codeHeader.innerHTML = `
        <div class="code-header-left">
            <div class="code-header-title">
                üìÅ –§–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É
                <span class="file-count">${filesCount}</span>
            </div>
        </div>
        <div class="code-actions">
            <button onclick="showSmartCommands()" title="–†–æ–∑—É–º–Ω—ñ –∫–æ–º–∞–Ω–¥–∏">üéØ –ö–æ–º–∞–Ω–¥–∏</button>
            <button onclick="importGitHubRepo()" title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ GitHub">üêô GitHub</button>
            <button onclick="uploadLocalFile()" title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏">üìÅ –§–∞–π–ª</button>
            <button onclick="downloadAllAsZip()" title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ZIP">üì¶ ZIP</button>
        </div>
    `;
}

// –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ñ–∞–π–ª–∏ –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é (—è–∫ —É Claude)
function displayCodeFilesEnhanced() {
    const contentDiv = document.getElementById('codeContent');
    if (!contentDiv) return;
    
    const files = window.codeFiles || {};
    const fileNames = Object.keys(files);
    
    if (fileNames.length === 0) {
        contentDiv.innerHTML = `
            <div class="code-empty-state">
                <div class="code-empty-icon">üìù</div>
                <h3>–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤</h3>
                <p>–ó–∞–≤–∞–Ω—Ç–∞–∂ –ø—Ä–æ–µ–∫—Ç –∑ GitHub –∞–±–æ —Å—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π</p>
            </div>
        `;
        updateCodeHeader();
        return;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª —è–∫—â–æ –Ω–µ–º–∞—î
    if (!uiState.currentFile || !files[uiState.currentFile]) {
        uiState.currentFile = fileNames[0];
        uiState.currentVersion = 0;
    }
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é
    const navigation = createFileNavigation(fileNames);
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    const currentFile = files[uiState.currentFile];
    const versions = window.codeHistory?.[uiState.currentFile] || [];
    
    contentDiv.innerHTML = `
        ${navigation}
        <div class="code-file active">
            ${createCodeBlock(uiState.currentFile, currentFile, versions)}
        </div>
    `;
    
    updateCodeHeader();
    
    // –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É
    if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
    }
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é —Ñ–∞–π–ª—ñ–≤
function createFileNavigation(fileNames) {
    const currentFile = uiState.currentFile;
    const versions = window.codeHistory?.[currentFile] || [];
    const totalVersions = versions.length + 1; // +1 –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
    
    return `
        <div class="code-navigation">
            <div class="files-dropdown">
                <button class="files-dropdown-btn" onclick="toggleFilesDropdown()">
                    <span>üìÑ</span>
                    <span>${getShortFileName(currentFile)}</span>
                    <span>‚ñº</span>
                </button>
                <div class="files-dropdown-menu" id="filesDropdownMenu">
                    ${fileNames.map(filename => `
                        <div class="file-dropdown-item ${filename === currentFile ? 'active' : ''}" 
                             onclick="switchToFile('${escapeHtml(filename)}')">
                            <span class="file-dropdown-icon">${getFileIcon(filename)}</span>
                            <div class="file-dropdown-info">
                                <div class="file-dropdown-name">${escapeHtml(filename)}</div>
                                <div class="file-dropdown-meta">
                                    ${window.codeFiles[filename].language} ‚Ä¢ ${formatFileSize(window.codeFiles[filename].code.length)}
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            ${totalVersions > 1 ? `
                <div class="version-selector">
                    <button class="version-btn" 
                            onclick="previousVersion()"
                            ${uiState.currentVersion === 0 ? 'disabled' : ''}>
                        ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è
                    </button>
                    <span class="version-info">
                        –í–µ—Ä—Å—ñ—è ${uiState.currentVersion + 1} –∑ ${totalVersions}
                    </span>
                    <button class="version-btn" 
                            onclick="nextVersion()"
                            ${uiState.currentVersion >= totalVersions - 1 ? 'disabled' : ''}>
                        –ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí
                    </button>
                </div>
            ` : ''}
        </div>
    `;
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–ª–æ–∫ –∫–æ–¥—É
function createCodeBlock(filename, file, versions) {
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —è–∫–∏–π –∫–æ–¥ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ (–ø–æ—Ç–æ—á–Ω–∏–π —á–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–π)
    let code, language;
    
    if (uiState.currentVersion === 0) {
        // –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è
        code = file.code;
        language = file.language;
    } else {
        // –Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è
        const versionIndex = versions.length - uiState.currentVersion;
        code = versions[versionIndex];
        language = file.language;
    }
    
    const highlightedCode = typeof Prism !== 'undefined' ? 
        Prism.highlight(code, Prism.languages[language] || Prism.languages.plaintext, language) :
        escapeHtml(code);
    
    return `
        <div class="code-block">
            <div class="code-block-header">
                <div class="code-block-info">
                    <span class="code-block-lang">${language}</span>
                    <span class="code-block-name">${escapeHtml(filename)}</span>
                    ${uiState.currentVersion > 0 ? 
                        '<span style="color: #f59e0b; font-size: 12px; margin-left: 10px;">üìú –Ü—Å—Ç–æ—Ä–∏—á–Ω–∞ –≤–µ—Ä—Å—ñ—è</span>' : 
                        file.modified ? '<span style="color: #f59e0b; font-size: 12px; margin-left: 10px;">‚óè –∑–º—ñ–Ω–µ–Ω–æ</span>' : ''
                    }
                </div>
                <div class="code-block-actions">
                    ${window.codeHistory?.[filename]?.length > 0 && uiState.currentVersion === 0 ? 
                        `<button onclick="revertToVersion('${escapeHtml(filename)}')">‚Ü∂ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏</button>` : ''}
                    ${uiState.currentVersion === 0 ? 
                        `<button onclick="editFile('${escapeHtml(filename)}')">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>` : ''}
                    <button onclick="copyCodeToClipboard('${escapeHtml(filename)}')">üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏</button>
                    <button onclick="downloadSingleFile('${escapeHtml(filename)}')">üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</button>
                </div>
            </div>
            <pre><code class="language-${language}">${highlightedCode}</code></pre>
        </div>
    `;
}

// –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ dropdown —Ñ–∞–π–ª—ñ–≤
function toggleFilesDropdown() {
    const dropdown = document.getElementById('filesDropdownMenu');
    if (!dropdown) return;
    
    uiState.filesDropdownOpen = !uiState.filesDropdownOpen;
    
    if (uiState.filesDropdownOpen) {
        dropdown.classList.add('active');
        
        // –ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ dropdown
        setTimeout(() => {
            document.addEventListener('click', closeDropdownOnClickOutside);
        }, 0);
    } else {
        dropdown.classList.remove('active');
        document.removeEventListener('click', closeDropdownOnClickOutside);
    }
}

// –ó–∞–∫—Ä–∏—Ç–∏ dropdown –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
function closeDropdownOnClickOutside(e) {
    const dropdown = document.getElementById('filesDropdownMenu');
    const button = document.querySelector('.files-dropdown-btn');
    
    if (dropdown && !dropdown.contains(e.target) && !button.contains(e.target)) {
        dropdown.classList.remove('active');
        uiState.filesDropdownOpen = false;
        document.removeEventListener('click', closeDropdownOnClickOutside);
    }
}

// –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à–∏–π —Ñ–∞–π–ª
function switchToFile(filename) {
    uiState.currentFile = filename;
    uiState.currentVersion = 0;
    displayCodeFilesEnhanced();
    
    // –ó–∞–∫—Ä–∏—Ç–∏ dropdown
    const dropdown = document.getElementById('filesDropdownMenu');
    if (dropdown) {
        dropdown.classList.remove('active');
        uiState.filesDropdownOpen = false;
    }
}

// –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≤–µ—Ä—Å—ñ—è
function previousVersion() {
    if (uiState.currentVersion > 0) {
        uiState.currentVersion--;
        displayCodeFilesEnhanced();
    }
}

// –ù–∞—Å—Ç—É–ø–Ω–∞ –≤–µ—Ä—Å—ñ—è
function nextVersion() {
    const versions = window.codeHistory?.[uiState.currentFile] || [];
    const totalVersions = versions.length + 1;
    
    if (uiState.currentVersion < totalVersions - 1) {
        uiState.currentVersion++;
        displayCodeFilesEnhanced();
    }
}

// –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–µ—Ä—Å—ñ—ó
function revertToVersion(filename) {
    const history = window.codeHistory?.[filename];
    if (!history || history.length === 0) return;
    
    if (!confirm(`‚Ü∂ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–º—ñ–Ω–∏ –≤ ${filename}?`)) return;
    
    const previousVersion = history.pop();
    window.codeFiles[filename].code = previousVersion;
    window.codeFiles[filename].modified = false;
    
    uiState.currentVersion = 0;
    displayCodeFilesEnhanced();
}

// –ö–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥
function copyCodeToClipboard(filename) {
    const file = window.codeFiles?.[filename];
    if (!file) return;
    
    // –í–∏–∑–Ω–∞—á–∏—Ç–∏ —è–∫–∏–π –∫–æ–¥ –∫–æ–ø—ñ—é–≤–∞—Ç–∏
    let code;
    if (uiState.currentVersion === 0) {
        code = file.code;
    } else {
        const versions = window.codeHistory?.[filename] || [];
        const versionIndex = versions.length - uiState.currentVersion;
        code = versions[versionIndex];
    }
    
    navigator.clipboard.writeText(code).then(() => {
        showToast('‚úì –ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!');
    });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
function downloadSingleFile(filename) {
    const file = window.codeFiles?.[filename];
    if (!file) return;
    
    const blob = new Blob([file.code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function showToast(message) {
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: linear-gradient(135deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        z-index: 10000;
        font-weight: 500;
        animation: slideInRight 0.3s ease;
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => toast.remove(), 300);
    }, 2000);
}

// –£—Ç–∏–ª—ñ—Ç–∏
function getShortFileName(filename) {
    if (filename.length <= 25) return filename;
    const parts = filename.split('/');
    const name = parts[parts.length - 1];
    return name.length <= 25 ? name : '...' + name.slice(-22);
}

function getFileIcon(filename) {
    const ext = filename.split('.').pop().toLowerCase();
    const icons = {
        'js': 'üìú', 'jsx': '‚öõÔ∏è', 'ts': 'üìò', 'tsx': '‚öõÔ∏è',
        'html': 'üåê', 'css': 'üé®', 'scss': 'üé®',
        'json': 'üìã', 'md': 'üìù', 'py': 'üêç',
        'java': '‚òï', 'cpp': '‚öôÔ∏è', 'c': '‚öôÔ∏è'
    };
    return icons[ext] || 'üìÑ';
}

function formatFileSize(bytes) {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
}

function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ó–∞–º—ñ–Ω–∞ —Å—Ç–∞—Ä–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó displayCodeFiles
if (typeof window.displayCodeFiles !== 'undefined') {
    window.displayCodeFiles = displayCodeFilesEnhanced;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
window.addEventListener('DOMContentLoaded', () => {
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—à–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤
    setTimeout(() => {
        initializeEnhancedCodeUI();
        
        // –Ø–∫—â–æ —î —Ñ–∞–π–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç–∏ —ó—Ö
        if (window.codeFiles && Object.keys(window.codeFiles).length > 0) {
            displayCodeFilesEnhanced();
        }
    }, 500);
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
window.toggleCodePanel = toggleCodePanel;
window.displayCodeFilesEnhanced = displayCodeFilesEnhanced;
window.switchToFile = switchToFile;
window.toggleFilesDropdown = toggleFilesDropdown;
window.previousVersion = previousVersion;
window.nextVersion = nextVersion;
window.revertToVersion = revertToVersion;
window.copyCodeToClipboard = copyCodeToClipboard;
window.downloadSingleFile = downloadSingleFile;
