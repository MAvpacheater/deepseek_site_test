// üìö Library Manager - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–æ–∑–º–æ–≤

class LibraryManager {
    constructor() {
        this.currentFilter = 'all';
        this.searchQuery = '';
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        this.setupEventListeners();
        console.log('‚úÖ Library Manager initialized');
    }

    setupEventListeners() {
        // –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ –≤ appState
        if (window.appState) {
            appState.on('mode:change', ({ newMode }) => {
                if (newMode === 'library') {
                    this.display();
                }
            });
        }

        // –ü–æ—à—É–∫
        const searchInput = document.getElementById('librarySearch');
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchQuery = e.target.value.toLowerCase();
                this.display();
            });
        }
    }

    // ========================================
    // –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ë–Ü–ë–õ–Ü–û–¢–ï–ö–ò
    // ========================================

    async display() {
        const content = document.getElementById('libraryContent');
        if (!content) return;

        try {
            // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            const items = await this.getAllItems();

            // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏
            const filtered = this.filterItems(items);

            if (filtered.length === 0) {
                content.innerHTML = this.renderEmptyState();
                return;
            }

            // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
            content.innerHTML = filtered.map(item => this.renderItem(item)).join('');

            console.log(`üìö –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ ${filtered.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏`);

        } catch (error) {
            console.error('Failed to display library:', error);
            content.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">‚ùå</div>
                    <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    <p>${error.message}</p>
                </div>
            `;
        }
    }

    // ========================================
    // –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–•
    // ========================================

    async getAllItems() {
        const items = [];

        try {
            // 1. –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ –∑ StorageManager
            if (window.storageManager) {
                const conversations = await storageManager.getConversations();
                conversations.forEach(conv => {
                    items.push({
                        id: conv.id,
                        type: 'conversation',
                        mode: conv.mode || 'gemini',
                        title: conv.title || '–†–æ–∑–º–æ–≤–∞ –±–µ–∑ –Ω–∞–∑–≤–∏',
                        preview: this.getConversationPreview(conv),
                        date: conv.createdAt || conv.date,
                        favorite: conv.favorite || false,
                        tags: conv.tags || [],
                        messageCount: conv.messages?.length || 0,
                        data: conv
                    });
                });
            }

            // 2. –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–¥-–ø—Ä–æ–µ–∫—Ç–∏
            if (window.storageManager) {
                const codeProjects = await storageManager.getCodeProjects();
                codeProjects.forEach(project => {
                    items.push({
                        id: project.id,
                        type: 'code',
                        mode: 'deepseek',
                        title: project.title || '–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç',
                        preview: this.getCodePreview(project),
                        date: project.createdAt || project.date,
                        favorite: project.favorite || false,
                        tags: project.tags || [],
                        fileCount: project.files ? Object.keys(project.files).length : 0,
                        data: project
                    });
                });
            }

            // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
            items.sort((a, b) => {
                const dateA = new Date(a.date || 0).getTime();
                const dateB = new Date(b.date || 0).getTime();
                return dateB - dateA;
            });

            console.log(`üìö –ó–Ω–∞–π–¥–µ–Ω–æ ${items.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ`);

        } catch (error) {
            console.error('Failed to get library items:', error);
        }

        return items;
    }

    getConversationPreview(conv) {
        if (!conv.messages || conv.messages.length === 0) {
            return '–ü–æ—Ä–æ–∂–Ω—è —Ä–æ–∑–º–æ–≤–∞';
        }

        // –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const firstUserMsg = conv.messages.find(m => 
            m.role === 'user' || 
            (m.parts && m.parts[0]?.text)
        );

        if (firstUserMsg) {
            const text = firstUserMsg.parts?.[0]?.text || firstUserMsg.content || '';
            return text.substring(0, 150) + (text.length > 150 ? '...' : '');
        }

        return '–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É';
    }

    getCodePreview(project) {
        if (!project.files || Object.keys(project.files).length === 0) {
            return '–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤';
        }

        const fileCount = Object.keys(project.files).length;
        const fileNames = Object.keys(project.files).slice(0, 3).join(', ');
        
        return `${fileCount} —Ñ–∞–π–ª—ñ–≤: ${fileNames}${fileCount > 3 ? '...' : ''}`;
    }

    // ========================================
    // –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø
    // ========================================

    filterItems(items) {
        let filtered = [...items];

        // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º
        if (this.currentFilter === 'gemini') {
            filtered = filtered.filter(item => item.mode === 'gemini');
        } else if (this.currentFilter === 'deepseek') {
            filtered = filtered.filter(item => item.mode === 'deepseek');
        } else if (this.currentFilter === 'favorites') {
            filtered = filtered.filter(item => item.favorite);
        }

        // –ü–æ—à—É–∫
        if (this.searchQuery) {
            filtered = filtered.filter(item => {
                const searchText = (
                    item.title + ' ' + 
                    item.preview + ' ' + 
                    item.tags.join(' ')
                ).toLowerCase();
                
                return searchText.includes(this.searchQuery);
            });
        }

        return filtered;
    }

    setFilter(filterType) {
        this.currentFilter = filterType;

        // –û–Ω–æ–≤–∏—Ç–∏ UI –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.library-filters .filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        const activeBtn = document.querySelector(`.filter-btn[onclick*="${filterType}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
        }

        // –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        this.display();
    }

    // ========================================
    // –†–ï–ù–î–ï–†–ò–ù–ì
    // ========================================

    renderItem(item) {
        const icon = this.getItemIcon(item);
        const date = this.formatDate(item.date);
        const favoriteIcon = item.favorite ? '‚≠ê' : '‚òÜ';

        return `
            <div class="library-item" data-id="${item.id}" data-type="${item.type}">
                <div class="library-item-header">
                    <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
                        <span style="font-size: 24px;">${icon}</span>
                        <div style="flex: 1; min-width: 0;">
                            <div class="library-item-title">${this.escapeHTML(item.title)}</div>
                            <div class="library-item-meta">
                                ${item.type === 'conversation' ? `üí¨ ${item.messageCount} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å` : `üìÅ ${item.fileCount} —Ñ–∞–π–ª—ñ–≤`}
                                ‚Ä¢ ${date}
                            </div>
                        </div>
                    </div>
                    <button class="library-item-favorite" onclick="libraryManager.toggleFavorite(${item.id}, '${item.type}')" title="${item.favorite ? '–ü—Ä–∏–±—Ä–∞—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö' : '–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ'}">
                        ${favoriteIcon}
                    </button>
                </div>

                <div class="library-item-preview">${this.escapeHTML(item.preview)}</div>

                ${item.tags.length > 0 ? `
                    <div class="library-item-tags">
                        ${item.tags.map(tag => `<span class="library-tag">${this.escapeHTML(tag)}</span>`).join('')}
                    </div>
                ` : ''}

                <div class="library-item-actions">
                    <button onclick="libraryManager.openItem(${item.id}, '${item.type}')">
                        üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏
                    </button>
                    <button onclick="libraryManager.exportItem(${item.id}, '${item.type}')">
                        üì§ –ï–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button onclick="libraryManager.deleteItem(${item.id}, '${item.type}')">
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                    </button>
                </div>
            </div>
        `;
    }

    renderEmptyState() {
        const messages = {
            all: {
                icon: 'üìö',
                title: '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ—Ä–æ–∂–Ω—è',
                text: '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏ –∑\'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç'
            },
            gemini: {
                icon: '‚ú®',
                title: '–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Gemini —Ä–æ–∑–º–æ–≤',
                text: '–ó–±–µ—Ä—ñ–≥–∞–π —Ü—ñ–∫–∞–≤—ñ —Ä–æ–∑–º–æ–≤–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ üíæ –≤ —á–∞—Ç—ñ'
            },
            deepseek: {
                icon: 'üíª',
                title: '–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤',
                text: '–ó–±–µ—Ä—ñ–≥–∞–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ üíæ –≤ DeepSeek'
            },
            favorites: {
                icon: '‚≠ê',
                title: '–ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö',
                text: '–î–æ–¥–∞–≤–∞–π –≤–∞–∂–ª–∏–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ'
            }
        };

        const msg = messages[this.currentFilter] || messages.all;

        return `
            <div class="empty-state">
                <div class="empty-state-icon">${msg.icon}</div>
                <h3>${msg.title}</h3>
                <p>${msg.text}</p>
            </div>
        `;
    }

    // ========================================
    // –î–Ü–á –ó –ï–õ–ï–ú–ï–ù–¢–ê–ú–ò
    // ========================================

    async openItem(id, type) {
        try {
            if (type === 'conversation') {
                await this.openConversation(id);
            } else if (type === 'code') {
                await this.openCodeProject(id);
            }
        } catch (error) {
            console.error('Failed to open item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è', 'error');
            }
        }
    }

    async openConversation(id) {
        const conv = await storageManager.get(storageManager.stores.conversations, id);
        if (!conv) {
            if (window.showToast) {
                showToast('‚ùå –†–æ–∑–º–æ–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
            }
            return;
        }

        const mode = conv.mode || 'gemini';

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
        if (window.modalManager) {
            const confirmed = await modalManager.confirm(
                `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É "${conv.title}"?\n\n–ü–æ—Ç–æ—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∞.`,
                {
                    title: 'üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É',
                    icon: 'üí¨',
                    confirmText: '–í—ñ–¥–∫—Ä–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
                }
            );

            if (!confirmed) return;
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –≤ appState
        if (window.appState) {
            if (mode === 'gemini') {
                appState.chat.gemini.history = conv.messages || [];
            } else if (mode === 'deepseek') {
                appState.chat.deepseek.history = conv.messages || [];
            }
        }

        // –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–µ–∂–∏–º
        if (typeof switchMode === 'function') {
            switchMode(mode);
        }

        // –†–µ–Ω–¥–µ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (mode === 'gemini' && window.geminiChat) {
            geminiChat.renderMessages();
        } else if (mode === 'deepseek' && window.deepseekCoder) {
            deepseekCoder.renderMessages();
        }

        if (window.showToast) {
            showToast('‚úÖ –†–æ–∑–º–æ–≤—É –≤—ñ–¥–∫—Ä–∏—Ç–æ!', 'success');
        }
    }

    async openCodeProject(id) {
        const project = await storageManager.get(storageManager.stores.codeFiles, id);
        if (!project || !project.files) {
            if (window.showToast) {
                showToast('‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
            }
            return;
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º
        if (window.modalManager) {
            const confirmed = await modalManager.confirm(
                `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç "${project.title}"?\n\n–ü–æ—Ç–æ—á–Ω—ñ —Ñ–∞–π–ª–∏ –∫–æ–¥—É –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ.`,
                {
                    title: 'üìñ –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç',
                    icon: 'üíª',
                    confirmText: '–í—ñ–¥–∫—Ä–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
                }
            );

            if (!confirmed) return;
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ –≤ appState
        if (window.appState) {
            appState.chat.deepseek.codeFiles = project.files;
            
            // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç—É
            if (project.context) {
                appState.setProjectContext(project.context);
            }
        }

        // –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ DeepSeek
        if (typeof switchMode === 'function') {
            switchMode('deepseek');
        }

        // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ñ–∞–π–ª–∏
        if (window.deepseekCoder) {
            deepseekCoder.displayCodeFiles();
        }

        if (window.showToast) {
            showToast('‚úÖ –ü—Ä–æ–µ–∫—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ!', 'success');
        }
    }

    async toggleFavorite(id, type) {
        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            const item = await storageManager.get(storeName, id);
            if (!item) return;

            item.favorite = !item.favorite;
            await storageManager.update(storeName, item);

            // –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            this.display();

            const msg = item.favorite ? 
                '‚≠ê –î–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ' : 
                '‚òÜ –ü—Ä–∏–±—Ä–∞–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö';

            if (window.showToast) {
                showToast(msg, 'success', 2000);
            }

        } catch (error) {
            console.error('Failed to toggle favorite:', error);
        }
    }

    async exportItem(id, type) {
        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            const item = await storageManager.get(storeName, id);
            if (!item) {
                if (window.showToast) {
                    showToast('‚ùå –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
                }
                return;
            }

            // –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫ JSON
            const blob = new Blob([JSON.stringify(item, null, 2)], { 
                type: 'application/json' 
            });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${this.sanitizeFilename(item.title)}-${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            if (window.showToast) {
                showToast('‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to export item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É', 'error');
            }
        }
    }

    async deleteItem(id, type) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ modalManager –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        let confirmed = false;

        if (window.modalManager) {
            confirmed = await modalManager.confirm(
                '–¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–∑–∞–≤–∂–¥–∏!',
                {
                    title: '‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç?',
                    icon: 'üóëÔ∏è',
                    confirmText: '–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
                    danger: true
                }
            );
        } else {
            // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π confirm
            confirmed = window.confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!');
        }

        if (!confirmed) return;

        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            await storageManager.delete(storeName, id);

            // –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            this.display();

            if (window.showToast) {
                showToast('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to delete item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
            }
        }
    }

    // ========================================
    // –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ü–û–¢–û–ß–ù–û–á –†–û–ó–ú–û–í–ò
    // ========================================

    async saveCurrentConversation(mode, title = null) {
        try {
            if (!window.appState) {
                throw new Error('AppState not available');
            }

            let messages = [];
            let messageCount = 0;

            if (mode === 'gemini') {
                messages = appState.getGeminiHistory();
                messageCount = messages.length;
            } else if (mode === 'deepseek') {
                messages = appState.getDeepSeekHistory();
                messageCount = messages.length;
            }

            if (messageCount === 0) {
                if (window.showToast) {
                    showToast('‚ö†Ô∏è –ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 'warning');
                }
                return null;
            }

            // –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —è–∫—â–æ –Ω–µ–º–∞—î
            if (!title) {
                const firstUserMsg = messages.find(m => 
                    m.role === 'user' || 
                    (m.parts && m.parts[0]?.text)
                );
                
                if (firstUserMsg) {
                    const text = firstUserMsg.parts?.[0]?.text || firstUserMsg.content || '';
                    title = text.substring(0, 50) + (text.length > 50 ? '...' : '');
                } else {
                    title = `${mode === 'gemini' ? 'Gemini' : 'DeepSeek'} —Ä–æ–∑–º–æ–≤–∞`;
                }
            }

            const conversation = {
                mode: mode,
                title: title,
                messages: messages,
                date: new Date().toISOString(),
                favorite: false,
                tags: [],
                messageCount: messageCount
            };

            const id = await storageManager.saveConversation(conversation);

            if (window.showToast) {
                showToast('‚úÖ –†–æ–∑–º–æ–≤—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É!', 'success');
            }

            return id;

        } catch (error) {
            console.error('Failed to save conversation:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏', 'error');
            }
            return null;
        }
    }

    async saveCurrentCodeProject(title = null) {
        try {
            if (!window.appState) {
                throw new Error('AppState not available');
            }

            const files = appState.getAllCodeFiles();
            if (Object.keys(files).length === 0) {
                if (window.showToast) {
                    showToast('‚ö†Ô∏è –ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 'warning');
                }
                return null;
            }

            // –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É
            if (!title) {
                const projectContext = appState.getProjectContext();
                if (projectContext && projectContext.repo) {
                    title = projectContext.repo;
                } else {
                    title = `–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç - ${new Date().toLocaleDateString('uk-UA')}`;
                }
            }

            const project = {
                title: title,
                files: files,
                context: appState.getProjectContext(),
                date: new Date().toISOString(),
                favorite: false,
                tags: [],
                fileCount: Object.keys(files).length
            };

            const id = await storageManager.saveCodeProject(project);

            if (window.showToast) {
                showToast('‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É!', 'success');
            }

            return id;

        } catch (error) {
            console.error('Failed to save code project:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É', 'error');
            }
            return null;
        }
    }

    // ========================================
    // UTILITY –§–£–ù–ö–¶–Ü–á
    // ========================================

    getItemIcon(item) {
        if (item.type === 'code') return 'üíª';
        if (item.mode === 'gemini') return '‚ú®';
        if (item.mode === 'deepseek') return 'ü§ñ';
        return 'üí¨';
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';

        const date = new Date(dateString);
        const now = Date.now();
        const diff = now - date.getTime();

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return '—â–æ–π–Ω–æ';
        if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
        if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;

        return date.toLocaleDateString('uk-UA', { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric' 
        });
    }

    escapeHTML(text) {
        if (window.sanitizer) {
            return sanitizer.escapeHTML(text);
        }
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    sanitizeFilename(filename) {
        if (window.sanitizer) {
            return sanitizer.sanitizeFilename(filename);
        }
        return filename
            .replace(/[^a-zA-Z0-9._-]/g, '_')
            .substring(0, 50);
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

let libraryManager = null;

document.addEventListener('DOMContentLoaded', () => {
    libraryManager = new LibraryManager();

    // –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó
    window.displayLibrary = () => libraryManager.display();
    window.filterByType = (type) => libraryManager.setFilter(type);
    window.filterLibrary = () => libraryManager.display();
    window.saveConversation = async (mode) => {
        if (window.modalManager) {
            // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –Ω–∞–∑–≤–∏
            const title = await modalManager.prompt('–ù–∞–∑–≤–∞ —Ä–æ–∑–º–æ–≤–∏:', {
                title: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–æ–∑–º–æ–≤—É',
                icon: 'üí¨',
                placeholder: '–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É...',
                defaultValue: `${mode === 'gemini' ? 'Gemini' : 'DeepSeek'} - ${new Date().toLocaleDateString('uk-UA')}`
            });

            if (title) {
                await libraryManager.saveCurrentConversation(mode, title);
            }
        } else {
            const title = prompt('üíæ –ù–∞–∑–≤–∞ —Ä–æ–∑–º–æ–≤–∏:', `${mode === 'gemini' ? 'Gemini' : 'DeepSeek'} - ${new Date().toLocaleDateString('uk-UA')}`);
            if (title) {
                await libraryManager.saveCurrentConversation(mode, title);
            }
        }
    };

    window.saveCodeProject = async () => {
        if (window.modalManager) {
            const title = await modalManager.prompt('–ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É:', {
                title: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–æ–µ–∫—Ç',
                icon: 'üíª',
                placeholder: '–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É...',
                defaultValue: `–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç - ${new Date().toLocaleDateString('uk-UA')}`
            });

            if (title) {
                await libraryManager.saveCurrentCodeProject(title);
            }
        } else {
            const title = prompt('üíæ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É:', `–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç - ${new Date().toLocaleDateString('uk-UA')}`);
            if (title) {
                await libraryManager.saveCurrentCodeProject(title);
            }
        }
    };

    console.log('‚úÖ Library module loaded (FIXED)');
});

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É
window.LibraryManager = LibraryManager;
window.libraryManager = libraryManager;
