// üìñ Library Preview Modal - –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (300 lines)

class LibraryPreviewModal {
    constructor() {
        this.modalId = 'libraryPreviewModal';
        this.currentItem = null;
        this.currentType = null;
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        this.createModal();
        this.setupEventListeners();
        console.log('‚úÖ Library Preview Modal initialized');
    }

    createModal() {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–∂–µ —ñ—Å–Ω—É—î
        if (document.getElementById(this.modalId)) return;

        const modal = document.createElement('div');
        modal.id = this.modalId;
        modal.className = 'library-preview-modal';
        modal.innerHTML = `
            <div class="library-preview-overlay" data-action="close"></div>
            <div class="library-preview-container">
                <div class="library-preview-header">
                    <div class="library-preview-title-section">
                        <h2 id="libraryPreviewTitle">üìñ –ü–µ—Ä–µ–≥–ª—è–¥</h2>
                        <div id="libraryPreviewMeta" class="library-preview-meta"></div>
                    </div>
                    <button class="library-preview-close" data-action="close" title="–ó–∞–∫—Ä–∏—Ç–∏">‚úï</button>
                </div>
                
                <div class="library-preview-body" id="libraryPreviewBody">
                    <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Ç—É—Ç -->
                </div>
                
                <div class="library-preview-footer">
                    <button class="library-btn library-btn-secondary" data-action="close">
                        –ó–∞–∫—Ä–∏—Ç–∏
                    </button>
                    <button class="library-btn library-btn-primary" id="libraryLoadBtn">
                        <span id="libraryLoadBtnIcon">üì•</span>
                        <span id="libraryLoadBtnText">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏</span>
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
    }

    setupEventListeners() {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action="close"]')) {
                this.close();
            }
        });

        // Escape –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isOpen()) {
                this.close();
            }
        });

        // Load button
        const loadBtn = document.getElementById('libraryLoadBtn');
        if (loadBtn) {
            loadBtn.addEventListener('click', () => {
                this.handleLoad();
            });
        }
    }

    // ========================================
    // –ü–û–ö–ê–ó–ê–¢–ò –†–û–ó–ú–û–í–£
    // ========================================

    async showConversation(conversation) {
        if (!conversation) return;

        this.currentItem = conversation;
        this.currentType = 'conversation';

        const modal = document.getElementById(this.modalId);
        const titleEl = document.getElementById('libraryPreviewTitle');
        const metaEl = document.getElementById('libraryPreviewMeta');
        const bodyEl = document.getElementById('libraryPreviewBody');
        const loadBtn = document.getElementById('libraryLoadBtn');

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        titleEl.textContent = `üìñ ${conversation.title || '–†–æ–∑–º–æ–≤–∞ –±–µ–∑ –Ω–∞–∑–≤–∏'}`;

        // –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        const mode = conversation.mode || 'gemini';
        const modeIcon = mode === 'gemini' ? '‚ú®' : 'üíª';
        const modeColor = mode === 'gemini' ? '#58a6ff' : '#3fb950';
        const messageCount = conversation.messages?.length || 0;
        const date = this.formatDate(conversation.createdAt || conversation.date);

        metaEl.innerHTML = `
            <span class="library-preview-badge" style="background: ${modeColor}20; color: ${modeColor};">
                ${modeIcon} ${mode === 'gemini' ? 'Gemini' : 'DeepSeek'}
            </span>
            <span class="library-preview-stat">üí¨ ${messageCount} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</span>
            <span class="library-preview-stat">üìÖ ${date}</span>
        `;

        // –†–µ–Ω–¥–µ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bodyEl.innerHTML = this.renderConversationMessages(conversation);

        // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (loadBtn) {
            const loadBtnIcon = document.getElementById('libraryLoadBtnIcon');
            const loadBtnText = document.getElementById('libraryLoadBtnText');
            if (loadBtnIcon) loadBtnIcon.textContent = 'üì•';
            if (loadBtnText) loadBtnText.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ —á–∞—Ç';
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        this.open();

        // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É
        setTimeout(() => {
            bodyEl.scrollTop = 0;
        }, 100);
    }

    renderConversationMessages(conv) {
        if (!conv.messages || conv.messages.length === 0) {
            return this.renderEmptyState('üí¨', '–ü–æ—Ä–æ–∂–Ω—è —Ä–æ–∑–º–æ–≤–∞');
        }

        let html = '';

        conv.messages.forEach((msg, index) => {
            const isUser = msg.role === 'user';
            const content = msg.parts?.[0]?.text || msg.content || '';
            
            if (!content) return;

            const avatar = isUser ? 'üë§' : 'ü§ñ';
            const role = isUser ? '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á' : (conv.mode === 'gemini' ? 'Gemini' : 'DeepSeek');

            html += `
                <div class="library-preview-message ${isUser ? 'user' : 'assistant'}">
                    <div class="library-preview-message-avatar">${avatar}</div>
                    <div class="library-preview-message-content">
                        <div class="library-preview-message-header">
                            <span class="library-preview-message-role">${role}</span>
                            <span class="library-preview-message-number">#${index + 1}</span>
                        </div>
                        <div class="library-preview-message-text">${this.escapeHTML(content)}</div>
                    </div>
                </div>
            `;
        });

        return html;
    }

    // ========================================
    // –ü–û–ö–ê–ó–ê–¢–ò –ö–û–î –ü–†–û–ï–ö–¢
    // ========================================

    async showCodeProject(project) {
        if (!project) return;

        this.currentItem = project;
        this.currentType = 'code';

        const modal = document.getElementById(this.modalId);
        const titleEl = document.getElementById('libraryPreviewTitle');
        const metaEl = document.getElementById('libraryPreviewMeta');
        const bodyEl = document.getElementById('libraryPreviewBody');
        const loadBtn = document.getElementById('libraryLoadBtn');

        // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        titleEl.textContent = `üíª ${project.title || '–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç'}`;

        // –ú–µ—Ç–∞-—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        const fileCount = project.files ? Object.keys(project.files).length : 0;
        const date = this.formatDate(project.createdAt || project.date);

        metaEl.innerHTML = `
            <span class="library-preview-badge" style="background: rgba(63, 185, 80, 0.2); color: #3fb950;">
                üíª Code Project
            </span>
            <span class="library-preview-stat">üìÅ ${fileCount} —Ñ–∞–π–ª—ñ–≤</span>
            <span class="library-preview-stat">üìÖ ${date}</span>
        `;

        // –†–µ–Ω–¥–µ—Ä–∏—Ç–∏ —Ñ–∞–π–ª–∏
        bodyEl.innerHTML = this.renderCodeProjectFiles(project);

        // –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        if (loadBtn) {
            const loadBtnIcon = document.getElementById('libraryLoadBtnIcon');
            const loadBtnText = document.getElementById('libraryLoadBtnText');
            if (loadBtnIcon) loadBtnIcon.textContent = 'üíª';
            if (loadBtnText) loadBtnText.textContent = '–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ';
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
        this.open();

        // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É
        setTimeout(() => {
            bodyEl.scrollTop = 0;
        }, 100);
    }

    renderCodeProjectFiles(project) {
        const files = project.files || {};
        const fileCount = Object.keys(files).length;

        if (fileCount === 0) {
            return this.renderEmptyState('üìÅ', '–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤');
        }

        let html = '<div class="library-preview-files">';

        Object.entries(files).forEach(([filename, file]) => {
            const language = file.language || 'text';
            const lines = (file.code || '').split('\n').length;
            const size = this.formatFileSize(file.code?.length || 0);
            const preview = (file.code || '').substring(0, 500);
            const hasMore = file.code?.length > 500;

            html += `
                <div class="library-preview-file">
                    <div class="library-preview-file-header">
                        <span class="library-preview-file-icon">üìÑ</span>
                        <span class="library-preview-file-name">${this.escapeHTML(filename)}</span>
                        <span class="library-preview-file-meta">${language} ‚Ä¢ ${lines} —Ä—è–¥–∫—ñ–≤ ‚Ä¢ ${size}</span>
                    </div>
                    <pre class="library-preview-code"><code class="language-${language}">${this.escapeHTML(preview)}${hasMore ? '\n\n// ...' : ''}</code></pre>
                </div>
            `;
        });

        html += '</div>';
        return html;
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í –ß–ê–¢ / –†–ï–î–ê–ö–¢–û–†
    // ========================================

    async handleLoad() {
        if (!this.currentItem || !this.currentType) return;

        if (this.currentType === 'conversation') {
            await this.loadConversation();
        } else if (this.currentType === 'code') {
            await this.loadCodeProject();
        }
    }

    async loadConversation() {
        const conv = this.currentItem;
        const mode = conv.mode || 'gemini';

        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const confirmed = await this.confirmLoad(
            `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É "${conv.title}" –≤ —á–∞—Ç?`,
            '–ü–æ—Ç–æ—á–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—É –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–∞.'
        );

        if (!confirmed) return;

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤ appState
            if (window.appState) {
                if (mode === 'gemini') {
                    appState.chat.gemini.history = conv.messages || [];
                    appState.chat.gemini.messages = conv.messages || [];
                } else if (mode === 'deepseek') {
                    appState.chat.deepseek.history = conv.messages || [];
                    appState.chat.deepseek.messages = conv.messages || [];
                }
            }

            // –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            this.close();

            // –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ä–µ–∂–∏–º
            if (typeof switchMode === 'function') {
                switchMode(mode);
            }

            // –†–µ–Ω–¥–µ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (mode === 'gemini' && window.geminiChat) {
                geminiChat.renderMessages();
            } else if (mode === 'deepseek' && window.deepseekChat) {
                deepseekChat.renderMessages();
            }

            if (window.showToast) {
                showToast('‚úÖ –†–æ–∑–º–æ–≤—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ —á–∞—Ç!', 'success');
            }

        } catch (error) {
            console.error('Failed to load conversation:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏', 'error');
            }
        }
    }

    async loadCodeProject() {
        const project = this.currentItem;

        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const confirmed = await this.confirmLoad(
            `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç "${project.title}"?`,
            '–ü–æ—Ç–æ—á–Ω—ñ —Ñ–∞–π–ª–∏ –∫–æ–¥—É –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ.'
        );

        if (!confirmed) return;

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ –≤ appState
            if (window.appState) {
                appState.chat.deepseek.codeFiles = project.files || {};
                
                if (project.context) {
                    appState.setProjectContext(project.context);
                }
            }

            // –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
            this.close();

            // –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—è –Ω–∞ DeepSeek
            if (typeof switchMode === 'function') {
                switchMode('deepseek');
            }

            // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ñ–∞–π–ª–∏
            if (window.uiController) {
                uiController.displayFiles();
            } else if (typeof displayCodeFiles === 'function') {
                displayCodeFiles();
            }

            if (window.showToast) {
                showToast('‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to load code project:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É', 'error');
            }
        }
    }

    async confirmLoad(title, message) {
        if (window.modalManager) {
            return await modalManager.confirm(
                `${title}\n\n${message}`,
                {
                    title: 'üì• –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                    icon: 'üíæ',
                    confirmText: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
                }
            );
        }

        return confirm(`${title}\n\n${message}`);
    }

    // ========================================
    // –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ú–û–î–ê–õ–¨–ù–ò–ú –í–Ü–ö–ù–û–ú
    // ========================================

    open() {
        const modal = document.getElementById(this.modalId);
        if (modal) {
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
    }

    close() {
        const modal = document.getElementById(this.modalId);
        if (modal) {
            modal.classList.remove('active');
            document.body.style.overflow = '';
            
            // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
            this.currentItem = null;
            this.currentType = null;
        }
    }

    isOpen() {
        const modal = document.getElementById(this.modalId);
        return modal && modal.classList.contains('active');
    }

    // ========================================
    // UTILITY –§–£–ù–ö–¶–Ü–á
    // ========================================

    renderEmptyState(icon, text) {
        return `
            <div class="library-preview-empty">
                <div class="library-preview-empty-icon">${icon}</div>
                <p class="library-preview-empty-text">${text}</p>
            </div>
        `;
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';

        const date = new Date(dateString);
        const now = Date.now();
        const diff = now - date.getTime();

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return '—â–æ–π–Ω–æ';
        if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
        if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;

        return date.toLocaleDateString('uk-UA', { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric' 
        });
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
    }

    escapeHTML(text) {
        if (!text) return '';
        if (window.sanitizer && typeof sanitizer.escapeHTML === 'function') {
            return sanitizer.escapeHTML(text);
        }
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

const libraryPreview = new LibraryPreviewModal();

// –ï–∫—Å–ø–æ—Ä—Ç
window.libraryPreview = libraryPreview;
window.LibraryPreviewModal = LibraryPreviewModal;

console.log('‚úÖ Library Preview Modal loaded');
