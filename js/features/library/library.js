// üìö Library Core - –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (350 lines)

class LibraryCore {
    constructor() {
        this.currentFilter = 'all';
        this.searchQuery = '';
        this.sortBy = 'date'; // 'date', 'title', 'type'
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        this.setupEventListeners();
        console.log('‚úÖ Library Core initialized');
    }

    setupEventListeners() {
        // –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ –≤ appState
        if (window.appState) {
            appState.on('mode:change', ({ newMode }) => {
                if (newMode === 'library') {
                    this.loadAndDisplay();
                }
            });
        }

        // –ü–æ—à—É–∫
        const searchInput = document.getElementById('librarySearch');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.searchQuery = e.target.value.toLowerCase();
                    this.display();
                }, 300);
            });
        }

        // Event bus
        if (window.eventBus) {
            eventBus.on('library:refresh', () => this.loadAndDisplay());
            eventBus.on('library:filter', ({ filter }) => this.setFilter(filter));
        }
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –¢–ê –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø
    // ========================================

    async loadAndDisplay() {
        try {
            const items = await this.getAllItems();
            this.displayItems(items);
        } catch (error) {
            console.error('Failed to load library:', error);
            this.displayError(error);
        }
    }

    async display() {
        try {
            const items = await this.getAllItems();
            this.displayItems(items);
        } catch (error) {
            console.error('Failed to display library:', error);
            this.displayError(error);
        }
    }

    displayItems(items) {
        const filtered = this.filterAndSortItems(items);
        
        if (window.libraryUI) {
            libraryUI.render(filtered);
        } else {
            this.fallbackRender(filtered);
        }
    }

    displayError(error) {
        const content = document.getElementById('libraryContent');
        if (!content) return;

        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">‚ùå</div>
                <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                <p>${error.message}</p>
                <button onclick="libraryCore.loadAndDisplay()" class="retry-btn">
                    üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                </button>
            </div>
        `;
    }

    // ========================================
    // –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–•
    // ========================================

    async getAllItems() {
        const items = [];

        try {
            // –†–æ–∑–º–æ–≤–∏
            if (window.storageManager) {
                const conversations = await storageManager.getConversations();
                conversations.forEach(conv => {
                    items.push(this.createConversationItem(conv));
                });

                // –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∏
                const codeProjects = await storageManager.getCodeProjects();
                codeProjects.forEach(project => {
                    items.push(this.createCodeProjectItem(project));
                });
            }

            console.log(`üìö –ó–Ω–∞–π–¥–µ–Ω–æ ${items.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);

        } catch (error) {
            console.error('Failed to get items:', error);
            if (window.errorHandler) {
                errorHandler.logError({
                    type: 'library_error',
                    message: 'Failed to load library items',
                    error: error.message,
                    severity: 'medium'
                });
            }
        }

        return items;
    }

    createConversationItem(conv) {
        return {
            id: conv.id,
            type: 'conversation',
            mode: conv.mode || 'gemini',
            title: conv.title || '–†–æ–∑–º–æ–≤–∞ –±–µ–∑ –Ω–∞–∑–≤–∏',
            preview: this.getConversationPreview(conv),
            date: conv.createdAt || conv.date,
            favorite: conv.favorite || false,
            tags: conv.tags || [],
            messageCount: conv.messages?.length || 0,
            data: conv
        };
    }

    createCodeProjectItem(project) {
        return {
            id: project.id,
            type: 'code',
            mode: 'deepseek',
            title: project.title || '–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç',
            preview: this.getCodePreview(project),
            date: project.createdAt || project.date,
            favorite: project.favorite || false,
            tags: project.tags || [],
            fileCount: project.files ? Object.keys(project.files).length : 0,
            data: project
        };
    }

    getConversationPreview(conv) {
        if (!conv.messages || conv.messages.length === 0) {
            return '–ü–æ—Ä–æ–∂–Ω—è —Ä–æ–∑–º–æ–≤–∞';
        }

        const firstUserMsg = conv.messages.find(m => 
            m.role === 'user' || (m.parts && m.parts[0]?.text)
        );

        if (firstUserMsg) {
            const text = firstUserMsg.parts?.[0]?.text || firstUserMsg.content || '';
            return text.substring(0, 150) + (text.length > 150 ? '...' : '');
        }

        return '–ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É';
    }

    getCodePreview(project) {
        if (!project.files || Object.keys(project.files).length === 0) {
            return '–ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤';
        }

        const fileCount = Object.keys(project.files).length;
        const fileNames = Object.keys(project.files).slice(0, 3).join(', ');
        
        return `${fileCount} —Ñ–∞–π–ª—ñ–≤: ${fileNames}${fileCount > 3 ? '...' : ''}`;
    }

    // ========================================
    // –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø –¢–ê –°–û–†–¢–£–í–ê–ù–ù–Ø
    // ========================================

    filterAndSortItems(items) {
        let filtered = [...items];

        // –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º
        filtered = this.applyTypeFilter(filtered);

        // –ü–æ—à—É–∫
        filtered = this.applySearch(filtered);

        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        filtered = this.applySorting(filtered);

        return filtered;
    }

    applyTypeFilter(items) {
        switch (this.currentFilter) {
            case 'gemini':
                return items.filter(item => item.mode === 'gemini');
            case 'deepseek':
                return items.filter(item => item.mode === 'deepseek');
            case 'code':
                return items.filter(item => item.type === 'code');
            case 'favorites':
                return items.filter(item => item.favorite);
            case 'all':
            default:
                return items;
        }
    }

    applySearch(items) {
        if (!this.searchQuery || this.searchQuery.trim() === '') {
            return items;
        }

        return items.filter(item => {
            const searchText = (
                item.title + ' ' + 
                item.preview + ' ' + 
                (item.tags || []).join(' ')
            ).toLowerCase();
            
            return searchText.includes(this.searchQuery);
        });
    }

    applySorting(items) {
        return items.sort((a, b) => {
            switch (this.sortBy) {
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'type':
                    if (a.type === b.type) {
                        return this.compareByDate(b, a);
                    }
                    return a.type.localeCompare(b.type);
                case 'date':
                default:
                    return this.compareByDate(b, a);
            }
        });
    }

    compareByDate(a, b) {
        const dateA = new Date(a.date || 0).getTime();
        const dateB = new Date(b.date || 0).getTime();
        return dateA - dateB;
    }

    // ========================================
    // –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –§–Ü–õ–¨–¢–†–ê–ú–ò
    // ========================================

    setFilter(filterType) {
        this.currentFilter = filterType;
        this.updateFilterButtons();
        this.display();
    }

    updateFilterButtons() {
        document.querySelectorAll('.library-filters .filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        const activeBtn = document.querySelector(
            `.filter-btn[onclick*="${this.currentFilter}"]`
        );
        if (activeBtn) {
            activeBtn.classList.add('active');
        }
    }

    setSortBy(sortBy) {
        this.sortBy = sortBy;
        this.display();
    }

    // ========================================
    // –î–Ü–á –ó –ï–õ–ï–ú–ï–ù–¢–ê–ú–ò
    // ========================================

    async openItem(id, type) {
        try {
            if (type === 'conversation') {
                await this.loadConversation(id);
            } else if (type === 'code') {
                await this.loadCodeProject(id);
            }
        } catch (error) {
            console.error('Failed to open item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è', 'error');
            }
        }
    }

    async loadConversation(id) {
        const conv = await storageManager.get(
            storageManager.stores.conversations, 
            id
        );

        if (!conv) {
            throw new Error('–†–æ–∑–º–æ–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–≤'—é —á–µ—Ä–µ–∑ preview manager
        if (window.libraryPreview) {
            await libraryPreview.showConversation(conv);
        }
    }

    async loadCodeProject(id) {
        const project = await storageManager.get(
            storageManager.stores.codeFiles, 
            id
        );

        if (!project) {
            throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–≤'—é —á–µ—Ä–µ–∑ preview manager
        if (window.libraryPreview) {
            await libraryPreview.showCodeProject(project);
        }
    }

    async toggleFavorite(id, type) {
        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            const item = await storageManager.get(storeName, id);
            if (!item) return false;

            item.favorite = !item.favorite;
            await storageManager.update(storeName, item);

            this.display();

            const msg = item.favorite ? 
                '‚≠ê –î–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ' : 
                '‚òÜ –ü—Ä–∏–±—Ä–∞–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö';

            if (window.showToast) {
                showToast(msg, 'success', 2000);
            }

            return true;

        } catch (error) {
            console.error('Failed to toggle favorite:', error);
            return false;
        }
    }

    async exportItem(id, type) {
        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            const item = await storageManager.get(storeName, id);
            if (!item) {
                if (window.showToast) {
                    showToast('‚ùå –ï–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
                }
                return;
            }

            const blob = new Blob(
                [JSON.stringify(item, null, 2)], 
                { type: 'application/json' }
            );
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${this.sanitizeFilename(item.title)}-${Date.now()}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);

            if (window.showToast) {
                showToast('‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to export item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É', 'error');
            }
        }
    }

    async deleteItem(id, type) {
        let confirmed = false;

        if (window.modalManager) {
            confirmed = await modalManager.confirm(
                '–¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –Ω–∞–∑–∞–≤–∂–¥–∏!',
                {
                    title: '‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç?',
                    icon: 'üóëÔ∏è',
                    confirmText: '–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏',
                    cancelText: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
                    danger: true
                }
            );
        } else {
            confirmed = confirm(
                '‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –µ–ª–µ–º–µ–Ω—Ç? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏!'
            );
        }

        if (!confirmed) return false;

        try {
            const storeName = type === 'conversation' ? 
                storageManager.stores.conversations : 
                storageManager.stores.codeFiles;

            await storageManager.delete(storeName, id);
            this.display();

            if (window.showToast) {
                showToast('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ!', 'success');
            }

            return true;

        } catch (error) {
            console.error('Failed to delete item:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
            }
            return false;
        }
    }

    // ========================================
    // FALLBACK RENDER
    // ========================================

    fallbackRender(items) {
        const content = document.getElementById('libraryContent');
        if (!content) return;

        if (items.length === 0) {
            content.innerHTML = this.getEmptyStateHTML();
            return;
        }

        content.innerHTML = items.map(item => 
            this.createItemHTML(item)
        ).join('');
    }

    createItemHTML(item) {
        const icon = this.getItemIcon(item);
        const date = this.formatDate(item.date);
        const favoriteIcon = item.favorite ? '‚≠ê' : '‚òÜ';

        return `
            <div class="library-item" data-id="${item.id}" data-type="${item.type}">
                <div class="library-item-header">
                    <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
                        <span style="font-size: 24px;">${icon}</span>
                        <div style="flex: 1; min-width: 0;">
                            <div class="library-item-title">${this.escapeHTML(item.title)}</div>
                            <div class="library-item-meta">
                                ${item.type === 'conversation' ? `üí¨ ${item.messageCount} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å` : `üìÅ ${item.fileCount} —Ñ–∞–π–ª—ñ–≤`}
                                ‚Ä¢ ${date}
                            </div>
                        </div>
                    </div>
                    <button class="library-item-favorite" 
                            onclick="libraryCore.toggleFavorite(${item.id}, '${item.type}')" 
                            title="${item.favorite ? '–ü—Ä–∏–±—Ä–∞—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö' : '–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ'}">
                        ${favoriteIcon}
                    </button>
                </div>

                <div class="library-item-preview">${this.escapeHTML(item.preview)}</div>

                ${item.tags.length > 0 ? `
                    <div class="library-item-tags">
                        ${item.tags.map(tag => 
                            `<span class="library-tag">${this.escapeHTML(tag)}</span>`
                        ).join('')}
                    </div>
                ` : ''}

                <div class="library-item-actions">
                    <button onclick="libraryCore.openItem(${item.id}, '${item.type}')">
                        üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                    </button>
                    <button onclick="libraryCore.exportItem(${item.id}, '${item.type}')">
                        üì§ –ï–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button onclick="libraryCore.deleteItem(${item.id}, '${item.type}')">
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                    </button>
                </div>
            </div>
        `;
    }

    getEmptyStateHTML() {
        const messages = {
            all: {
                icon: 'üìö',
                title: '–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –ø–æ—Ä–æ–∂–Ω—è',
                text: '–ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–æ–∑–º–æ–≤–∏ —Ç–∞ –ø—Ä–æ–µ–∫—Ç–∏ –∑\'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç'
            },
            gemini: {
                icon: '‚ú®',
                title: '–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Gemini —Ä–æ–∑–º–æ–≤',
                text: '–ó–±–µ—Ä—ñ–≥–∞–π —Ü—ñ–∫–∞–≤—ñ —Ä–æ–∑–º–æ–≤–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ üíæ –≤ —á–∞—Ç—ñ'
            },
            deepseek: {
                icon: 'üíª',
                title: '–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤',
                text: '–ó–±–µ—Ä—ñ–≥–∞–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ üíæ –≤ DeepSeek'
            },
            favorites: {
                icon: '‚≠ê',
                title: '–ù–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö',
                text: '–î–æ–¥–∞–≤–∞–π –≤–∞–∂–ª–∏–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ'
            }
        };

        const msg = messages[this.currentFilter] || messages.all;

        return `
            <div class="empty-state">
                <div class="empty-state-icon">${msg.icon}</div>
                <h3>${msg.title}</h3>
                <p>${msg.text}</p>
            </div>
        `;
    }

    // ========================================
    // UTILITY
    // ========================================

    getItemIcon(item) {
        if (item.type === 'code') return 'üíª';
        if (item.mode === 'gemini') return '‚ú®';
        if (item.mode === 'deepseek') return 'ü§ñ';
        return 'üí¨';
    }

    formatDate(dateString) {
        if (!dateString) return '–ù–µ–≤—ñ–¥–æ–º–æ';

        const date = new Date(dateString);
        const now = Date.now();
        const diff = now - date.getTime();

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return '—â–æ–π–Ω–æ';
        if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
        if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;

        return date.toLocaleDateString('uk-UA', { 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric' 
        });
    }

    escapeHTML(text) {
        if (window.sanitizer) {
            return sanitizer.escapeHTML(text);
        }
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    sanitizeFilename(filename) {
        if (window.sanitizer) {
            return sanitizer.sanitizeFilename(filename);
        }
        return filename
            .replace(/[^a-zA-Z0-9._-]/g, '_')
            .substring(0, 50);
    }

    getStats() {
        return {
            currentFilter: this.currentFilter,
            searchQuery: this.searchQuery,
            sortBy: this.sortBy
        };
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

const libraryCore = new LibraryCore();

// –ï–∫—Å–ø–æ—Ä—Ç
window.libraryCore = libraryCore;
window.LibraryCore = LibraryCore;

// Compatibility functions
window.displayLibrary = () => libraryCore.loadAndDisplay();
window.filterByType = (type) => libraryCore.setFilter(type);

console.log('‚úÖ Library Core loaded');
