// üõ†Ô∏è AI Agent Tools - –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏

const AgentTools = {
    // üìù –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—É
    textAnalyzer: {
        name: 'Text Analyzer',
        description: '–ê–Ω–∞–ª—ñ–∑—É—î —Ç–µ–∫—Å—Ç —Ç–∞ –≤–∏—Ç—è–≥—É—î –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é',
        
        async execute(text) {
            const analysis = {
                length: text.length,
                words: text.split(/\s+/).length,
                sentences: text.split(/[.!?]+/).length,
                keywords: this.extractKeywords(text),
                sentiment: this.analyzeSentiment(text)
            };
            
            return analysis;
        },
        
        extractKeywords(text) {
            // –ü—Ä–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —á–µ—Ä–µ–∑ AI)
            const words = text.toLowerCase()
                .replace(/[^\w\s\u0400-\u04FF]/g, '')
                .split(/\s+/);
            
            const stopWords = ['—ñ', '–≤', '–Ω–∞', '–∑', '–¥–æ', '—Ü–µ', '—è–∫', '—â–æ', '—Ç–∞'];
            const filtered = words.filter(w => !stopWords.includes(w) && w.length > 3);
            
            const freq = {};
            filtered.forEach(word => {
                freq[word] = (freq[word] || 0) + 1;
            });
            
            return Object.entries(freq)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5)
                .map(([word]) => word);
        },
        
        analyzeSentiment(text) {
            const positive = ['–¥–æ–±—Ä–µ', '—á—É–¥–æ–≤–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å–Ω–æ', '–≤—ñ–¥–º—ñ–Ω–Ω–æ'];
            const negative = ['–ø–æ–≥–∞–Ω–æ', '–∂–∞—Ö–ª–∏–≤–æ', '–ø–æ–≥–∞–Ω–∏–π', '–ø—Ä–æ–±–ª–µ–º–∞'];
            
            let score = 0;
            const lowerText = text.toLowerCase();
            
            positive.forEach(word => {
                if (lowerText.includes(word)) score += 1;
            });
            
            negative.forEach(word => {
                if (lowerText.includes(word)) score -= 1;
            });
            
            return score > 0 ? 'positive' : score < 0 ? 'negative' : 'neutral';
        }
    },

    // üîç –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ—à—É–∫—É
    webSearch: {
        name: 'Web Search',
        description: '–®—É–∫–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—ñ (—Å–∏–º—É–ª—è—Ü—ñ—è)',
        
        async execute(query) {
            // –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—à—É–∫—É (—Ç—Ä–µ–±–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—à—É–∫—É)
            console.log('üîç –ü–æ—à—É–∫:', query);
            
            await new Promise(resolve => setTimeout(resolve, 500));
            
            return {
                query: query,
                results: [
                    { title: '–†–µ–∑—É–ª—å—Ç–∞—Ç 1', snippet: '–ó–Ω–∞–π–¥–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è...' },
                    { title: '–†–µ–∑—É–ª—å—Ç–∞—Ç 2', snippet: '–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ...' }
                ]
            };
        }
    },

    // üíæ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    dataStorage: {
        name: 'Data Storage',
        description: '–ó–±–µ—Ä—ñ–≥–∞—î —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ',
        
        async execute(action, key, value) {
            if (action === 'save') {
                localStorage.setItem(`agent_data_${key}`, JSON.stringify(value));
                return { success: true, message: '–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ' };
            } else if (action === 'load') {
                const data = localStorage.getItem(`agent_data_${key}`);
                return data ? JSON.parse(data) : null;
            } else if (action === 'delete') {
                localStorage.removeItem(`agent_data_${key}`);
                return { success: true, message: '–î–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ' };
            }
        }
    },

    // üìä –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–æ–¥—É
    codeAnalyzer: {
        name: 'Code Analyzer',
        description: '–ê–Ω–∞–ª—ñ–∑—É—î –∫–æ–¥ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ —è–∫—ñ—Å—Ç—å',
        
        async execute(code, language) {
            const analysis = {
                language: language,
                lines: code.split('\n').length,
                issues: [],
                suggestions: []
            };
            
            // –ë–∞–∑–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑
            if (language === 'javascript') {
                if (code.includes('var ')) {
                    analysis.issues.push('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è var –∑–∞–º—ñ—Å—Ç—å let/const');
                }
                if (code.match(/console\.log/g)?.length > 3) {
                    analysis.suggestions.push('–ó–∞–±–∞–≥–∞—Ç–æ console.log - –ø—Ä–∏–±–µ—Ä–∏ –¥–ª—è production');
                }
            }
            
            if (language === 'html' && !code.includes('<!DOCTYPE')) {
                analysis.issues.push('–í—ñ–¥—Å—É—Ç–Ω—ñ–π DOCTYPE');
            }
            
            analysis.quality = analysis.issues.length === 0 ? 'good' : 'needs_improvement';
            
            return analysis;
        }
    },

    // üé® –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
    contentGenerator: {
        name: 'Content Generator',
        description: '–ì–µ–Ω–µ—Ä—É—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
        
        async execute(type, params) {
            if (type === 'readme') {
                return this.generateReadme(params);
            } else if (type === 'gitignore') {
                return this.generateGitignore(params);
            } else if (type === 'package_json') {
                return this.generatePackageJson(params);
            }
        },
        
        generateReadme({ projectName, description }) {
            return `# ${projectName}

${description}

## Installation

\`\`\`bash
npm install
\`\`\`

## Usage

\`\`\`bash
npm start
\`\`\`

## License

MIT
`;
        },
        
        generateGitignore(language) {
            const templates = {
                javascript: 'node_modules/\n.env\ndist/\nbuild/\n*.log',
                python: '__pycache__/\n*.py[cod]\nvenv/\n.env\n*.log',
                java: '*.class\ntarget/\n.idea/\n*.jar'
            };
            
            return templates[language] || 'node_modules/\n.env\n*.log';
        },
        
        generatePackageJson({ name, description, version = '1.0.0' }) {
            return JSON.stringify({
                name: name,
                version: version,
                description: description,
                main: 'index.js',
                scripts: {
                    start: 'node index.js',
                    test: 'echo "No tests yet"'
                },
                keywords: [],
                author: '',
                license: 'MIT'
            }, null, 2);
        }
    },

    // üìÖ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
    taskPlanner: {
        name: 'Task Planner',
        description: '–ü–ª–∞–Ω—É—î —Ç–∞ —Ä–æ–∑–±–∏–≤–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è',
        
        async execute(task) {
            const steps = [];
            
            // –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è
            if (task.toLowerCase().includes('—Å—Ç–≤–æ—Ä')) {
                steps.push('–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–º–æ–≥–∏');
                steps.push('–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                steps.push('–ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–¥');
                steps.push('–ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏');
            } else if (task.toLowerCase().includes('–≤–∏–ø—Ä–∞–≤')) {
                steps.push('–ó–Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É');
                steps.push('–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É');
                steps.push('–í–∏–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥');
                steps.push('–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
            } else {
                steps.push('–†–æ–∑—ñ–±—Ä–∞—Ç–∏—Å—å –∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º');
                steps.push('–í–∏–∫–æ–Ω–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É —Ä–æ–±–æ—Ç—É');
                steps.push('–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            }
            
            return steps.map((step, index) => ({
                id: index + 1,
                description: step,
                status: 'pending',
                estimatedTime: '5-10 —Ö–≤'
            }));
        }
    },

    // üîî –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    reminderSystem: {
        name: 'Reminder System',
        description: '–°—Ç–≤–æ—Ä—é—î —Ç–∞ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è',
        
        reminders: [],
        
        async execute(action, params) {
            if (action === 'create') {
                return this.createReminder(params);
            } else if (action === 'list') {
                return this.listReminders();
            } else if (action === 'check') {
                return this.checkReminders();
            }
        },
        
        createReminder({ text, time, priority = 'medium' }) {
            const reminder = {
                id: Date.now(),
                text: text,
                time: new Date(time),
                priority: priority,
                active: true,
                created: new Date()
            };
            
            this.reminders.push(reminder);
            this.saveReminders();
            
            // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–∞–π–º–µ—Ä
            const now = Date.now();
            const reminderTime = new Date(time).getTime();
            
            if (reminderTime > now) {
                setTimeout(() => {
                    this.triggerReminder(reminder);
                }, reminderTime - now);
            }
            
            return reminder;
        },
        
        listReminders() {
            return this.reminders.filter(r => r.active);
        },
        
        checkReminders() {
            const now = Date.now();
            return this.reminders.filter(r => 
                r.active && new Date(r.time).getTime() <= now
            );
        },
        
        triggerReminder(reminder) {
            const priority = reminder.priority === 'high' ? 'üî¥' : 
                           reminder.priority === 'medium' ? 'üü°' : 'üü¢';
            
            alert(`${priority} –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n${reminder.text}`);
            
            reminder.active = false;
            this.saveReminders();
        },
        
        saveReminders() {
            localStorage.setItem('agent_reminders', JSON.stringify(this.reminders));
        },
        
        loadReminders() {
            const saved = localStorage.getItem('agent_reminders');
            if (saved) {
                this.reminders = JSON.parse(saved);
            }
        }
    },

    // üßÆ –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—á–∏—Å–ª–µ–Ω—å
    calculator: {
        name: 'Calculator',
        description: '–í–∏–∫–æ–Ω—É—î –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è',
        
        async execute(expression) {
            try {
                // –ë–µ–∑–ø–µ—á–Ω–∏–π eval (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Å–µ–ª —Ç–∞ –±–∞–∑–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π)
                const sanitized = expression.replace(/[^0-9+\-*/().]/g, '');
                const result = Function(`'use strict'; return (${sanitized})`)();
                
                return {
                    expression: expression,
                    result: result,
                    success: true
                };
            } catch (error) {
                return {
                    expression: expression,
                    error: error.message,
                    success: false
                };
            }
        }
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
window.addEventListener('DOMContentLoaded', () => {
    AgentTools.reminderSystem.loadReminders();
    console.log('üõ†Ô∏è Agent Tools –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.AgentTools = AgentTools;
