// üõ†Ô∏è AI Agent Tools - –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—ó —Ä–æ–±–æ—Ç–∏

const AgentTools = {
    // üìù –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É
    textAnalyzer: {
        name: 'Text Analyzer',
        execute(text) {
            const analysis = {
                length: text.length,
                words: text.split(/\s+/).filter(w => w).length,
                sentences: text.split(/[.!?]+/).filter(s => s.trim()).length,
                keywords: this.extractKeywords(text),
                sentiment: this.analyzeSentiment(text)
            };
            return analysis;
        },
        
        extractKeywords(text) {
            const words = text.toLowerCase()
                .replace(/[^\w\s\u0400-\u04FF]/g, '')
                .split(/\s+/)
                .filter(w => w.length > 3);
            
            const stopWords = ['—ñ', '–≤', '–Ω–∞', '–∑', '–¥–æ', '—Ü–µ', '—è–∫', '—â–æ', '—Ç–∞', '–∞–±–æ'];
            const filtered = words.filter(w => !stopWords.includes(w));
            
            const freq = {};
            filtered.forEach(word => {
                freq[word] = (freq[word] || 0) + 1;
            });
            
            return Object.entries(freq)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5)
                .map(([word]) => word);
        },
        
        analyzeSentiment(text) {
            const positive = ['–¥–æ–±—Ä–µ', '—á—É–¥–æ–≤–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å–Ω–æ', '–≤—ñ–¥–º—ñ–Ω–Ω–æ', '–∑–±–∏–≤'];
            const negative = ['–ø–æ–≥–∞–Ω–æ', '–∂–∞—Ö–ª–∏–≤–æ', '–ø–æ–≥–∞–Ω–∏–π', '–ø—Ä–æ–±–ª–µ–º–∞', '–ø–æ–º–∏–ª–∫–∞', '–≥—Ä—ñ—à–∏—Ç–∏'];
            
            let score = 0;
            const lowerText = text.toLowerCase();
            
            positive.forEach(word => {
                if (lowerText.includes(word)) score += 1;
            });
            
            negative.forEach(word => {
                if (lowerText.includes(word)) score -= 1;
            });
            
            return score > 0 ? 'positive' : score < 0 ? 'negative' : 'neutral';
        }
    },

    // üîç –ê–Ω–∞–ª—ñ–∑ –∫–æ–¥—É
    codeAnalyzer: {
        name: 'Code Analyzer',
        execute(code, language) {
            const analysis = {
                language: language,
                lines: code.split('\n').length,
                issues: [],
                suggestions: [],
                quality: 'good'
            };
            
            if (language === 'javascript' || language === 'js') {
                if (code.includes('var ')) {
                    analysis.issues.push('‚ùå var - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π let/const');
                }
                if (code.match(/console\.log/g)?.length > 3) {
                    analysis.suggestions.push('üí° –ó–∞–±–∞–≥–∞—Ç–æ console.log');
                }
                if (code.match(/==/g) && !code.match(/===/g)) {
                    analysis.issues.push('‚ùå == –∑–∞–º—ñ—Å—Ç—å ===');
                }
            }
            
            if (language === 'html') {
                if (!code.includes('<!DOCTYPE')) {
                    analysis.issues.push('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π DOCTYPE');
                }
                if (code.includes('<img') && !code.match(/<img[^>]+alt=/)) {
                    analysis.issues.push('‚ùå img –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç—É');
                }
            }
            
            analysis.quality = analysis.issues.length === 0 ? 'good' : 'needs_improvement';
            return analysis;
        }
    },

    // üìã –†–æ–∑–±–∏—Ç—Ç—è –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è
    taskPlanner: {
        name: 'Task Planner',
        execute(task) {
            const steps = [];
            const lower = task.toLowerCase();
            
            if (lower.includes('—Å—Ç–≤–æ—Ä') || lower.includes('–∑—Ä–æ–±')) {
                steps.push('üìã –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–º–æ–≥–∏');
                steps.push('üé® –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏–∑–∞–π–Ω/—Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                steps.push('üíª –ù–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–¥');
                steps.push('üß™ –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏');
                steps.push('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏');
            } else if (lower.includes('–≤–∏–ø—Ä–∞–≤') || lower.includes('–±–∞–≥')) {
                steps.push('üîç –ó–Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É');
                steps.push('üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–∏—á–∏–Ω—É');
                steps.push('üîß –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥');
                steps.push('üß™ –ü—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è');
            } else if (lower.includes('–Ω–∞–≤—á–∏') || lower.includes('–∑–∞–ø–∞–º')) {
                steps.push('üìö –ó—ñ–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é');
                steps.push('üìù –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è');
                steps.push('üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ –ø–∞–º\'—è—Ç—å');
            } else {
                steps.push('ü§î –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏');
                steps.push('üí° –ó–Ω–∞–π—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è');
                steps.push('‚úÖ –í–∏–∫–æ–Ω–∞—Ç–∏');
            }
            
            return steps.map((desc, i) => ({
                id: i + 1,
                description: desc,
                status: 'pending'
            }));
        }
    },

    // üíæ –ü—Ä–æ—Å—Ç–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calculator: {
        name: 'Calculator',
        execute(expression) {
            try {
                const sanitized = expression.replace(/[^0-9+\-*/().]/g, '');
                const result = Function(`'use strict'; return (${sanitized})`)();
                
                return {
                    expression: expression,
                    result: result,
                    success: true
                };
            } catch (error) {
                return {
                    expression: expression,
                    error: error.message,
                    success: false
                };
            }
        }
    },

    // üéØ –í–∏—Ç—è–≥ –∫–ª—é—á–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    infoExtractor: {
        name: 'Info Extractor',
        execute(text, type = 'general') {
            const extracted = {
                emails: text.match(/[\w\.-]+@[\w\.-]+\.\w+/g) || [],
                urls: text.match(/https?:\/\/[^\s]+/g) || [],
                phones: text.match(/[\d\s\-\+\(\)]{10,}/g) || [],
                numbers: text.match(/\d+/g) || []
            };
            
            if (type === 'code') {
                extracted.functions = text.match(/function\s+(\w+)|const\s+(\w+)\s*=/g) || [];
                extracted.variables = text.match(/(?:let|const|var)\s+(\w+)/g) || [];
            }
            
            return extracted;
        }
    },

    // üìä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—É
    reportGenerator: {
        name: 'Report Generator',
        execute(data, type = 'summary') {
            let report = `üìä –ó–≤—ñ—Ç - ${new Date().toLocaleString('uk-UA')}\n\n`;
            
            if (type === 'summary' && data.stats) {
                report += 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n';
                Object.entries(data.stats).forEach(([key, value]) => {
                    report += `  ‚Ä¢ ${key}: ${value}\n`;
                });
            }
            
            if (data.items && Array.isArray(data.items)) {
                report += '\nüìã –ü–æ–∑–∏—Ü—ñ—ó:\n';
                data.items.forEach((item, i) => {
                    report += `  ${i + 1}. ${item}\n`;
                });
            }
            
            return report;
        }
    }
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.addEventListener('DOMContentLoaded', () => {
    console.log('üõ†Ô∏è Agent Tools –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
});

window.AgentTools = AgentTools;
