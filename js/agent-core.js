// ü§ñ AI Agent Core - –Ø–¥—Ä–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

class AIAgent {
    constructor() {
        this.isActive = false;
        this.currentTask = null;
        this.taskQueue = [];
        this.memory = [];
        this.tools = [];
        this.autonomousMode = false;
    }

    // –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞
    activate() {
        this.isActive = true;
        this.updateStatus();
        console.log('ü§ñ –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
    }

    // –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞
    deactivate() {
        this.isActive = false;
        this.currentTask = null;
        this.updateStatus();
        console.log('ü§ñ –ê–≥–µ–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞ –≤ UI
    updateStatus() {
        const statusDiv = document.getElementById('agentStatus');
        if (!statusDiv) return;

        const activeTasksSpan = document.getElementById('activeTasks');
        const memoryCountSpan = document.getElementById('memoryCount');

        if (activeTasksSpan) {
            activeTasksSpan.textContent = this.taskQueue.length;
        }

        if (memoryCountSpan) {
            memoryCountSpan.textContent = this.memory.length;
        }

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—É–ª—å—Å—É
        const pulse = statusDiv.querySelector('.pulse');
        if (pulse) {
            pulse.style.animation = this.isActive ? 
                'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite' : 'none';
        }
    }

    // –î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É
    addTask(task) {
        const taskObj = {
            id: Date.now(),
            description: task,
            status: 'pending',
            createdAt: new Date(),
            steps: []
        };

        this.taskQueue.push(taskObj);
        this.updateStatus();
        
        if (this.autonomousMode) {
            this.executeNextTask();
        }

        return taskObj;
    }

    // –í–∏–∫–æ–Ω–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    async executeNextTask() {
        if (this.taskQueue.length === 0) return;

        const task = this.taskQueue[0];
        this.currentTask = task;
        task.status = 'in_progress';

        console.log('ü§ñ –í–∏–∫–æ–Ω—É—é –∑–∞–≤–¥–∞–Ω–Ω—è:', task.description);

        try {
            // –†–æ–∑–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫—Ä–æ–∫–∏
            const steps = await this.planTask(task.description);
            task.steps = steps;

            // –í–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫
            for (let i = 0; i < steps.length; i++) {
                const step = steps[i];
                console.log(`  üìå –ö—Ä–æ–∫ ${i + 1}/${steps.length}:`, step.action);
                
                await this.executeStep(step);
                step.completed = true;
            }

            task.status = 'completed';
            this.taskQueue.shift();
            
            // –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            this.addMemory({
                type: 'task_completed',
                task: task.description,
                date: new Date()
            });

            console.log('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ:', task.description);

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:', error);
            task.status = 'failed';
            task.error = error.message;
        }

        this.currentTask = null;
        this.updateStatus();

        // –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–≤–¥–∞–Ω–Ω—è–º
        if (this.autonomousMode && this.taskQueue.length > 0) {
            setTimeout(() => this.executeNextTask(), 1000);
        }
    }

    // –†–æ–∑–±–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫—Ä–æ–∫–∏ (–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è)
    async planTask(taskDescription) {
        // –ë–∞–∑–æ–≤–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —á–µ—Ä–µ–∑ API)
        const steps = [];

        if (taskDescription.toLowerCase().includes('—Å—Ç–≤–æ—Ä') || 
            taskDescription.toLowerCase().includes('–∑—Ä–æ–±')) {
            steps.push({ action: 'analyze_requirements', tool: 'analyzer' });
            steps.push({ action: 'generate_code', tool: 'deepseek' });
            steps.push({ action: 'test_code', tool: 'analyzer' });
        } else if (taskDescription.toLowerCase().includes('–∑–Ω–∞–π–¥') || 
                   taskDescription.toLowerCase().includes('–ø–æ—à—É–∫')) {
            steps.push({ action: 'search', tool: 'search' });
            steps.push({ action: 'analyze_results', tool: 'gemini' });
        } else {
            steps.push({ action: 'process', tool: 'gemini' });
        }

        return steps;
    }

    // –í–∏–∫–æ–Ω–∞—Ç–∏ –æ–¥–∏–Ω –∫—Ä–æ–∫
    async executeStep(step) {
        // –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏)
        await new Promise(resolve => setTimeout(resolve, 1000));
        return true;
    }

    // –î–æ–¥–∞—Ç–∏ —Å–ø–æ–≥–∞–¥
    addMemory(memory) {
        const memoryObj = {
            id: Date.now(),
            ...memory,
            timestamp: new Date()
        };

        this.memory.unshift(memoryObj);
        
        // –û–±–º–µ–∂–∏—Ç–∏ –¥–æ 100 —Å–ø–æ–≥–∞–¥—ñ–≤
        if (this.memory.length > 100) {
            this.memory = this.memory.slice(0, 100);
        }

        this.saveMemoryToStorage();
        this.updateStatus();

        return memoryObj;
    }

    // –ü–æ—à—É–∫ –≤ –ø–∞–º'—è—Ç—ñ
    searchMemory(query) {
        const lowerQuery = query.toLowerCase();
        return this.memory.filter(mem => {
            const content = JSON.stringify(mem).toLowerCase();
            return content.includes(lowerQuery);
        });
    }

    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–∞–º'—è—Ç—å
    saveMemoryToStorage() {
        localStorage.setItem('agent_memory', JSON.stringify(this.memory));
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞–º'—è—Ç—å
    loadMemoryFromStorage() {
        const saved = localStorage.getItem('agent_memory');
        if (saved) {
            this.memory = JSON.parse(saved);
        }
        this.updateStatus();
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–∞–º'—è—Ç—å
    clearMemory() {
        this.memory = [];
        localStorage.removeItem('agent_memory');
        this.updateStatus();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
const agent = new AIAgent();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞
window.addEventListener('DOMContentLoaded', () => {
    agent.loadMemoryFromStorage();
    agent.activate();
});

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è UI
function enableAgentMode() {
    const currentValue = agent.autonomousMode;
    agent.autonomousMode = !currentValue;
    
    const btn = event.target;
    if (agent.autonomousMode) {
        btn.style.background = 'rgba(34, 197, 94, 0.3)';
        btn.textContent = 'ü§ñ –ê–≥–µ–Ω—Ç (–£–≤—ñ–º–∫–Ω–µ–Ω–æ)';
        alert('‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ!\n\n–ê–≥–µ–Ω—Ç —Ç–µ–ø–µ—Ä —Å–∞–º –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è.');
    } else {
        btn.style.background = 'rgba(255, 255, 255, 0.2)';
        btn.textContent = 'ü§ñ –ê–≥–µ–Ω—Ç';
        alert('‚ÑπÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ.');
    }
}

function addAgentTask() {
    const task = prompt('ü§ñ –Ø–∫–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–∞—Ç–∏ –∞–≥–µ–Ω—Ç—É?');
    if (!task) return;

    agent.addTask(task);
    alert(`‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –≤ —á–µ—Ä–≥—É!\n\n–í—Å—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω—å: ${agent.taskQueue.length}`);
}
