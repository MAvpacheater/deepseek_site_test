// üêô GitHub Repository Import Module

let githubToken = null;
let currentRepo = null;

// –Ü–º–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è –∑ GitHub
async function importFromGitHub() {
    const repoUrl = prompt(
        'üêô –í–≤–µ–¥—ñ—Ç—å URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:\n\n' +
        '–§–æ—Ä–º–∞—Ç: https://github.com/username/repo\n' +
        '–∞–±–æ: username/repo',
        ''
    );
    
    if (!repoUrl) return;
    
    // –ü–∞—Ä—Å–∏–Ω–≥ URL
    let owner, repo;
    const match = repoUrl.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    if (match) {
        owner = match[1];
        repo = match[2].replace('.git', '');
    } else {
        const parts = repoUrl.split('/');
        if (parts.length === 2) {
            owner = parts[0];
            repo = parts[1];
        } else {
            alert('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL!');
            return;
        }
    }
    
    showLoadingOverlay('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è...');
    
    try {
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è
        const treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/main?recursive=1`;
        const headers = githubToken ? { 'Authorization': `token ${githubToken}` } : {};
        
        let response = await fetch(treeUrl, { headers });
        
        // –Ø–∫—â–æ main –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ master
        if (!response.ok) {
            const masterUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/master?recursive=1`;
            response = await fetch(masterUrl, { headers });
        }
        
        if (!response.ok) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π. –ú–æ–∂–ª–∏–≤–æ –≤—ñ–Ω –ø—Ä–∏–≤–∞—Ç–Ω–∏–π?');
        }
        
        const data = await response.json();
        const files = data.tree.filter(item => item.type === 'blob');
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ñ–∞–π–ª–∏
        const allowedExtensions = ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.py', '.java', '.cpp', '.c', '.go', '.rs', '.php', '.rb'];
        const codeFiles = files.filter(file => 
            allowedExtensions.some(ext => file.path.endsWith(ext)) &&
            !file.path.includes('node_modules') &&
            !file.path.includes('.git') &&
            !file.path.includes('dist') &&
            !file.path.includes('build')
        );
        
        if (codeFiles.length === 0) {
            throw new Error('–£ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –∑ –∫–æ–¥–æ–º!');
        }
        
        // –û–±–º–µ–∂–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
        const filesToLoad = codeFiles.slice(0, 20);
        
        if (codeFiles.length > 20) {
            if (!confirm(`‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${codeFiles.length} —Ñ–∞–π–ª—ñ–≤.\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–µ—Ä—à—ñ 20?`)) {
                hideLoadingOverlay();
                return;
            }
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–º—ñ—Å—Ç —Ñ–∞–π–ª—ñ–≤
        updateLoadingOverlay(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${filesToLoad.length} —Ñ–∞–π–ª—ñ–≤...`);
        
        window.codeFiles = {};
        window.projectContext = {
            owner: owner,
            repo: repo,
            url: `https://github.com/${owner}/${repo}`,
            filesCount: filesToLoad.length
        };
        
        for (let i = 0; i < filesToLoad.length; i++) {
            const file = filesToLoad[i];
            updateLoadingOverlay(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${i + 1}/${filesToLoad.length}: ${file.path}`);
            
            const contentUrl = `https://raw.githubusercontent.com/${owner}/${repo}/main/${file.path}`;
            let contentResponse = await fetch(contentUrl);
            
            if (!contentResponse.ok) {
                const masterUrl = `https://raw.githubusercontent.com/${owner}/${repo}/master/${file.path}`;
                contentResponse = await fetch(masterUrl);
            }
            
            if (contentResponse.ok) {
                const content = await contentResponse.text();
                const ext = file.path.split('.').pop();
                const language = getLanguageFromExtension(ext);
                
                window.codeFiles[file.path] = {
                    language: language,
                    code: content,
                    size: content.length,
                    modified: false
                };
            }
        }
        
        currentRepo = { owner, repo, files: filesToLoad.length };
        
        hideLoadingOverlay();
        
        // –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏—Å—å –Ω–∞ DeepSeek —Ä–µ–∂–∏–º
        switchMode('deepseek');
        displayCodeFiles();
        
        // –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
        addGitHubImportMessage(owner, repo, filesToLoad.length);
        
        alert(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n\nüìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${filesToLoad.length} —Ñ–∞–π–ª—ñ–≤\n\n–¢–µ–ø–µ—Ä –º–æ–∂–µ—à –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ –∫–æ–¥!`);
        
    } catch (error) {
        hideLoadingOverlay();
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ' + error.message);
    }
}

// –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —ñ–º–ø–æ—Ä—Ç
function addGitHubImportMessage(owner, repo, filesCount) {
    const messagesDiv = document.getElementById('deepseekMessages');
    if (!messagesDiv) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    messageDiv.style.cssText = `
        background: linear-gradient(135deg, #2ea043 0%, #238636 100%);
        padding: 20px;
        border-radius: 12px;
        color: white;
        margin-bottom: 20px;
    `;
    
    messageDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 15px;">
            <div style="font-size: 48px;">üêô</div>
            <div style="flex: 1;">
                <div style="font-size: 18px; font-weight: 600; margin-bottom: 8px;">
                    –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ GitHub
                </div>
                <div style="opacity: 0.9; font-size: 14px; margin-bottom: 8px;">
                    üì¶ ${owner}/${repo}
                </div>
                <div style="opacity: 0.9; font-size: 14px;">
                    üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${filesCount} —Ñ–∞–π–ª—ñ–≤
                </div>
                <div style="margin-top: 12px; padding-top: 12px; border-top: 1px solid rgba(255,255,255,0.2);">
                    <div style="font-size: 13px; font-weight: 500; margin-bottom: 8px;">üí° –©–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏:</div>
                    <div style="font-size: 12px; opacity: 0.9; line-height: 1.6;">
                        ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–¥ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ üîç<br>
                        ‚Ä¢ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è üéØ<br>
                        ‚Ä¢ –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–∏ üß™<br>
                        ‚Ä¢ –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é üìö<br>
                        ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–µ–∑–ø–µ–∫—É üõ°Ô∏è
                    </div>
                </div>
            </div>
        </div>
    `;
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
function getLanguageFromExtension(ext) {
    const languages = {
        'js': 'javascript',
        'jsx': 'javascript',
        'ts': 'typescript',
        'tsx': 'typescript',
        'py': 'python',
        'html': 'html',
        'css': 'css',
        'scss': 'css',
        'java': 'java',
        'cpp': 'cpp',
        'c': 'c',
        'go': 'go',
        'rs': 'rust',
        'php': 'php',
        'rb': 'ruby'
    };
    return languages[ext] || 'plaintext';
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–ª—å–Ω–∏–π overlay
function showLoadingOverlay(message) {
    let overlay = document.getElementById('github-loading-overlay');
    
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'github-loading-overlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            z-index: 9999;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
        `;
        
        overlay.innerHTML = `
            <div style="font-size: 64px; margin-bottom: 20px;">üêô</div>
            <div style="font-size: 24px; font-weight: 600; margin-bottom: 10px;" id="loading-title">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
            <div style="font-size: 14px; color: rgba(255,255,255,0.7);" id="loading-subtitle"></div>
            <div style="margin-top: 30px;">
                <div class="loading-dots">
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
    }
    
    document.getElementById('loading-title').textContent = message;
    overlay.style.display = 'flex';
}

function updateLoadingOverlay(message) {
    const subtitle = document.getElementById('loading-subtitle');
    if (subtitle) {
        subtitle.textContent = message;
    }
}

function hideLoadingOverlay() {
    const overlay = document.getElementById('github-loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
window.importFromGitHub = importFromGitHub;

console.log('‚úÖ GitHub Import –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
