// üêô GitHub Integration - –Ü–º–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤ –∑ GitHub

let githubToken = localStorage.getItem('github_token') || null;
let currentRepoInfo = null;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è GitHub —Ç–æ–∫–µ–Ω—É
function setupGitHubToken() {
    const currentToken = githubToken || '';
    
    const token = prompt(
        'üîë GitHub Personal Access Token (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n\n' +
        '–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤\n\n' +
        '–û—Ç—Ä–∏–º–∞—Ç–∏: GitHub ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens\n\n' +
        '–ó–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è –ø—É–±–ª—ñ—á–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó–≤',
        currentToken
    );
    
    if (token !== null) {
        githubToken = token;
        if (token) {
            localStorage.setItem('github_token', token);
            alert('‚úÖ GitHub —Ç–æ–∫–µ–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
        } else {
            localStorage.removeItem('github_token');
            alert('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ');
        }
    }
}

// –Ü–º–ø–æ—Ä—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è –∑ GitHub
async function importFromGitHub() {
    const repoUrl = prompt(
        'üêô –í–≤–µ–¥—ñ—Ç—å URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è:\n\n' +
        '–ü—Ä–∏–∫–ª–∞–¥–∏:\n' +
        '‚Ä¢ https://github.com/username/repo\n' +
        '‚Ä¢ username/repo',
        ''
    );
    
    if (!repoUrl) return;
    
    // –ü–∞—Ä—Å–∏–Ω–≥ URL
    let owner, repo;
    
    const match = repoUrl.match(/github\.com\/([^\/]+)\/([^\/]+)/);
    if (match) {
        owner = match[1];
        repo = match[2].replace('.git', '');
    } else {
        const parts = repoUrl.split('/');
        if (parts.length >= 2) {
            owner = parts[0];
            repo = parts[1];
        } else {
            alert('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL!');
            return;
        }
    }
    
    showLoadingOverlay(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${owner}/${repo}...`);
    
    try {
        const headers = githubToken ? { 
            'Authorization': `token ${githubToken}`,
            'Accept': 'application/vnd.github.v3+json'
        } : {};
        
        // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ main, –ø–æ—Ç—ñ–º master
        let treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/main?recursive=1`;
        let response = await fetch(treeUrl, { headers });
        
        if (!response.ok) {
            treeUrl = `https://api.github.com/repos/${owner}/${repo}/git/trees/master?recursive=1`;
            response = await fetch(treeUrl, { headers });
        }
        
        if (!response.ok) {
            if (response.status === 403) {
                throw new Error('Rate limit exceeded. –î–æ–¥–∞–π GitHub —Ç–æ–∫–µ–Ω —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.');
            }
            throw new Error('–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø—Ä–∏–≤–∞—Ç–Ω–∏–π.');
        }
        
        const data = await response.json();
        const allFiles = data.tree.filter(item => item.type === 'blob');
        
        // –§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –∑ –∫–æ–¥–æ–º
        const allowedExtensions = [
            '.js', '.jsx', '.ts', '.tsx', '.html', '.htm', '.css', '.scss',
            '.py', '.java', '.cpp', '.c', '.go', '.rs', '.php', '.rb',
            '.json', '.xml', '.sql', '.md', '.vue', '.svelte'
        ];
        
        const codeFilesFiltered = allFiles.filter(file => {
            const hasExt = allowedExtensions.some(ext => file.path.endsWith(ext));
            const notIgnored = !file.path.includes('node_modules') &&
                             !file.path.includes('.git') &&
                             !file.path.includes('dist') &&
                             !file.path.includes('build') &&
                             !file.path.includes('.next') &&
                             !file.path.includes('package-lock.json');
            return hasExt && notIgnored;
        });
        
        if (codeFilesFiltered.length === 0) {
            throw new Error('–£ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤ –∑ –∫–æ–¥–æ–º!');
        }
        
        // –û–±–º–µ–∂–∏—Ç–∏ –¥–æ 50 —Ñ–∞–π–ª—ñ–≤
        const MAX_FILES = 50;
        const filesToLoad = codeFilesFiltered.slice(0, MAX_FILES);
        
        if (codeFilesFiltered.length > MAX_FILES) {
            const proceed = confirm(
                `‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ ${codeFilesFiltered.length} —Ñ–∞–π–ª—ñ–≤.\n\n` +
                `–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–µ—Ä—à—ñ ${MAX_FILES}?\n\n–¢–∞/–ù—ñ`
            );
            if (!proceed) {
                hideLoadingOverlay();
                return;
            }
        }
        
        // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ñ–∞–π–ª–∏
        if (typeof window.codeFiles !== 'undefined') {
            window.codeFiles = {};
        } else {
            window.codeFiles = {};
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏
        for (let i = 0; i < filesToLoad.length; i++) {
            const file = filesToLoad[i];
            updateLoadingOverlay(`${i + 1}/${filesToLoad.length}: ${file.path}`);
            
            const branch = 'main';
            let rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${file.path}`;
            let fileResponse = await fetch(rawUrl);
            
            if (!fileResponse.ok) {
                rawUrl = `https://raw.githubusercontent.com/${owner}/${repo}/master/${file.path}`;
                fileResponse = await fetch(rawUrl);
            }
            
            if (fileResponse.ok) {
                const content = await fileResponse.text();
                const ext = file.path.split('.').pop();
                const language = getLanguageFromExtension(ext);
                
                window.codeFiles[file.path] = {
                    language: language,
                    code: content,
                    size: content.length,
                    modified: false
                };
            }
            
            // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è rate limit
            await new Promise(r => setTimeout(r, 50));
        }
        
        currentRepoInfo = {
            owner: owner,
            repo: repo,
            branch: 'main',
            filesCount: filesToLoad.length,
            url: `https://github.com/${owner}/${repo}`
        };
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ —É projectContext –¥–ª—è deepseek.js
        if (typeof window.projectContext !== 'undefined') {
            window.projectContext = currentRepoInfo;
        }
        
        hideLoadingOverlay();
        
        // –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ DeepSeek
        if (typeof displayCodeFiles === 'function') {
            displayCodeFiles();
        }
        switchMode('deepseek');
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        addGitHubSuccessMessage(owner, repo, filesToLoad.length);
        
        alert(`‚úÖ GitHub —ñ–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π!\n\nüìÅ ${filesToLoad.length} —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ\nüìç ${owner}/${repo}`);
        
        // –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏
        if (typeof agent !== 'undefined' && agent) {
            agent.addMemory({
                type: 'github_imported',
                repo: `${owner}/${repo}`,
                filesCount: filesToLoad.length,
                date: new Date()
            });
        }
        
    } catch (error) {
        hideLoadingOverlay();
        console.error('GitHub –ø–æ–º–∏–ª–∫–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:\n' + error.message);
    }
}

// –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º–æ–≤—É –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
function getLanguageFromExtension(ext) {
    const map = {
        'js': 'javascript', 'jsx': 'javascript',
        'ts': 'typescript', 'tsx': 'typescript',
        'py': 'python',
        'html': 'html', 'htm': 'html',
        'css': 'css', 'scss': 'css',
        'java': 'java',
        'cpp': 'cpp', 'c': 'c',
        'go': 'go',
        'rs': 'rust',
        'php': 'php',
        'rb': 'ruby',
        'json': 'json',
        'xml': 'xml',
        'sql': 'sql',
        'md': 'markdown',
        'vue': 'html',
        'svelte': 'html'
    };
    return map[ext.toLowerCase()] || 'plaintext';
}

// –î–æ–±–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
function addGitHubSuccessMessage(owner, repo, count) {
    const messagesDiv = document.getElementById('deepseekMessages');
    if (!messagesDiv) return;
    
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    messageDiv.style.cssText = `
        background: linear-gradient(135deg, #2ea043 0%, #238636 100%);
        padding: 20px;
        border-radius: 12px;
        color: white;
        margin-bottom: 20px;
    `;
    
    messageDiv.innerHTML = `
        <div style="display: flex; gap: 15px; align-items: center;">
            <div style="font-size: 48px;">üêô</div>
            <div style="flex: 1;">
                <h3 style="margin: 0 0 8px 0; font-size: 18px;">–†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ GitHub</h3>
                <p style="margin: 0 0 8px 0; opacity: 0.9;">üì¶ ${owner}/${repo}</p>
                <p style="margin: 0 0 12px 0; opacity: 0.9;">üìÅ ${count} —Ñ–∞–π–ª—ñ–≤</p>
                <div style="padding-top: 12px; border-top: 1px solid rgba(255,255,255,0.2);">
                    <p style="margin: 0 0 8px 0; font-weight: 600;">üí° –¢–µ–ø–µ—Ä –º–æ–∂–µ—à:</p>
                    <ul style="margin: 0; padding-left: 20px; opacity: 0.9; line-height: 1.8;">
                        <li>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ñ–∞–π–ª—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ</li>
                        <li>–ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–¥ –Ω–∞ –ø–æ–º–∏–ª–∫–∏</li>
                        <li>–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç–∏ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏</li>
                        <li>–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏</li>
                        <li>–î–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó</li>
                    </ul>
                </div>
            </div>
        </div>
    `;
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –∫–æ–¥
async function analyzeImportedCode() {
    if (!currentRepoInfo) {
        alert('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —ñ–º–ø–æ—Ä—Ç—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π!');
        return;
    }
    
    if (!window.codeFiles || Object.keys(window.codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É!');
        return;
    }
    
    const action = prompt(
        'üîç –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É:\n\n' +
        '1 - –Ø–∫—ñ—Å—Ç—å –∫–æ–¥—É\n' +
        '2 - –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –±–∞–≥–∏\n' +
        '3 - –ë–µ–∑–ø–µ–∫–∞\n' +
        '4 - –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞\n' +
        '5 - Best Practices',
        '1'
    );
    
    const prompts = {
        '1': `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —è–∫—ñ—Å—Ç—å –∫–æ–¥–æ–≤–æ—ó –±–∞–∑–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—è ${currentRepoInfo.repo}. –û—Ü—ñ–Ω–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, best practices.`,
        '2': `–ó–Ω–∞–π–¥–∏ –≤—Å—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –±–∞–≥–∏ —Ç–∞ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –∫–æ–¥—ñ ${currentRepoInfo.repo}`,
        '3': `–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏ –∫–æ–¥–æ–≤–æ—ó –±–∞–∑–∏ ${currentRepoInfo.repo}. –®—É–∫–∞–π –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ.`,
        '4': `–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É ${currentRepoInfo.repo}. –û—Ü—ñ–Ω–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.`,
        '5': `–ü–µ—Ä–µ–≤—ñ—Ä –∫–æ–¥ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å best practices —Ç–∞ —Å—É—á–∞—Å–Ω–∏–º –ø–∞—Ç–µ—Ä–Ω–∞–º.`
    };
    
    const prompt = prompts[action] || prompts['1'];
    
    // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç
    const input = document.getElementById('deepseekInput');
    if (input) {
        input.value = prompt;
        input.style.height = 'auto';
        input.style.height = Math.min(input.scrollHeight, 150) + 'px';
        
        if (typeof sendDeepseekMessage === 'function') {
            await sendDeepseekMessage();
        }
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–∞–∑–∞–¥ –Ω–∞ GitHub (—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó)
function exportToGitHub() {
    if (!currentRepoInfo) {
        alert('‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —ñ–º–ø–æ—Ä—Ç—É–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π!');
        return;
    }
    
    if (!window.codeFiles || Object.keys(window.codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É!');
        return;
    }
    
    const action = confirm(
        'üíæ –ï–∫—Å–ø–æ—Ä—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∫–æ–¥—É\n\n' +
        '–û–ö - –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ZIP\n' +
        '–°–∫–∞—Å—É–≤–∞—Ç–∏ - –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó'
    );
    
    if (action) {
        if (typeof downloadAllAsZip === 'function') {
            downloadAllAsZip();
        }
    } else {
        const instructions = `
üêô –Ø–∫ –æ–Ω–æ–≤–∏—Ç–∏ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:

1Ô∏è‚É£ –ó–∞–≤–∞–Ω—Ç–∞–∂ ZIP –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏

2Ô∏è‚É£ –†–æ–∑–ø–∞–∫—É–π —Ç–∞ –∑–∞–º—ñ–Ω—ñ—Ç—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏

3Ô∏è‚É£ –£ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ:
   cd path/to/repo
   git add .
   git commit -m "ü§ñ AI improvements"
   git push origin main

4Ô∏è‚É£ –ê–±–æ —Å—Ç–≤–æ—Ä–∏ Pull Request:
   git checkout -b ai-improvements
   git push origin ai-improvements
   # –ù–∞ GitHub —Å—Ç–≤–æ—Ä–∏ PR

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ø–µ—Ä–µ–≤—ñ—Ä –∑–º—ñ–Ω–∏ –ø–µ—Ä–µ–¥ –∫–æ–º—ñ—Ç–æ–º!
        `;
        alert(instructions);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ loading overlay
function showLoadingOverlay(message) {
    let overlay = document.getElementById('github-loading-overlay');
    
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'github-loading-overlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(10px);
            z-index: 9999;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
        `;
        
        overlay.innerHTML = `
            <div style="font-size: 64px; margin-bottom: 20px;">üêô</div>
            <div style="font-size: 24px; font-weight: 600; margin-bottom: 10px;" id="github-loading-title">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
            <div style="font-size: 14px; color: rgba(255,255,255,0.7);" id="github-loading-subtitle"></div>
            <div style="margin-top: 30px;">
                <div class="loading-dots">
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                    <div class="loading-dot"></div>
                </div>
            </div>
        `;
        
        document.body.appendChild(overlay);
    }
    
    const title = document.getElementById('github-loading-title');
    if (title) title.textContent = message;
    
    overlay.style.display = 'flex';
}

function updateLoadingOverlay(message) {
    const subtitle = document.getElementById('github-loading-subtitle');
    if (subtitle) {
        subtitle.textContent = message;
    }
}

function hideLoadingOverlay() {
    const overlay = document.getElementById('github-loading-overlay');
    if (overlay) {
        overlay.style.display = 'none';
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.addEventListener('DOMContentLoaded', () => {
    const saved = localStorage.getItem('github_token');
    if (saved) {
        githubToken = saved;
    }
    console.log('‚úÖ GitHub Integration –≥–æ—Ç–æ–≤–∞');
});

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
window.importFromGitHub = importFromGitHub;
window.setupGitHubToken = setupGitHubToken;
window.analyzeImportedCode = analyzeImportedCode;
window.exportToGitHub = exportToGitHub;
