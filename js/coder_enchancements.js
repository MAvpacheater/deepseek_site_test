// DeepSeek Coder Enhancements

// üîç –ê–Ω–∞–ª—ñ–∑ –∫–æ–¥—É –Ω–∞ –ø–æ–º–∏–ª–∫–∏
async function analyzeCodeForErrors() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–¥—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É!');
        return;
    }
    
    const activeFileName = activeFile || Object.keys(codeFiles)[0];
    const code = codeFiles[activeFileName].code;
    const language = codeFiles[activeFileName].language;
    
    // –ë–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫
    const errors = [];
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è JavaScript
    if (language === 'javascript' || language === 'js') {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ console.log (–º–æ–∂–ª–∏–≤–æ –∑–∞–±—É–ª–∏ –ø—Ä–∏–±—Ä–∞—Ç–∏)
        const consoleMatches = code.match(/console\.log/g);
        if (consoleMatches && consoleMatches.length > 5) {
            errors.push({
                type: 'warning',
                message: `–ó–Ω–∞–π–¥–µ–Ω–æ ${consoleMatches.length} console.log - –º–æ–∂–ª–∏–≤–æ —Ç—Ä–µ–±–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ –¥–ª—è production`
            });
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ var (–∫—Ä–∞—â–µ let/const)
        if (code.includes('var ')) {
            errors.push({
                type: 'suggestion',
                message: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è var - –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ let –∞–±–æ const'
            });
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ ==  (–∫—Ä–∞—â–µ ===)
        if (code.match(/[^=!]==(?!=)/g)) {
            errors.push({
                type: 'suggestion',
                message: '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è == - –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ ==='
            });
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è CSS
    if (language === 'css') {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ !important
        const importantCount = (code.match(/!important/g) || []).length;
        if (importantCount > 3) {
            errors.push({
                type: 'warning',
                message: `–ù–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ !important (${importantCount}) - –º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ—Å—Ç—é`
            });
        }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è HTML
    if (language === 'html') {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—ñ —Ç–µ–≥–∏
        const openTags = code.match(/<(\w+)[^>]*>/g) || [];
        const closeTags = code.match(/<\/(\w+)>/g) || [];
        
        if (openTags.length !== closeTags.length) {
            errors.push({
                type: 'error',
                message: '–ú–æ–∂–ª–∏–≤–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –Ω–µ–∑–∞–∫—Ä–∏—Ç–∏–º–∏ HTML —Ç–µ–≥–∞–º–∏'
            });
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ alt –¥–ª—è img
        if (code.includes('<img') && !code.match(/<img[^>]+alt=/)) {
            errors.push({
                type: 'accessibility',
                message: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–µ–∑ alt –∞—Ç—Ä–∏–±—É—Ç—É (–ø–æ–≥–∞–Ω–æ –¥–ª—è accessibility)'
            });
        }
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    if (errors.length === 0) {
        alert('‚úÖ –ü–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ö–æ–¥ –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ.');
    } else {
        let report = 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É:\n\n';
        errors.forEach((err, i) => {
            const icon = err.type === 'error' ? '‚ùå' : err.type === 'warning' ? '‚ö†Ô∏è' : err.type === 'accessibility' ? '‚ôø' : 'üí°';
            report += `${icon} ${err.message}\n\n`;
        });
        alert(report);
    }
}

// üìù –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤
async function generateTests() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–¥—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤!');
        return;
    }
    
    const jsFiles = Object.keys(codeFiles).filter(name => 
        name.endsWith('.js') && !name.includes('test')
    );
    
    if (jsFiles.length === 0) {
        alert('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ JavaScript —Ñ–∞–π–ª—ñ–≤!');
        return;
    }
    
    const apiKey = localStorage.getItem('groq_api_key');
    if (!apiKey) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏ Groq API –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!');
        return;
    }
    
    const filename = jsFiles[0];
    const code = codeFiles[filename].code;
    
    const prompt = `–°—Ç–≤–æ—Ä–∏ unit —Ç–µ—Å—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ JavaScript –∫–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ Jest. –ü–æ–∫—Ä–∏–π –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ edge cases:\n\n${code}`;
    
    try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'llama-3.3-70b-versatile',
                messages: [
                    { role: 'system', content: '–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—é–π —á–∏—Å—Ç—ñ, –∑—Ä–æ–∑—É–º—ñ–ª—ñ —Ç–µ—Å—Ç–∏.' },
                    { role: 'user', content: prompt }
                ],
                temperature: 0.3,
                max_tokens: 2000
            })
        });
        
        const data = await response.json();
        const tests = data.choices[0].message.content;
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ—Å—Ç–∏ —É –Ω–æ–≤–∏–π —Ñ–∞–π–ª
        const testFilename = filename.replace('.js', '.test.js');
        const testCode = tests.replace(/```javascript\n?/g, '').replace(/```\n?/g, '');
        
        codeFiles[testFilename] = {
            language: 'javascript',
            code: testCode
        };
        
        displayCodeFiles();
        alert(`‚úÖ –¢–µ—Å—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É —Ñ–∞–π–ª—ñ ${testFilename}!`);
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–µ—Å—Ç—ñ–≤: ' + error.message);
    }
}

// üìö –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
async function generateDocumentation() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–¥—É –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó!');
        return;
    }
    
    let documentation = '# üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É\n\n';
    documentation += `–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleString('uk-UA')}\n\n`;
    documentation += '---\n\n';
    
    // –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
    Object.keys(codeFiles).forEach(filename => {
        const file = codeFiles[filename];
        documentation += `## üìÑ ${filename}\n\n`;
        documentation += `**–ú–æ–≤–∞:** ${file.language}\n\n`;
        documentation += `**–†–æ–∑–º—ñ—Ä:** ${file.code.length} —Å–∏–º–≤–æ–ª—ñ–≤\n\n`;
        
        // –í–∏—Ç—è–≥—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó (–¥–ª—è JS)
        if (file.language === 'javascript' || file.language === 'js') {
            const functions = file.code.match(/function\s+(\w+)|const\s+(\w+)\s*=\s*\([^)]*\)\s*=>/g);
            if (functions && functions.length > 0) {
                documentation += '### –§—É–Ω–∫—Ü—ñ—ó:\n\n';
                functions.forEach(func => {
                    const funcName = func.match(/\w+/)[0];
                    if (funcName !== 'function' && funcName !== 'const') {
                        documentation += `- \`${funcName}()\`\n`;
                    }
                });
                documentation += '\n';
            }
        }
        
        // –í–∏—Ç—è–≥—Ç–∏ –∫–ª–∞—Å–∏ (–¥–ª—è CSS)
        if (file.language === 'css') {
            const classes = file.code.match(/\.[\w-]+(?=\s*\{)/g);
            if (classes && classes.length > 0) {
                documentation += '### CSS –ö–ª–∞—Å–∏:\n\n';
                const uniqueClasses = [...new Set(classes)];
                uniqueClasses.slice(0, 20).forEach(cls => {
                    documentation += `- \`${cls}\`\n`;
                });
                if (uniqueClasses.length > 20) {
                    documentation += `\n... —Ç–∞ —â–µ ${uniqueClasses.length - 20} –∫–ª–∞—Å—ñ–≤\n`;
                }
                documentation += '\n';
            }
        }
        
        documentation += '---\n\n';
    });
    
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é
    const blob = new Blob([documentation], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'DOCUMENTATION.md';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    alert('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
}

// üéØ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É
async function refactorCode() {
    if (Object.keys(codeFiles).length === 0) {
        alert('‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–¥—É –¥–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É!');
        return;
    }
    
    const apiKey = localStorage.getItem('groq_api_key');
    if (!apiKey) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏ Groq API –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!');
        return;
    }
    
    const activeFileName = activeFile || Object.keys(codeFiles)[0];
    const code = codeFiles[activeFileName].code;
    
    const refactorType = prompt(
        '–Ø–∫–∏–π —Ç–∏–ø —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É?\n\n' +
        '1 - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n' +
        '2 - –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ\n' +
        '3 - –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è\n' +
        '4 - –ú–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É',
        '2'
    );
    
    const prompts = {
        '1': '–û–ø—Ç–∏–º—ñ–∑—É–π —Ü–µ–π –∫–æ–¥ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
        '2': '–ü–æ–∫—Ä–∞—â —á–∏—Ç–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å —Ü—å–æ–≥–æ –∫–æ–¥—É, –¥–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ',
        '3': '–í–∏–¥–∞–ª–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π DRY –ø—Ä–∏–Ω—Ü–∏–ø',
        '4': '–ú–æ–¥–µ—Ä–Ω—ñ–∑—É–π –∫–æ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å—É—á–∞—Å–Ω–∏–π ES6+ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å'
    };
    
    const promptText = prompts[refactorType] || prompts['2'];
    
    try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'llama-3.3-70b-versatile',
                messages: [
                    { role: 'system', content: '–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥—É.' },
                    { role: 'user', content: `${promptText}:\n\n${code}` }
                ],
                temperature: 0.3,
                max_tokens: 4000
            })
        });
        
        const data = await response.json();
        const refactoredCode = data.choices[0].message.content;
        
        // –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–∏–π –∫–æ–¥
        const newFilename = activeFileName.replace(/\.(\w+)$/, '_refactored.$1');
        const cleanCode = refactoredCode.replace(/```[\w]*\n?/g, '').replace(/```\n?/g, '');
        
        codeFiles[newFilename] = {
            language: codeFiles[activeFileName].language,
            code: cleanCode
        };
        
        displayCodeFiles();
        alert(`‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–æ–≤–∏–π —Ñ–∞–π–ª: ${newFilename}`);
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É: ' + error.message);
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—Ä–∞—â–µ–Ω—å
function initializeCoderEnhancements() {
    const codeHeader = document.querySelector('.code-header');
    if (!codeHeader) return;
    
    const existingEnhancements = document.getElementById('coder-enhancements');
    if (existingEnhancements) {
        existingEnhancements.remove();
    }
    
    const enhancementsDiv = document.createElement('div');
    enhancementsDiv.id = 'coder-enhancements';
    enhancementsDiv.style.display = 'flex';
    enhancementsDiv.style.gap = '8px';
    enhancementsDiv.style.marginTop = '10px';
    enhancementsDiv.style.flexWrap = 'wrap';
    
    enhancementsDiv.innerHTML = `
        <button onclick="analyzeCodeForErrors()" title="–ê–Ω–∞–ª—ñ–∑ –∫–æ–¥—É –Ω–∞ –ø–æ–º–∏–ª–∫–∏" style="background: rgba(102, 126, 234, 0.2); color: white; border: 1px solid var(--accent-primary); padding: 8px 14px; border-radius: 6px; cursor: pointer; font-size: 13px; font-weight: 500;">
            üîç –ê–Ω–∞–ª—ñ–∑
        </button>
        <button onclick="generateTests()" title="–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç—ñ–≤" style="background: rgba(102, 126, 234, 0.2); color: white; border: 1px solid var(--accent-primary); padding: 8px 14px; border-radius: 6px; cursor: pointer; font-size: 13px; font-weight: 500;">
            üß™ –¢–µ—Å—Ç–∏
        </button>
        <button onclick="generateDocumentation()" title="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è" style="background: rgba(102, 126, 234, 0.2); color: white; border: 1px solid var(--accent-primary); padding: 8px 14px; border-radius: 6px; cursor: pointer; font-size: 13px; font-weight: 500;">
            üìö Docs
        </button>
        <button onclick="refactorCode()" title="–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É" style="background: rgba(102, 126, 234, 0.2); color: white; border: 1px solid var(--accent-primary); padding: 8px 14px; border-radius: 6px; cursor: pointer; font-size: 13px; font-weight: 500;">
            üéØ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
        </button>
    `;
    
    codeHeader.appendChild(enhancementsDiv);
}
