// üìä Dashboard Manager - –í–ò–ü–†–ê–í–õ–ï–ù–û (NULL –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö)

class DashboardManager {
    constructor() {
        this.refreshInterval = null;
        this.activityFilter = 'all';
        this.init();
    }

    init() {
        console.log('‚úÖ Dashboard Manager initialized');
    }

    async render() {
        const container = document.getElementById('dashboardContent');
        if (!container) return;

        container.innerHTML = '';

        const stats = await this.getStats();
        const activities = await this.getRecentActivities();

        const quickAccessSection = this.createQuickAccessSection(stats);
        container.appendChild(quickAccessSection);

        const statsSection = this.createStatsSection(stats);
        container.appendChild(statsSection);

        const activitySection = this.createActivitySection(activities);
        container.appendChild(activitySection);

        const quickActionsSection = this.createQuickActionsSection();
        container.appendChild(quickActionsSection);

        const systemInfoSection = this.createSystemInfoSection(stats);
        container.appendChild(systemInfoSection);
    }

    createQuickAccessSection(stats) {
        const section = document.createElement('div');
        section.className = 'dashboard-section';

        const title = document.createElement('h2');
        title.className = 'section-title';
        title.innerHTML = 'üöÄ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø';

        const grid = document.createElement('div');
        grid.className = 'quick-access-grid';

        const geminiCard = this.createChatCard({
            id: 'gemini',
            icon: '‚ú®',
            title: 'Gemini Chat',
            subtitle: '–†–æ–∑—É–º–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç',
            description: 'Gemini 2.0 Flash –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É',
            requestsCount: stats.geminiRequests,
            messagesCount: stats.geminiMessages,
            lastActivity: this.getLastActivity('gemini', stats.geminiLastActivity),
            color: '#58a6ff'
        });

        const coderCard = this.createChatCard({
            id: 'deepseek',
            icon: 'üíª',
            title: 'DeepSeek Coder',
            subtitle: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É',
            description: 'Llama 3.3 70B –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥—É',
            requestsCount: stats.deepseekRequests,
            messagesCount: stats.deepseekMessages,
            lastActivity: this.getLastActivity('deepseek', stats.deepseekLastActivity),
            color: '#3fb950'
        });

        const imageCard = this.createChatCard({
            id: 'image',
            icon: 'üñºÔ∏è',
            title: 'Image Generator',
            subtitle: '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å',
            description: 'Pollinations.ai –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞ –æ–ø–∏—Å–æ–º',
            requestsCount: stats.imagesGenerated,
            messagesCount: stats.imagesGenerated,
            lastActivity: this.getLastActivity('image', stats.imageLastActivity),
            color: '#d29922'
        });

        grid.appendChild(geminiCard);
        grid.appendChild(coderCard);
        grid.appendChild(imageCard);

        section.appendChild(title);
        section.appendChild(grid);

        return section;
    }

    createChatCard(config) {
        const card = document.createElement('div');
        card.className = `chat-card ${config.id}`;
        card.onclick = () => {
            if (typeof switchMode === 'function') {
                switchMode(config.id);
            }
        };

        card.innerHTML = `
            <div class="chat-card-header">
                <div class="chat-card-icon">${config.icon}</div>
                <div class="chat-card-info">
                    <div class="chat-card-title">${config.title}</div>
                    <div class="chat-card-subtitle">${config.subtitle}</div>
                </div>
            </div>

            <div class="chat-card-stats">
                <div class="chat-stat">
                    <div class="chat-stat-value" style="color: ${config.color}">${config.requestsCount}</div>
                    <div class="chat-stat-label">–ó–∞–ø–∏—Ç—ñ–≤</div>
                </div>
                <div class="chat-stat">
                    <div class="chat-stat-value" style="color: ${config.color}">${config.messagesCount}</div>
                    <div class="chat-stat-label">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</div>
                </div>
            </div>

            <div class="chat-card-description">${config.description}</div>

            <div class="chat-card-action">
                <button class="chat-card-btn" style="--card-accent: ${config.color}">
                    <span>–í—ñ–¥–∫—Ä–∏—Ç–∏</span>
                    <span>‚Üí</span>
                </button>
                <div class="chat-card-last-activity">${config.lastActivity}</div>
            </div>
        `;

        return card;
    }

    createStatsSection(stats) {
        const section = document.createElement('div');
        section.className = 'dashboard-section';

        const title = document.createElement('h2');
        title.className = 'section-title';
        title.innerHTML = 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞';

        const grid = document.createElement('div');
        grid.className = 'stats-overview';

        const statsData = [
            { icon: '‚ú®', value: stats.geminiRequests, label: 'Gemini –∑–∞–ø–∏—Ç—ñ–≤', color: '#58a6ff', trend: this.calculateTrend('gemini', stats) },
            { icon: 'üíª', value: stats.deepseekRequests, label: 'DeepSeek –∑–∞–ø–∏—Ç—ñ–≤', color: '#3fb950', trend: this.calculateTrend('deepseek', stats) },
            { icon: 'üñºÔ∏è', value: stats.imagesGenerated, label: '–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å', color: '#d29922', trend: this.calculateTrend('images', stats) },
            { icon: 'üìö', value: stats.savedProjects, label: '–ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤', color: '#a371f7', trend: null },
            { icon: 'üî¢', value: this.formatNumber(stats.totalTokens), label: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ç–æ–∫–µ–Ω—ñ–≤', color: '#f85149', trend: null },
            { icon: 'üìÖ', value: this.calculateDaysUsed(stats.firstUse), label: '–î–Ω—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è', color: '#8b949e', trend: null }
        ];

        statsData.forEach(stat => {
            const card = this.createStatCard(stat);
            grid.appendChild(card);
        });

        section.appendChild(title);
        section.appendChild(grid);
        return section;
    }

    createStatCard(stat) {
        const card = document.createElement('div');
        card.className = 'stat-card';
        card.style.setProperty('--stat-color', stat.color);

        const trendHTML = stat.trend ? `
            <div class="stat-card-trend ${stat.trend > 0 ? 'up' : 'down'}">
                ${stat.trend > 0 ? '‚Üë' : '‚Üì'} ${Math.abs(stat.trend)}%
            </div>` : '';

        card.innerHTML = `
            <div class="stat-card-header">
                <div class="stat-card-icon" style="background: ${stat.color}15">${stat.icon}</div>
                ${trendHTML}
            </div>
            <div class="stat-card-content">
                <div class="stat-card-value" style="color: ${stat.color}">${stat.value}</div>
                <div class="stat-card-label">${stat.label}</div>
            </div>
        `;
        return card;
    }

    createActivitySection(activities) {
        const section = document.createElement('div');
        section.className = 'dashboard-section';

        const title = document.createElement('h2');
        title.className = 'section-title';
        title.innerHTML = '‚è±Ô∏è –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å';

        const timeline = document.createElement('div');
        timeline.className = 'activity-timeline';

        const header = document.createElement('div');
        header.className = 'activity-timeline-header';
        header.innerHTML = `
            <h3 class="activity-timeline-title">–•—Ä–æ–Ω–æ–ª–æ–≥—ñ—è –ø–æ–¥—ñ–π</h3>
            <div class="activity-timeline-filter">
                <button class="filter-btn active" onclick="dashboardManager.filterActivity('all')">–í—Å—ñ</button>
                <button class="filter-btn" onclick="dashboardManager.filterActivity('chat')">–ß–∞—Ç–∏</button>
                <button class="filter-btn" onclick="dashboardManager.filterActivity('code')">–ö–æ–¥</button>
                <button class="filter-btn" onclick="dashboardManager.filterActivity('system')">–°–∏—Å—Ç–µ–º–∞</button>
            </div>
        `;

        const itemsContainer = document.createElement('div');
        itemsContainer.className = 'timeline-items';
        itemsContainer.id = 'timelineItems';

        if (activities.length === 0) {
            itemsContainer.innerHTML = `
                <div class="dashboard-empty-state">
                    <div class="dashboard-empty-state-icon">‚è±Ô∏è</div>
                    <h3>–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ</h3>
                    <p>–ü–æ—á–Ω—ñ—Ç—å —Ä–æ–±–æ—Ç—É, —ñ —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è –ø–æ–¥—ñ—ó –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó.</p>
                </div>
            `;
        } else {
            activities.forEach(act => {
                const item = document.createElement('div');
                item.className = `timeline-item ${act.type}`;
                item.style.setProperty('--timeline-color', act.color || '#58a6ff');
                item.innerHTML = `
                    <div class="timeline-icon">${act.icon}</div>
                    <div class="timeline-content">
                        <div class="timeline-title">${act.title}</div>
                        <div class="timeline-description">${act.description}</div>
                        <div class="timeline-time">${act.time}</div>
                    </div>
                `;
                itemsContainer.appendChild(item);
            });
        }

        timeline.appendChild(header);
        timeline.appendChild(itemsContainer);
        section.appendChild(title);
        section.appendChild(timeline);
        return section;
    }

    filterActivity(type) {
        this.activityFilter = type;
        const buttons = document.querySelectorAll('.filter-btn');
        buttons.forEach(btn => btn.classList.remove('active'));
        const active = Array.from(buttons).find(b => b.textContent.toLowerCase().includes(type === 'all' ? '–≤—Å—ñ' : type));
        if (active) active.classList.add('active');

        const items = document.querySelectorAll('.timeline-item');
        items.forEach(item => {
            item.style.display = (type === 'all' || item.classList.contains(type)) ? '' : 'none';
        });
    }

    createQuickActionsSection() {
        const section = document.createElement('div');
        section.className = 'dashboard-section';

        const title = document.createElement('h2');
        title.className = 'section-title';
        title.innerHTML = '‚ö° –®–≤–∏–¥–∫—ñ –¥—ñ—ó';

        const grid = document.createElement('div');
        grid.className = 'quick-actions-grid';

        const actions = [
            { icon: 'üí¨', label: '–ù–æ–≤–∏–π —á–∞—Ç', action: () => switchMode('gemini') },
            { icon: 'üíª', label: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥', action: () => switchMode('deepseek') },
            { icon: 'üñºÔ∏è', label: '–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', action: () => switchMode('image') },
            { icon: 'üìö', label: '–ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏', action: () => switchMode('library') },
            { icon: 'üìÖ', label: '–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫', action: () => switchMode('planner') },
            { icon: '‚öôÔ∏è', label: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', action: () => switchMode('settings') }
        ];

        actions.forEach(a => {
            const btn = document.createElement('button');
            btn.className = 'quick-action-btn';
            btn.innerHTML = `${a.icon} ${a.label}`;
            btn.onclick = a.action;
            grid.appendChild(btn);
        });

        section.appendChild(title);
        section.appendChild(grid);
        return section;
    }

    createSystemInfoSection(stats) {
        const section = document.createElement('div');
        section.className = 'dashboard-section';

        const title = document.createElement('h2');
        title.className = 'section-title';
        title.innerHTML = 'üíª –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è';

        const info = document.createElement('div');
        info.className = 'system-info';

        const uptimeDays = this.calculateDaysUsed(stats.firstUse);
        const firstUseDate = stats.firstUse ? new Date(stats.firstUse).toLocaleDateString('uk-UA') : '–°—å–æ–≥–æ–¥–Ω—ñ';
        
        info.innerHTML = `
            <div class="system-info-grid">
                <div class="info-item">
                    <div class="info-item-icon">üß≠</div>
                    <div class="info-item-content">
                        <div class="info-item-label">–ü–µ—Ä—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</div>
                        <div class="info-item-value">${firstUseDate}</div>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-item-icon">üìÖ</div>
                    <div class="info-item-content">
                        <div class="info-item-label">–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç—Ä–∏–≤–∞—î</div>
                        <div class="info-item-value">${uptimeDays} –¥–Ω—ñ–≤</div>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-item-icon">üß©</div>
                    <div class="info-item-content">
                        <div class="info-item-label">–í–µ—Ä—Å—ñ—è —Å–∏—Å—Ç–µ–º–∏</div>
                        <div class="info-item-value">v2.3.1</div>
                    </div>
                </div>
                <div class="info-item">
                    <div class="info-item-icon">üïì</div>
                    <div class="info-item-content">
                        <div class="info-item-label">–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è</div>
                        <div class="info-item-value">${new Date().toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' })}</div>
                    </div>
                </div>
            </div>
        `;

        section.appendChild(title);
        section.appendChild(info);
        return section;
    }

    // ========================================
    // –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• - –í–ò–ü–†–ê–í–õ–ï–ù–û NULL CHECKS
    // ========================================

    async getStats() {
        const stats = window.appState ? appState.getStats() : {
            geminiRequests: 0,
            deepseekRequests: 0,
            imagesGenerated: 0,
            savedProjects: 0,
            totalTokens: 0,
            firstUse: Date.now()
        };

        if (window.appState) {
            // ‚úÖ –í–ò–ö–û–†–ò–°–¢–ê–¢–ò –ù–û–í–Ü –ú–ï–¢–û–î–ò getGeminiMessages() —Ç–∞ getDeepSeekMessages()
            const geminiMessages = appState.getGeminiMessages ? appState.getGeminiMessages() : [];
            const deepseekMessages = appState.getDeepSeekMessages ? appState.getDeepSeekMessages() : [];
            const imageGallery = appState.chat.image.gallery;

            stats.geminiMessages = geminiMessages.length;
            stats.deepseekMessages = deepseekMessages.length;
            
            // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: getLastMessageTime –ø–æ–≤–µ—Ä—Ç–∞—î null —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            stats.geminiLastActivity = this.getLastMessageTime(geminiMessages);
            stats.deepseekLastActivity = this.getLastMessageTime(deepseekMessages);
            stats.imageLastActivity = imageGallery.length > 0 ? imageGallery[0].timestamp : null;
        } else {
            stats.geminiMessages = 0;
            stats.deepseekMessages = 0;
            stats.geminiLastActivity = null;
            stats.deepseekLastActivity = null;
            stats.imageLastActivity = null;
        }

        if (window.storageManager) {
            try {
                const conversations = await storageManager.getConversations();
                const codeProjects = await storageManager.getCodeProjects();
                stats.savedProjects = conversations.length + codeProjects.length;
            } catch (error) {
                console.error('Failed to get saved projects:', error);
            }
        }

        return stats;
    }

    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—Ç–∏ null —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    getLastMessageTime(history) {
        if (!history || history.length === 0) return null;
        
        const lastMessage = history[history.length - 1];
        // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Date.now() —è–∫ fallback!
        return lastMessage.timestamp || lastMessage.created || null;
    }

    async getRecentActivities() {
        const activities = [];

        try {
            if (window.appState) {
                // ‚úÖ –í–ò–ö–û–†–ò–°–¢–ê–¢–ò –ù–û–í–Ü –ú–ï–¢–û–î–ò
                const geminiMessages = appState.getGeminiMessages ? appState.getGeminiMessages() : [];
                const deepseekMessages = appState.getDeepSeekMessages ? appState.getDeepSeekMessages() : [];
                const imageGallery = appState.chat.image.gallery;

                // Gemini –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if (geminiMessages.length > 0) {
                    const lastTime = this.getLastMessageTime(geminiMessages);
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null
                    if (lastTime !== null) {
                        activities.push({
                            type: 'chat',
                            icon: '‚ú®',
                            color: '#58a6ff',
                            title: 'Gemini Chat',
                            description: `${geminiMessages.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`,
                            time: this.formatTimeAgo(lastTime),
                            timestamp: lastTime
                        });
                    }
                }

                // DeepSeek –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if (deepseekMessages.length > 0) {
                    const lastTime = this.getLastMessageTime(deepseekMessages);
                    const codeFiles = appState.getAllCodeFiles();
                    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null
                    if (lastTime !== null) {
                        activities.push({
                            type: 'code',
                            icon: 'üíª',
                            color: '#3fb950',
                            title: 'DeepSeek Coder',
                            description: `${Object.keys(codeFiles).length} —Ñ–∞–π–ª—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ`,
                            time: this.formatTimeAgo(lastTime),
                            timestamp: lastTime
                        });
                    }
                }

                // Image –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                if (imageGallery.length > 0) {
                    const lastImage = imageGallery[0];
                    activities.push({
                        type: 'chat',
                        icon: 'üñºÔ∏è',
                        color: '#d29922',
                        title: 'Image Generator',
                        description: lastImage.prompt.substring(0, 50) + '...',
                        time: this.formatTimeAgo(lastImage.timestamp),
                        timestamp: lastImage.timestamp
                    });
                }

                // –ü–ª–∞–Ω–∏
                const plans = appState.getPlans();
                const completedPlans = plans.filter(p => p.status === 'completed');
                if (completedPlans.length > 0) {
                    const lastPlan = completedPlans[completedPlans.length - 1];
                    activities.push({
                        type: 'system',
                        icon: '‚úÖ',
                        color: '#3fb950',
                        title: '–ü–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                        description: lastPlan.title,
                        time: this.formatTimeAgo(lastPlan.updatedAt || lastPlan.created),
                        timestamp: lastPlan.updatedAt || lastPlan.created
                    });
                }

                // –°–ø–æ–≥–∞–¥–∏
                const memories = appState.getMemories();
                if (memories.length > 0) {
                    const lastMemory = memories[0];
                    activities.push({
                        type: 'system',
                        icon: 'üß†',
                        color: '#a371f7',
                        title: '–ù–æ–≤–∏–π —Å–ø–æ–≥–∞–¥',
                        description: lastMemory.title,
                        time: this.formatTimeAgo(lastMemory.timestamp),
                        timestamp: lastMemory.timestamp
                    });
                }
            }

            // –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏
            if (window.storageManager) {
                const conversations = await storageManager.getConversations();
                if (conversations.length > 0) {
                    const lastSaved = conversations[conversations.length - 1];
                    activities.push({
                        type: 'system',
                        icon: 'üíæ',
                        color: '#58a6ff',
                        title: '–ü—Ä–æ–µ–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ',
                        description: lastSaved.title,
                        time: this.formatTimeAgo(lastSaved.createdAt),
                        timestamp: new Date(lastSaved.createdAt).getTime()
                    });
                }
            }

            // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —á–∞—Å–æ–º
            activities.sort((a, b) => (b.timestamp || 0) - (a.timestamp || 0));

            return activities.slice(0, 10);

        } catch (error) {
            console.error('Failed to get activities:', error);
            return [];
        }
    }

    // ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–æ–±–∫–∞ null
    getLastActivity(model, lastActivityTime) {
        if (!lastActivityTime || lastActivityTime === null) {
            return '–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ';
        }
        return this.formatTimeAgo(lastActivityTime);
    }

    calculateTrend(type, stats) {
        const trendKey = `${type}_trend`;
        const previousValue = parseInt(localStorage.getItem(trendKey) || '0');
        
        let currentValue = 0;
        switch(type) {
            case 'gemini':
                currentValue = stats.geminiRequests;
                break;
            case 'deepseek':
                currentValue = stats.deepseekRequests;
                break;
            case 'images':
                currentValue = stats.imagesGenerated;
                break;
        }

        if (previousValue === 0) {
            localStorage.setItem(trendKey, currentValue.toString());
            return 0;
        }

        const trend = Math.round(((currentValue - previousValue) / previousValue) * 100);
        localStorage.setItem(trendKey, currentValue.toString());
        
        return trend;
    }

    calculateDaysUsed(firstUse) {
        if (!firstUse) return 1;
        const start = new Date(firstUse);
        const now = new Date();
        const diff = now - start;
        return Math.max(1, Math.floor(diff / (1000 * 60 * 60 * 24)) + 1);
    }

    formatNumber(num) {
        if (!num) return '0';
        return num.toLocaleString('uk-UA');
    }

    formatTimeAgo(timestamp) {
        if (!timestamp) return '–Ω–µ–≤—ñ–¥–æ–º–æ';

        const now = Date.now();
        const time = typeof timestamp === 'string' ? new Date(timestamp).getTime() : timestamp;
        const diff = now - time;

        const minutes = Math.floor(diff / 60000);
        const hours = Math.floor(diff / 3600000);
        const days = Math.floor(diff / 86400000);

        if (minutes < 1) return '—â–æ–π–Ω–æ';
        if (minutes < 60) return `${minutes} —Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours} –≥–æ–¥ —Ç–æ–º—É`;
        if (days < 7) return `${days} –¥–Ω —Ç–æ–º—É`;
        if (days < 30) return `${Math.floor(days / 7)} —Ç–∏–∂ —Ç–æ–º—É`;
        
        return new Date(time).toLocaleDateString('uk-UA');
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

const dashboardManager = new DashboardManager();

setInterval(() => {
    const dashboardMode = document.getElementById('dashboardMode');
    if (dashboardMode && dashboardMode.classList.contains('active')) {
        dashboardManager.render();
    }
}, 30000);

document.addEventListener('DOMContentLoaded', () => {
    if (window.appState) {
        appState.on('mode:change', ({ newMode }) => {
            if (newMode === 'dashboard') {
                setTimeout(() => dashboardManager.render(), 100);
            }
        });
    }
    
    const dashboardMode = document.getElementById('dashboardMode');
    if (dashboardMode && dashboardMode.classList.contains('active')) {
        dashboardManager.render();
    }
});

window.dashboardManager = dashboardManager;

console.log('‚úÖ Dashboard Manager loaded (FIXED - Null –¥–ª—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö)');
