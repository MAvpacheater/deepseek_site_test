// üìÖ Smart Planner - Refactored to use AppState & StorageManager

class PlannerManager {
    constructor() {
        this.reminders = [];
        this.init();
    }

    // ========================================
    // –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
    // ========================================

    init() {
        this.loadPlans();
        this.setupReminderChecks();
        console.log('‚úÖ Planner Manager initialized');
    }

    // ========================================
    // –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ü–õ–ê–ù–Ü–í
    // ========================================

    async loadPlans() {
        try {
            if (window.storageManager) {
                const plans = await storageManager.getPlans();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ appState
                if (window.appState) {
                    plans.forEach(plan => {
                        appState.agent.plans.push(plan);
                    });
                }
            } else if (window.appState) {
                // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ appState
                const plans = appState.getPlans();
            }

            this.updatePlansBadge();
            this.displayPlans();

        } catch (error) {
            console.error('Failed to load plans:', error);
            if (window.errorHandler) {
                errorHandler.logError({
                    type: 'planner_error',
                    message: 'Failed to load plans',
                    error: error.message,
                    severity: 'medium'
                });
            }
        }
    }

    // ========================================
    // –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ü–õ–ê–ù–Ü–í
    // ========================================

    async savePlans() {
        try {
            const plans = window.appState ? appState.getPlans() : [];

            if (window.storageManager) {
                // –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–∂–µ–Ω –ø–ª–∞–Ω –æ–∫—Ä–µ–º–æ
                for (const plan of plans) {
                    if (plan.id) {
                        await storageManager.update(storageManager.stores.plans, plan);
                    }
                }
            }

            this.updatePlansBadge();

        } catch (error) {
            console.error('Failed to save plans:', error);
        }
    }

    // ========================================
    // –û–ù–û–í–õ–ï–ù–ù–Ø –ë–ï–ô–î–ñ–ê
    // ========================================

    updatePlansBadge() {
        const badge = document.getElementById('plansBadge');
        if (!badge) return;

        const plans = window.appState ? appState.getPlans() : [];
        const activePlans = plans.filter(p => 
            p.status !== 'completed' && p.status !== 'cancelled'
        ).length;

        badge.textContent = activePlans;
        badge.style.display = activePlans > 0 ? 'inline-block' : 'none';
    }

    // ========================================
    // –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –ü–õ–ê–ù–Ü–í
    // ========================================

    displayPlans() {
        const grid = document.getElementById('plansGrid');
        if (!grid) return;

        const plans = window.appState ? appState.getPlans() : [];

        if (plans.length === 0) {
            grid.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìã</div>
                    <h3>–ù–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤</h3>
                    <p>–°—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ AI –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –π–æ–≥–æ</p>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–µ–¥–ª–∞–π–Ω–æ–º
        const sortedPlans = [...plans].sort((a, b) => {
            if (!a.deadline) return 1;
            if (!b.deadline) return -1;
            return new Date(a.deadline) - new Date(b.deadline);
        });

        grid.innerHTML = sortedPlans.map(plan => this.createPlanCard(plan)).join('');
    }

    createPlanCard(plan) {
        const priorityColor = {
            high: '#ef4444',
            medium: '#f59e0b',
            low: '#22c55e'
        }[plan.priority] || '#666';

        const statusIcon = {
            pending: '‚è≥',
            in_progress: 'üöÄ',
            completed: '‚úÖ',
            cancelled: '‚ùå'
        }[plan.status] || '‚è≥';

        const daysLeft = plan.deadline ? 
            Math.ceil((new Date(plan.deadline) - Date.now()) / (1000 * 60 * 60 * 24)) : null;

        const isOverdue = daysLeft !== null && daysLeft < 0;

        const progress = this.calculateProgress(plan);

        return `
            <div class="plan-card" style="border-left: 4px solid ${priorityColor};">
                <div class="plan-header">
                    <div class="plan-status">${statusIcon}</div>
                    <div class="plan-title">${this.escapeHTML(plan.title)}</div>
                    <button class="plan-menu-btn" onclick="plannerManager.togglePlanMenu(${plan.id})">‚ãÆ</button>
                </div>
                
                <div class="plan-description">${this.escapeHTML(plan.description)}</div>
                
                ${plan.deadline ? `
                    <div class="plan-deadline ${isOverdue ? 'overdue' : ''}">
                        üìÖ ${new Date(plan.deadline).toLocaleString('uk-UA')}
                        ${daysLeft !== null ? `
                            <span class="days-left">(${isOverdue ? '–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞' : '–∑–∞–ª–∏—à–∏–ª–æ—Å—å'} ${Math.abs(daysLeft)} –¥–Ω.)</span>
                        ` : ''}
                    </div>
                ` : ''}
                
                ${plan.subtasks && plan.subtasks.length > 0 ? `
                    <div class="plan-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <div class="progress-text">
                            ${plan.subtasks.filter(st => st.completed).length}/${plan.subtasks.length} –∑–∞–≤–¥–∞–Ω—å
                        </div>
                    </div>
                ` : ''}
                
                <div class="plan-actions">
                    <button onclick="plannerManager.viewPlan(${plan.id})">üëÅÔ∏è –î–µ—Ç–∞–ª—ñ</button>
                    <button onclick="plannerManager.updatePlanStatus(${plan.id})">üîÑ –°—Ç–∞—Ç—É—Å</button>
                    <button onclick="plannerManager.deletePlan(${plan.id})">üóëÔ∏è</button>
                </div>
                
                <div class="plan-menu" id="plan-menu-${plan.id}" style="display: none;">
                    <button onclick="plannerManager.editPlan(${plan.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    <button onclick="plannerManager.duplicatePlan(${plan.id})">üìã –î—É–±–ª—é–≤–∞—Ç–∏</button>
                    <button onclick="plannerManager.generateSubtasks(${plan.id})">ü§ñ AI –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è</button>
                    <button onclick="plannerManager.exportPlan(${plan.id})">üì§ –ï–∫—Å–ø–æ—Ä—Ç</button>
                </div>
            </div>
        `;
    }

    // ========================================
    // CRUD –û–ü–ï–†–ê–¶–Ü–á
    // ========================================

    createPlan() {
        const modal = document.getElementById('planModal');
        if (modal) {
            modal.classList.add('active');
            
            // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
            const titleInput = document.getElementById('planTitle');
            const descInput = document.getElementById('planDescription');
            const deadlineInput = document.getElementById('planDeadline');
            const priorityInput = document.getElementById('planPriority');

            if (titleInput) titleInput.value = '';
            if (descInput) descInput.value = '';
            if (deadlineInput) deadlineInput.value = '';
            if (priorityInput) priorityInput.value = 'medium';
        }
    }

    async savePlan() {
        const title = document.getElementById('planTitle')?.value.trim();
        const description = document.getElementById('planDescription')?.value.trim();
        const deadline = document.getElementById('planDeadline')?.value;
        const priority = document.getElementById('planPriority')?.value || 'medium';

        if (!title) {
            if (window.showToast) {
                showToast('‚ö†Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø–ª–∞–Ω—É!', 'warning');
            }
            return;
        }

        const plan = {
            id: Date.now(),
            title: title,
            description: description,
            deadline: deadline ? new Date(deadline).toISOString() : null,
            priority: priority,
            status: 'pending',
            created: new Date().toISOString(),
            subtasks: [],
            aiGenerated: false
        };

        try {
            // –î–æ–¥–∞—Ç–∏ –≤ appState
            if (window.appState) {
                appState.addPlan(plan);
            }

            // –ó–±–µ—Ä–µ–≥—Ç–∏ –≤ storageManager
            if (window.storageManager) {
                await storageManager.savePlan(plan);
            }

            this.displayPlans();
            this.closeModal('planModal');

            // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —è–∫—â–æ —î –¥–µ–¥–ª–∞–π–Ω
            if (deadline) {
                this.createReminderForPlan(plan);
            }

            if (window.showToast) {
                showToast('‚úÖ –ü–ª–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to save plan:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É', 'error');
            }
        }
    }

    viewPlan(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        let details = `üìã ${plan.title}\n\n`;
        details += `üìù ${plan.description}\n\n`;
        details += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(plan.status)}\n`;
        details += `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${this.getPriorityText(plan.priority)}\n`;

        if (plan.deadline) {
            const deadline = new Date(plan.deadline);
            details += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleString('uk-UA')}\n`;
        }

        if (plan.subtasks && plan.subtasks.length > 0) {
            details += `\n‚úÖ –ü—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è:\n`;
            plan.subtasks.forEach((st, i) => {
                details += `${st.completed ? '‚úì' : '‚óã'} ${i + 1}. ${st.title}\n`;
            });
        }

        alert(details);
    }

    async updatePlanStatus(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        const newStatus = prompt(
            '–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:\n\n' +
            '1 - –û—á—ñ–∫—É—î (‚è≥)\n' +
            '2 - –í –ø—Ä–æ—Ü–µ—Å—ñ (üöÄ)\n' +
            '3 - –ó–∞–≤–µ—Ä—à–µ–Ω–æ (‚úÖ)\n' +
            '4 - –°–∫–∞—Å–æ–≤–∞–Ω–æ (‚ùå)',
            plan.status === 'pending' ? '1' : 
            plan.status === 'in_progress' ? '2' : 
            plan.status === 'completed' ? '3' : '4'
        );

        const statuses = {
            '1': 'pending',
            '2': 'in_progress',
            '3': 'completed',
            '4': 'cancelled'
        };

        if (statuses[newStatus]) {
            plan.status = statuses[newStatus];

            // –û–Ω–æ–≤–∏—Ç–∏ –≤ appState
            if (window.appState) {
                appState.updatePlan(planId, { status: plan.status });
            }

            // –ó–±–µ—Ä–µ–≥—Ç–∏
            await this.savePlans();
            this.displayPlans();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if (plan.status === 'completed' && typeof autoRemember === 'function') {
                autoRemember('plan_completed', { title: plan.title });
            }
        }
    }

    async deletePlan(planId) {
        if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–ª–∞–Ω?')) return;

        try {
            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ appState
            if (window.appState) {
                appState.deletePlan(planId);
            }

            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑ storageManager
            if (window.storageManager) {
                await storageManager.delete(storageManager.stores.plans, planId);
            }

            this.displayPlans();

            if (window.showToast) {
                showToast('‚úÖ –ü–ª–∞–Ω –≤–∏–¥–∞–ª–µ–Ω–æ', 'success');
            }

        } catch (error) {
            console.error('Failed to delete plan:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error');
            }
        }
    }

    editPlan(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        document.getElementById('planTitle').value = plan.title;
        document.getElementById('planDescription').value = plan.description;
        document.getElementById('planDeadline').value = plan.deadline ? 
            new Date(plan.deadline).toISOString().slice(0, 16) : '';
        document.getElementById('planPriority').value = plan.priority;

        // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞–Ω –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è–º
        if (window.appState) {
            appState.deletePlan(planId);
        }

        const modal = document.getElementById('planModal');
        if (modal) modal.classList.add('active');
    }

    async duplicatePlan(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        const duplicate = {
            ...plan,
            id: Date.now(),
            title: plan.title + ' (–∫–æ–ø—ñ—è)',
            created: new Date().toISOString(),
            status: 'pending'
        };

        try {
            if (window.appState) {
                appState.addPlan(duplicate);
            }

            if (window.storageManager) {
                await storageManager.savePlan(duplicate);
            }

            this.displayPlans();

            if (window.showToast) {
                showToast('‚úÖ –ü–ª–∞–Ω –ø—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ!', 'success');
            }

        } catch (error) {
            console.error('Failed to duplicate plan:', error);
        }
    }

    // ========================================
    // AI –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–Ü–î–ó–ê–í–î–ê–ù–¨
    // ========================================

    async generateSubtasks(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        const apiKey = typeof getGroqApiKey === 'function' ? 
            getGroqApiKey() : 
            localStorage.getItem('groq_api_key');

        if (!apiKey) {
            if (window.showToast) {
                showToast('‚ö†Ô∏è –í–≤–µ–¥–∏ Groq API –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!', 'warning');
            }
            if (typeof switchMode === 'function') {
                switchMode('settings');
            }
            return;
        }

        if (window.showToast) {
            showToast('ü§ñ AI –≥–µ–Ω–µ—Ä—É—î –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è...', 'info');
        }

        const prompt = `–†–æ–∑–±–∏–π —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è (3-7 —à—Ç—É–∫):

–ó–∞–≤–¥–∞–Ω–Ω—è: ${plan.title}
–û–ø–∏—Å: ${plan.description}

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó:`;

        try {
            const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${apiKey}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: 'llama-3.3-70b-versatile',
                    messages: [
                        { role: 'system', content: '–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—é–π —á—ñ—Ç–∫—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è.' },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 500
                })
            });

            const data = await response.json();
            const subtasksText = data.choices[0].message.content;

            const subtasks = subtasksText
                .split('\n')
                .filter(line => line.trim())
                .map(line => line.replace(/^[-‚Ä¢*\d.]+\s*/, '').trim())
                .filter(line => line.length > 0)
                .map(title => ({
                    id: Date.now() + Math.random(),
                    title: title,
                    completed: false
                }));

            plan.subtasks = subtasks;
            plan.aiGenerated = true;

            // –û–Ω–æ–≤–∏—Ç–∏ –≤ appState
            if (window.appState) {
                appState.updatePlan(planId, { subtasks, aiGenerated: true });
            }

            await this.savePlans();
            this.displayPlans();

            if (window.showToast) {
                showToast(`‚úÖ AI —Å—Ç–≤–æ—Ä–∏–≤ ${subtasks.length} –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å!`, 'success');
            }

        } catch (error) {
            console.error('AI generation error:', error);
            if (window.showToast) {
                showToast('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å', 'error');
            }
        }
    }

    // ========================================
    // –ï–ö–°–ü–û–†–¢
    // ========================================

    exportPlan(planId) {
        const plans = window.appState ? appState.getPlans() : [];
        const plan = plans.find(p => p.id === planId);
        if (!plan) return;

        let markdown = `# ${plan.title}\n\n`;
        markdown += `**–û–ø–∏—Å:** ${plan.description}\n\n`;
        markdown += `**–°—Ç–∞—Ç—É—Å:** ${this.getStatusText(plan.status)}\n`;
        markdown += `**–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** ${this.getPriorityText(plan.priority)}\n`;

        if (plan.deadline) {
            markdown += `**–î–µ–¥–ª–∞–π–Ω:** ${new Date(plan.deadline).toLocaleString('uk-UA')}\n`;
        }

        if (plan.subtasks && plan.subtasks.length > 0) {
            markdown += `\n## –ü—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è:\n\n`;
            plan.subtasks.forEach((st, i) => {
                markdown += `- [${st.completed ? 'x' : ' '}] ${st.title}\n`;
            });
        }

        markdown += `\n---\n*–°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(plan.created).toLocaleString('uk-UA')}*`;

        const blob = new Blob([markdown], { type: 'text/markdown' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${plan.title}.md`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // ========================================
    // –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø
    // ========================================

    setupReminderChecks() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø–ª–∞–Ω–∏ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        setInterval(() => {
            this.checkOverduePlans();
        }, 10 * 60 * 1000);
    }

    checkOverduePlans() {
        const plans = window.appState ? appState.getPlans() : [];
        const now = Date.now();
        
        const overdue = plans.filter(p => 
            p.deadline && 
            new Date(p.deadline).getTime() < now && 
            p.status !== 'completed' && 
            p.status !== 'cancelled'
        );

        if (overdue.length > 0) {
            console.log(`‚ö†Ô∏è ${overdue.length} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤`);
        }

        return overdue;
    }

    createReminderForPlan(plan) {
        if (!plan.deadline) return;

        const deadline = new Date(plan.deadline);
        const now = Date.now();
        const timeUntil = deadline.getTime() - now;

        // –ù–∞–≥–∞–¥–∞—Ç–∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
        const reminderTime = deadline.getTime() - (24 * 60 * 60 * 1000);

        if (reminderTime > now) {
            setTimeout(() => {
                if (window.showToast) {
                    showToast(`üîî –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω: ${plan.title}`, 'warning', 10000);
                }
            }, reminderTime - now);
        }

        // –ù–∞–≥–∞–¥–∞—Ç–∏ –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É
        if (timeUntil > 0) {
            setTimeout(() => {
                if (window.showToast) {
                    showToast(`üî¥ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–¥–ª–∞–π–Ω: ${plan.title}`, 'error', 15000);
                }
            }, timeUntil);
        }
    }

    // ========================================
    // UTILITY –§–£–ù–ö–¶–Ü–á
    // ========================================

    calculateProgress(plan) {
        if (!plan.subtasks || plan.subtasks.length === 0) return 0;
        const completed = plan.subtasks.filter(st => st.completed).length;
        return Math.round((completed / plan.subtasks.length) * 100);
    }

    togglePlanMenu(planId) {
        const menu = document.getElementById(`plan-menu-${planId}`);
        if (menu) {
            const isVisible = menu.style.display !== 'none';

            // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –º–µ–Ω—é
            document.querySelectorAll('.plan-menu').forEach(m => {
                m.style.display = 'none';
            });

            menu.style.display = isVisible ? 'none' : 'block';
        }
    }

    getStatusText(status) {
        const texts = {
            pending: '‚è≥ –û—á—ñ–∫—É—î',
            in_progress: 'üöÄ –í –ø—Ä–æ—Ü–µ—Å—ñ',
            completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            cancelled: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ'
        };
        return texts[status] || status;
    }

    getPriorityText(priority) {
        const texts = {
            high: 'üî¥ –í–∏—Å–æ–∫–∏–π',
            medium: 'üü° –°–µ—Ä–µ–¥–Ω—ñ–π',
            low: 'üü¢ –ù–∏–∑—å–∫–∏–π'
        };
        return texts[priority] || priority;
    }

    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('active');
        }
    }

    escapeHTML(text) {
        if (window.sanitizer) {
            return sanitizer.escapeHTML(text);
        }
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

let plannerManager = null;

document.addEventListener('DOMContentLoaded', () => {
    plannerManager = new PlannerManager();

    // –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    window.createPlan = () => plannerManager.createPlan();
    window.savePlan = () => plannerManager.savePlan();
    window.viewPlan = (id) => plannerManager.viewPlan(id);
    window.updatePlanStatus = (id) => plannerManager.updatePlanStatus(id);
    window.deletePlan = (id) => plannerManager.deletePlan(id);
    window.editPlan = (id) => plannerManager.editPlan(id);
    window.duplicatePlan = (id) => plannerManager.duplicatePlan(id);
    window.generateSubtasks = (id) => plannerManager.generateSubtasks(id);
    window.exportPlan = (id) => plannerManager.exportPlan(id);
    window.displayPlans = () => plannerManager.displayPlans();
    window.togglePlanMenu = (id) => plannerManager.togglePlanMenu(id);

    console.log('‚úÖ Planner module loaded');
});

// –ï–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—É
window.PlannerManager = PlannerManager;
window.plannerManager = plannerManager;
