// üìÖ Smart Planner - –†–æ–∑—É–º–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è

let plans = [];
let reminders = [];

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤
function loadPlans() {
    const saved = localStorage.getItem('user_plans');
    if (saved) {
        plans = JSON.parse(saved);
    }
    updatePlansBadge();
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤
function savePlans() {
    localStorage.setItem('user_plans', JSON.stringify(plans));
    updatePlansBadge();
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–π–¥–∂–∞ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–ª–∞–Ω—ñ–≤
function updatePlansBadge() {
    const badge = document.getElementById('plansBadge');
    if (badge) {
        const activePlans = plans.filter(p => p.status !== 'completed').length;
        badge.textContent = activePlans;
        badge.style.display = activePlans > 0 ? 'inline-block' : 'none';
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø–ª–∞–Ω–∏
function displayPlans() {
    const grid = document.getElementById('plansGrid');
    if (!grid) return;
    
    if (plans.length === 0) {
        grid.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìã</div>
                <h3>–ù–µ–º–∞—î –ø–ª–∞–Ω—ñ–≤</h3>
                <p>–°—Ç–≤–æ—Ä–∏ —Å–≤—ñ–π –ø–µ—Ä—à–∏–π –ø–ª–∞–Ω –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ AI –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –π–æ–≥–æ</p>
            </div>
        `;
        return;
    }
    
    // –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–µ–¥–ª–∞–π–Ω–æ–º
    const sortedPlans = [...plans].sort((a, b) => {
        if (!a.deadline) return 1;
        if (!b.deadline) return -1;
        return new Date(a.deadline) - new Date(b.deadline);
    });
    
    grid.innerHTML = sortedPlans.map(plan => {
        const priorityColor = {
            high: '#ef4444',
            medium: '#f59e0b',
            low: '#22c55e'
        }[plan.priority];
        
        const statusIcon = {
            pending: '‚è≥',
            in_progress: 'üöÄ',
            completed: '‚úÖ',
            cancelled: '‚ùå'
        }[plan.status];
        
        const daysLeft = plan.deadline ? 
            Math.ceil((new Date(plan.deadline) - Date.now()) / (1000 * 60 * 60 * 24)) : null;
        
        const isOverdue = daysLeft !== null && daysLeft < 0;
        
        return `
            <div class="plan-card" style="border-left: 4px solid ${priorityColor};">
                <div class="plan-header">
                    <div class="plan-status">${statusIcon}</div>
                    <div class="plan-title">${escapeHtml(plan.title)}</div>
                    <button class="plan-menu-btn" onclick="togglePlanMenu(${plan.id})">‚ãÆ</button>
                </div>
                
                <div class="plan-description">${escapeHtml(plan.description)}</div>
                
                ${plan.deadline ? `
                    <div class="plan-deadline ${isOverdue ? 'overdue' : ''}">
                        üìÖ ${new Date(plan.deadline).toLocaleString('uk-UA')}
                        ${daysLeft !== null ? `
                            <span class="days-left">(${isOverdue ? '–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞' : '–∑–∞–ª–∏—à–∏–ª–æ—Å—å'} ${Math.abs(daysLeft)} –¥–Ω.)</span>
                        ` : ''}
                    </div>
                ` : ''}
                
                ${plan.subtasks && plan.subtasks.length > 0 ? `
                    <div class="plan-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${calculateProgress(plan)}%"></div>
                        </div>
                        <div class="progress-text">
                            ${plan.subtasks.filter(st => st.completed).length}/${plan.subtasks.length} –∑–∞–≤–¥–∞–Ω—å
                        </div>
                    </div>
                ` : ''}
                
                <div class="plan-actions">
                    <button onclick="viewPlan(${plan.id})">üëÅÔ∏è –î–µ—Ç–∞–ª—ñ</button>
                    <button onclick="updatePlanStatus(${plan.id})">üîÑ –°—Ç–∞—Ç—É—Å</button>
                    <button onclick="deletePlan(${plan.id})">üóëÔ∏è</button>
                </div>
                
                <div class="plan-menu" id="plan-menu-${plan.id}" style="display: none;">
                    <button onclick="editPlan(${plan.id})">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    <button onclick="duplicatePlan(${plan.id})">üìã –î—É–±–ª—é–≤–∞—Ç–∏</button>
                    <button onclick="generateSubtasks(${plan.id})">ü§ñ AI –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è</button>
                    <button onclick="sharePlan(${plan.id})">üì§ –ï–∫—Å–ø–æ—Ä—Ç</button>
                </div>
            </div>
        `;
    }).join('');
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω
function createPlan() {
    const modal = document.getElementById('planModal');
    modal.classList.add('active');
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ —Ñ–æ—Ä–º—É
    document.getElementById('planTitle').value = '';
    document.getElementById('planDescription').value = '';
    document.getElementById('planDeadline').value = '';
    document.getElementById('planPriority').value = 'medium';
}

// –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–ª–∞–Ω
function savePlan() {
    const title = document.getElementById('planTitle').value.trim();
    const description = document.getElementById('planDescription').value.trim();
    const deadline = document.getElementById('planDeadline').value;
    const priority = document.getElementById('planPriority').value;
    
    if (!title) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø–ª–∞–Ω—É!');
        return;
    }
    
    const plan = {
        id: Date.now(),
        title: title,
        description: description,
        deadline: deadline ? new Date(deadline).toISOString() : null,
        priority: priority,
        status: 'pending',
        created: new Date().toISOString(),
        subtasks: [],
        aiGenerated: false
    };
    
    plans.push(plan);
    savePlans();
    displayPlans();
    closeModal('planModal');
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —è–∫—â–æ —î –¥–µ–¥–ª–∞–π–Ω
    if (deadline && localStorage.getItem('agentReminders') !== 'false') {
        createReminderForPlan(plan);
    }
    
    alert('‚úÖ –ü–ª–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
}

// –û–±—á–∏—Å–ª–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
function calculateProgress(plan) {
    if (!plan.subtasks || plan.subtasks.length === 0) return 0;
    const completed = plan.subtasks.filter(st => st.completed).length;
    return Math.round((completed / plan.subtasks.length) * 100);
}

// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –º–µ–Ω—é –ø–ª–∞–Ω—É
function togglePlanMenu(planId) {
    const menu = document.getElementById(`plan-menu-${planId}`);
    if (menu) {
        const isVisible = menu.style.display !== 'none';
        
        // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ –º–µ–Ω—é
        document.querySelectorAll('.plan-menu').forEach(m => {
            m.style.display = 'none';
        });
        
        menu.style.display = isVisible ? 'none' : 'block';
    }
}

// –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–∞–Ω
function viewPlan(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    let details = `üìã ${plan.title}\n\n`;
    details += `üìù ${plan.description}\n\n`;
    details += `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(plan.status)}\n`;
    details += `‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: ${getPriorityText(plan.priority)}\n`;
    
    if (plan.deadline) {
        const deadline = new Date(plan.deadline);
        details += `üìÖ –î–µ–¥–ª–∞–π–Ω: ${deadline.toLocaleString('uk-UA')}\n`;
    }
    
    if (plan.subtasks && plan.subtasks.length > 0) {
        details += `\n‚úÖ –ü—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è:\n`;
        plan.subtasks.forEach((st, i) => {
            details += `${st.completed ? '‚úì' : '‚óã'} ${i + 1}. ${st.title}\n`;
        });
    }
    
    alert(details);
}

// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É
function updatePlanStatus(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    const newStatus = prompt(
        '–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å:\n\n' +
        '1 - –û—á—ñ–∫—É—î (‚è≥)\n' +
        '2 - –í –ø—Ä–æ—Ü–µ—Å—ñ (üöÄ)\n' +
        '3 - –ó–∞–≤–µ—Ä—à–µ–Ω–æ (‚úÖ)\n' +
        '4 - –°–∫–∞—Å–æ–≤–∞–Ω–æ (‚ùå)',
        plan.status === 'pending' ? '1' : 
        plan.status === 'in_progress' ? '2' : 
        plan.status === 'completed' ? '3' : '4'
    );
    
    const statuses = {
        '1': 'pending',
        '2': 'in_progress',
        '3': 'completed',
        '4': 'cancelled'
    };
    
    if (statuses[newStatus]) {
        plan.status = statuses[newStatus];
        
        if (plan.status === 'completed') {
            // –ó–∞–ø–∞–º'—è—Ç–∞—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if (window.agent) {
                agent.addMemory({
                    type: 'plan_completed',
                    title: plan.title,
                    date: new Date()
                });
            }
        }
        
        savePlans();
        displayPlans();
    }
}

// –í–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞–Ω
function deletePlan(planId) {
    if (!confirm('‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–ª–∞–Ω?')) return;
    
    plans = plans.filter(p => p.id !== planId);
    savePlans();
    displayPlans();
}

// –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–ª–∞–Ω
function editPlan(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    document.getElementById('planTitle').value = plan.title;
    document.getElementById('planDescription').value = plan.description;
    document.getElementById('planDeadline').value = plan.deadline ? 
        new Date(plan.deadline).toISOString().slice(0, 16) : '';
    document.getElementById('planPriority').value = plan.priority;
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π –ø–ª–∞–Ω –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    plans = plans.filter(p => p.id !== planId);
    
    const modal = document.getElementById('planModal');
    modal.classList.add('active');
}

// –î—É–±–ª—é–≤–∞—Ç–∏ –ø–ª–∞–Ω
function duplicatePlan(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    const duplicate = {
        ...plan,
        id: Date.now(),
        title: plan.title + ' (–∫–æ–ø—ñ—è)',
        created: new Date().toISOString(),
        status: 'pending'
    };
    
    plans.push(duplicate);
    savePlans();
    displayPlans();
    alert('‚úÖ –ü–ª–∞–Ω –ø—Ä–æ–¥—É–±–ª—å–æ–≤–∞–Ω–æ!');
}

// –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ AI
async function generateSubtasks(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    const apiKey = typeof getGroqApiKey === 'function' ? getGroqApiKey() : localStorage.getItem('groq_api_key');
    if (!apiKey) {
        alert('‚ö†Ô∏è –í–≤–µ–¥–∏ Groq API –∫–ª—é—á —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö!');
        return;
    }
    
    const prompt = `–†–æ–∑–±–∏–π —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è (3-7 —à—Ç—É–∫):

–ó–∞–≤–¥–∞–Ω–Ω—è: ${plan.title}
–û–ø–∏—Å: ${plan.description}

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—ó:`;
    
    try {
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'llama-3.3-70b-versatile',
                messages: [
                    { role: 'system', content: '–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è. –°—Ç–≤–æ—Ä—é–π —á—ñ—Ç–∫—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è.' },
                    { role: 'user', content: prompt }
                ],
                temperature: 0.7,
                max_tokens: 500
            })
        });
        
        const data = await response.json();
        const subtasksText = data.choices[0].message.content;
        
        const subtasks = subtasksText
            .split('\n')
            .filter(line => line.trim())
            .map(line => line.replace(/^[-‚Ä¢*\d.]+\s*/, '').trim())
            .filter(line => line.length > 0)
            .map(title => ({
                id: Date.now() + Math.random(),
                title: title,
                completed: false
            }));
        
        plan.subtasks = subtasks;
        plan.aiGenerated = true;
        savePlans();
        displayPlans();
        
        alert(`‚úÖ AI —Å—Ç–≤–æ—Ä–∏–≤ ${subtasks.length} –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å!`);
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–∑–∞–≤–¥–∞–Ω—å');
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω—É
function sharePlan(planId) {
    const plan = plans.find(p => p.id === planId);
    if (!plan) return;
    
    let markdown = `# ${plan.title}\n\n`;
    markdown += `**–û–ø–∏—Å:** ${plan.description}\n\n`;
    markdown += `**–°—Ç–∞—Ç—É—Å:** ${getStatusText(plan.status)}\n`;
    markdown += `**–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:** ${getPriorityText(plan.priority)}\n`;
    
    if (plan.deadline) {
        markdown += `**–î–µ–¥–ª–∞–π–Ω:** ${new Date(plan.deadline).toLocaleString('uk-UA')}\n`;
    }
    
    if (plan.subtasks && plan.subtasks.length > 0) {
        markdown += `\n## –ü—ñ–¥–∑–∞–≤–¥–∞–Ω–Ω—è:\n\n`;
        plan.subtasks.forEach((st, i) => {
            markdown += `- [${st.completed ? 'x' : ' '}] ${st.title}\n`;
        });
    }
    
    markdown += `\n---\n*–°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date(plan.created).toLocaleString('uk-UA')}*`;
    
    const blob = new Blob([markdown], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${plan.title}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–ª–∞–Ω—É
function createReminderForPlan(plan) {
    if (!plan.deadline) return;
    
    const deadline = new Date(plan.deadline);
    const now = Date.now();
    const timeUntil = deadline.getTime() - now;
    
    // –ù–∞–≥–∞–¥–∞—Ç–∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
    const reminderTime = deadline.getTime() - (24 * 60 * 60 * 1000);
    
    if (reminderTime > now) {
        setTimeout(() => {
            alert(`üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è!\n\n–ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω: ${plan.title}`);
        }, reminderTime - now);
    }
    
    // –ù–∞–≥–∞–¥–∞—Ç–∏ –≤ –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É
    if (timeUntil > 0) {
        setTimeout(() => {
            alert(`üî¥ –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–¥–ª–∞–π–Ω: ${plan.title}`);
        }, timeUntil);
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø–ª–∞–Ω–∏
function checkOverduePlans() {
    const now = Date.now();
    const overdue = plans.filter(p => 
        p.deadline && 
        new Date(p.deadline).getTime() < now && 
        p.status !== 'completed' && 
        p.status !== 'cancelled'
    );
    
    return overdue;
}

// –¢–µ–∫—Å—Ç–æ–≤—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
function getStatusText(status) {
    const texts = {
        pending: '‚è≥ –û—á—ñ–∫—É—î',
        in_progress: 'üöÄ –í –ø—Ä–æ—Ü–µ—Å—ñ',
        completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ',
        cancelled: '‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ'
    };
    return texts[status] || status;
}

function getPriorityText(priority) {
    const texts = {
        high: 'üî¥ –í–∏—Å–æ–∫–∏–π',
        medium: 'üü° –°–µ—Ä–µ–¥–Ω—ñ–π',
        low: 'üü¢ –ù–∏–∑—å–∫–∏–π'
    };
    return texts[priority] || priority;
}

// –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
window.addEventListener('DOMContentLoaded', () => {
    loadPlans();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø–ª–∞–Ω–∏ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
    setInterval(() => {
        const overdue = checkOverduePlans();
        if (overdue.length > 0 && localStorage.getItem('agentReminders') !== 'false') {
            console.log(`‚ö†Ô∏è ${overdue.length} –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –ø–ª–∞–Ω—ñ–≤`);
        }
    }, 10 * 60 * 1000);
});
