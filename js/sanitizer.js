// üõ°Ô∏è HTML Sanitizer - XSS –∑–∞—Ö–∏—Å—Ç —Ç–∞ –±–µ–∑–ø–µ—á–Ω–∞ —Ä–æ–±–æ—Ç–∞ –∑ HTML

class HTMLSanitizer {
    constructor() {
        this.allowedTags = new Set([
            'p', 'br', 'span', 'div', 'strong', 'em', 'b', 'i', 'u',
            'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
            'ul', 'ol', 'li', 'blockquote', 'pre', 'code',
            'a', 'img', 'table', 'thead', 'tbody', 'tr', 'th', 'td'
        ]);

        this.allowedAttributes = {
            'a': ['href', 'title', 'target', 'rel'],
            'img': ['src', 'alt', 'title', 'width', 'height'],
            'span': ['class', 'style'],
            'div': ['class', 'style'],
            'code': ['class'],
            'pre': ['class'],
            'td': ['colspan', 'rowspan'],
            'th': ['colspan', 'rowspan']
        };

        this.allowedProtocols = new Set(['http:', 'https:', 'mailto:']);

        this.dangerousPatterns = [
            /javascript:/gi,
            /data:text\/html/gi,
            /vbscript:/gi,
            /on\w+\s*=/gi, // onclick, onerror, etc.
            /<script/gi,
            /<iframe/gi,
            /<object/gi,
            /<embed/gi,
            /<link/gi,
            /<meta/gi
        ];
    }

    // ========================================
    // –û–°–ù–û–í–ù–ê –°–ê–ù–Ü–¢–ò–ó–ê–¶–Ü–Ø
    // ========================================

    sanitize(html, options = {}) {
        if (!html) return '';
        if (typeof html !== 'string') return String(html);

        // –û–ø—Ü—ñ—ó
        const {
            allowHTML = true,
            allowLinks = true,
            allowImages = true,
            stripTags = false
        } = options;

        // –Ø–∫—â–æ stripTags - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ—Å—å HTML
        if (stripTags) {
            return this.stripAllTags(html);
        }

        // –Ø–∫—â–æ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ HTML - escape –≤—Å–µ
        if (!allowHTML) {
            return this.escapeHTML(html);
        }

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const temp = document.createElement('div');
        temp.innerHTML = html;

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Å–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è
        this.sanitizeNode(temp, { allowLinks, allowImages });

        return temp.innerHTML;
    }

    sanitizeNode(node, options) {
        if (!node) return;

        // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤
        if (node.nodeType === Node.TEXT_NODE) {
            return;
        }

        // –û–±—Ä–æ–±–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        if (node.nodeType === Node.ELEMENT_NODE) {
            const tagName = node.tagName.toLowerCase();

            // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–µ–≥–∏
            if (!this.allowedTags.has(tagName)) {
                // –ó–±–µ—Ä–µ–≥—Ç–∏ –¥—ñ—Ç–µ–π, –∞–ª–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–∞–º —Ç–µ–≥
                while (node.firstChild) {
                    node.parentNode.insertBefore(node.firstChild, node);
                }
                node.parentNode.removeChild(node);
                return;
            }

            // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫—â–æ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ
            if (tagName === 'a' && !options.allowLinks) {
                while (node.firstChild) {
                    node.parentNode.insertBefore(node.firstChild, node);
                }
                node.parentNode.removeChild(node);
                return;
            }

            // –í–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ
            if (tagName === 'img' && !options.allowImages) {
                node.parentNode.removeChild(node);
                return;
            }

            // –û—á–∏—Å—Ç–∏—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏
            this.sanitizeAttributes(node);
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–∏—Ç–∏ –¥—ñ—Ç–µ–π
        const children = Array.from(node.childNodes);
        children.forEach(child => this.sanitizeNode(child, options));
    }

    sanitizeAttributes(element) {
        const tagName = element.tagName.toLowerCase();
        const allowedAttrs = this.allowedAttributes[tagName] || [];

        // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
        const attributes = Array.from(element.attributes);

        attributes.forEach(attr => {
            const attrName = attr.name.toLowerCase();

            // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
            if (!allowedAttrs.includes(attrName)) {
                element.removeAttribute(attr.name);
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
            const value = attr.value;

            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
            if (this.isDangerousValue(value)) {
                element.removeAttribute(attr.name);
                return;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ URL –∞—Ç—Ä–∏–±—É—Ç–∏
            if (attrName === 'href' || attrName === 'src') {
                if (!this.isSafeURL(value)) {
                    element.removeAttribute(attr.name);
                    return;
                }
            }

            // –û–±–º–µ–∂–∏—Ç–∏ style –∞—Ç—Ä–∏–±—É—Ç
            if (attrName === 'style') {
                element.setAttribute('style', this.sanitizeStyle(value));
            }
        });
    }

    // ========================================
    // –ü–ï–†–ï–í–Ü–†–ö–ò –ë–ï–ó–ü–ï–ö–ò
    // ========================================

    isDangerousValue(value) {
        if (!value) return false;

        return this.dangerousPatterns.some(pattern => pattern.test(value));
    }

    isSafeURL(url) {
        if (!url) return false;

        try {
            // –í—ñ–¥–Ω–æ—Å–Ω—ñ URL - –±–µ–∑–ø–µ—á–Ω—ñ
            if (url.startsWith('/') || url.startsWith('./') || url.startsWith('../')) {
                return true;
            }

            // Anchor links - –±–µ–∑–ø–µ—á–Ω—ñ
            if (url.startsWith('#')) {
                return true;
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª
            const urlObj = new URL(url, window.location.origin);
            return this.allowedProtocols.has(urlObj.protocol);

        } catch (e) {
            // –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π URL
            return false;
        }
    }

    sanitizeStyle(style) {
        if (!style) return '';

        // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
        const dangerous = ['expression', 'behavior', 'binding', 'javascript:', 'vbscript:'];
        
        let safe = style;
        dangerous.forEach(keyword => {
            const regex = new RegExp(keyword, 'gi');
            safe = safe.replace(regex, '');
        });

        return safe;
    }

    // ========================================
    // ESCAPE –§–£–ù–ö–¶–Ü–á
    // ========================================

    escapeHTML(text) {
        if (!text) return '';

        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#x27;',
            '/': '&#x2F;',
            '`': '&#x60;'
        };

        return String(text).replace(/[&<>"'`/]/g, char => map[char]);
    }

    unescapeHTML(text) {
        if (!text) return '';

        const map = {
            '&amp;': '&',
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&#x27;': "'",
            '&#x2F;': '/',
            '&#x60;': '`'
        };

        return String(text).replace(/&(?:amp|lt|gt|quot|#x27|#x2F|#x60);/g, entity => map[entity]);
    }

    stripAllTags(html) {
        if (!html) return '';

        const temp = document.createElement('div');
        temp.innerHTML = html;
        return temp.textContent || temp.innerText || '';
    }

    // ========================================
    // MARKDOWN –†–ï–ù–î–ï–†–ò–ù–ì (–ë–ï–ó–ü–ï–ß–ù–ò–ô)
    // ========================================

    renderMarkdown(markdown) {
        if (!markdown) return '';

        let html = markdown;

        // Headers
        html = html.replace(/^### (.*$)/gim, '<h3>$1</h3>');
        html = html.replace(/^## (.*$)/gim, '<h2>$1</h2>');
        html = html.replace(/^# (.*$)/gim, '<h1>$1</h1>');

        // Bold
        html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        html = html.replace(/__(.*?)__/g, '<strong>$1</strong>');

        // Italic
        html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
        html = html.replace(/_(.*?)_/g, '<em>$1</em>');

        // Code inline
        html = html.replace(/`(.*?)`/g, '<code>$1</code>');

        // Code blocks
        html = html.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
            const escapedCode = this.escapeHTML(code);
            const language = lang || 'plaintext';
            return `<pre><code class="language-${language}">${escapedCode}</code></pre>`;
        });

        // Links - –ë–ï–ó–ü–ï–ß–ù–û
        html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
            if (this.isSafeURL(url)) {
                return `<a href="${this.escapeHTML(url)}" target="_blank" rel="noopener noreferrer">${this.escapeHTML(text)}</a>`;
            }
            return this.escapeHTML(text);
        });

        // Line breaks
        html = html.replace(/\n/g, '<br>');

        // Sanitize final HTML
        return this.sanitize(html);
    }

    // ========================================
    // –ë–ï–ó–ü–ï–ß–ù–ê –†–û–ë–û–¢–ê –ó DOM
    // ========================================

    safeSetHTML(element, html, options = {}) {
        if (!element) return;

        const sanitized = this.sanitize(html, options);
        element.innerHTML = sanitized;
    }

    safeAppendHTML(element, html, options = {}) {
        if (!element) return;

        const sanitized = this.sanitize(html, options);
        const temp = document.createElement('div');
        temp.innerHTML = sanitized;

        while (temp.firstChild) {
            element.appendChild(temp.firstChild);
        }
    }

    safeSetText(element, text) {
        if (!element) return;

        element.textContent = text;
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –±–µ–∑–ø–µ—á–Ω–æ
    createElement(tag, attributes = {}, children = []) {
        const element = document.createElement(tag);

        // –î–æ–¥–∞—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏
        Object.entries(attributes).forEach(([key, value]) => {
            if (key === 'style' && typeof value === 'object') {
                Object.assign(element.style, value);
            } else if (key === 'className') {
                element.className = value;
            } else if (key === 'textContent') {
                element.textContent = value;
            } else if (key === 'innerHTML') {
                this.safeSetHTML(element, value);
            } else {
                element.setAttribute(key, value);
            }
        });

        // –î–æ–¥–∞—Ç–∏ –¥—ñ—Ç–µ–π
        children.forEach(child => {
            if (typeof child === 'string') {
                element.appendChild(document.createTextNode(child));
            } else if (child instanceof Node) {
                element.appendChild(child);
            }
        });

        return element;
    }

    // ========================================
    // –í–ê–õ–Ü–î–ê–¶–Ü–Ø –í–í–ï–î–ï–ù–ù–Ø
    // ========================================

    validateInput(input, rules = {}) {
        const {
            maxLength = 10000,
            minLength = 0,
            pattern = null,
            allowHTML = false,
            required = false
        } = rules;

        const errors = [];

        // Required check
        if (required && (!input || input.trim() === '')) {
            errors.push('–ü–æ–ª–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–µ');
            return { valid: false, errors, value: input };
        }

        if (!input) {
            return { valid: true, errors: [], value: input };
        }

        // Length check
        if (input.length < minLength) {
            errors.push(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${minLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
        }

        if (input.length > maxLength) {
            errors.push(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞: ${maxLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
        }

        // Pattern check
        if (pattern && !pattern.test(input)) {
            errors.push('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç');
        }

        // HTML check
        if (!allowHTML && /<[^>]*>/g.test(input)) {
            errors.push('HTML —Ç–µ–≥–∏ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ');
        }

        // XSS check
        if (this.isDangerousValue(input)) {
            errors.push('–í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –≤–º—ñ—Å—Ç');
        }

        const value = allowHTML ? this.sanitize(input) : this.escapeHTML(input);

        return {
            valid: errors.length === 0,
            errors,
            value
        };
    }

    // ========================================
    // CODE SYNTAX HIGHLIGHTING (–ë–ï–ó–ü–ï–ß–ù–û)
    // ========================================

    highlightCode(code, language = 'plaintext') {
        // Escape —Å–ø–æ—á–∞—Ç–∫—É
        const escaped = this.escapeHTML(code);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Prism —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (typeof Prism !== 'undefined' && Prism.languages[language]) {
            return Prism.highlight(code, Prism.languages[language], language);
        }

        // Fallback - –ø—Ä–æ—Å—Ç–æ escaped –∫–æ–¥
        return escaped;
    }

    // ========================================
    // UTILITY –§–£–ù–ö–¶–Ü–á
    // ========================================

    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º—ñ—Å—Ç–∏—Ç—å XSS
    containsXSS(text) {
        if (!text) return false;

        return this.dangerousPatterns.some(pattern => pattern.test(text));
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ–º'—è —Ñ–∞–π–ª—É
    sanitizeFilename(filename) {
        if (!filename) return 'untitled';

        return filename
            .replace(/[^a-zA-Z0-9._-]/g, '_')
            .replace(/_{2,}/g, '_')
            .substring(0, 255);
    }

    // –û—á–∏—Å—Ç–∏—Ç–∏ URL
    sanitizeURL(url) {
        if (!url) return '';

        try {
            const urlObj = new URL(url);
            
            // –î–æ–∑–≤–æ–ª–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±–µ–∑–ø–µ—á–Ω—ñ –ø—Ä–æ—Ç–æ–∫–æ–ª–∏
            if (!this.allowedProtocols.has(urlObj.protocol)) {
                return '';
            }

            return urlObj.href;
        } catch (e) {
            return '';
        }
    }

    // ========================================
    // CONTENT SECURITY POLICY HELPERS
    // ========================================

    generateCSPMeta() {
        const csp = [
            "default-src 'self'",
            "script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com",
            "style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com",
            "img-src 'self' data: https: blob:",
            "font-src 'self' https://cdnjs.cloudflare.com",
            "connect-src 'self' https://api.groq.com https://generativelanguage.googleapis.com https://image.pollinations.ai",
            "frame-src 'none'",
            "object-src 'none'",
            "base-uri 'self'"
        ].join('; ');

        const meta = document.createElement('meta');
        meta.httpEquiv = 'Content-Security-Policy';
        meta.content = csp;

        return meta;
    }

    // ========================================
    // –ë–ï–ó–ü–ï–ß–ù–Ü –®–ê–ë–õ–û–ù–ò
    // ========================================

    // –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–∞—Ç—É
    createMessageElement(text, sender = 'user') {
        const messageDiv = this.createElement('div', {
            className: `message ${sender}`
        });

        const avatar = this.createElement('div', {
            className: 'message-avatar',
            textContent: sender === 'user' ? 'üë§' : 'ü§ñ'
        });

        const contentDiv = this.createElement('div', {
            className: 'message-content',
            textContent: text // –ë–µ–∑–ø–µ—á–Ω–æ —á–µ—Ä–µ–∑ textContent
        });

        messageDiv.appendChild(avatar);
        messageDiv.appendChild(contentDiv);

        return messageDiv;
    }

    // –®–∞–±–ª–æ–Ω –¥–ª—è code block
    createCodeBlock(code, language = 'plaintext', filename = '') {
        const codeBlock = this.createElement('div', {
            className: 'code-block'
        });

        // Header
        const header = this.createElement('div', {
            className: 'code-block-header'
        });

        if (filename) {
            const fileNameSpan = this.createElement('span', {
                className: 'code-block-name',
                textContent: this.sanitizeFilename(filename)
            });
            header.appendChild(fileNameSpan);
        }

        const copyBtn = this.createElement('button', {
            textContent: 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏',
            onclick: () => {
                navigator.clipboard.writeText(code);
                copyBtn.textContent = '‚úì –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    copyBtn.textContent = 'üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏';
                }, 2000);
            }
        });
        header.appendChild(copyBtn);

        // Code content
        const pre = this.createElement('pre');
        const codeElement = this.createElement('code', {
            className: `language-${language}`
        });

        // Highlight –∫–æ–¥ –±–µ–∑–ø–µ—á–Ω–æ
        const highlighted = this.highlightCode(code, language);
        codeElement.innerHTML = highlighted;

        pre.appendChild(codeElement);
        codeBlock.appendChild(header);
        codeBlock.appendChild(pre);

        return codeBlock;
    }
}

// ========================================
// –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ========================================

const sanitizer = new HTMLSanitizer();

// –î–æ–¥–∞—Ç–∏ CSP meta tag
document.addEventListener('DOMContentLoaded', () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∂–µ —î CSP
    const existingCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    if (!existingCSP) {
        const cspMeta = sanitizer.generateCSPMeta();
        document.head.insertBefore(cspMeta, document.head.firstChild);
        console.log('‚úÖ CSP Meta tag added');
    }
});

// ========================================
// –ü–ê–¢–ß–ò–ù–ì –ù–ï–ë–ï–ó–ü–ï–ß–ù–ò–• –ú–ï–¢–û–î–Ü–í
// ========================================

// Wrapper –¥–ª—è innerHTML
Object.defineProperty(Element.prototype, 'safeHTML', {
    set: function(html) {
        sanitizer.safeSetHTML(this, html);
    },
    get: function() {
        return this.innerHTML;
    }
});

// ========================================
// EXPORT
// ========================================

window.sanitizer = sanitizer;
window.escapeHTML = sanitizer.escapeHTML.bind(sanitizer);
window.sanitizeHTML = sanitizer.sanitize.bind(sanitizer);
window.safeSetHTML = sanitizer.safeSetHTML.bind(sanitizer);
window.createSafeElement = sanitizer.createElement.bind(sanitizer);

console.log('‚úÖ HTML Sanitizer initialized');
